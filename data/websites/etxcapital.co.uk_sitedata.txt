{"link":"etxcapital.co.uk","html":"<head><iframe height=\"0\" width=\"0\" src=\"//4314171.fls.doubleclick.net/activityi;src=4314171;type=retar466;cat=retar158;ord=1567115625777;~oref=https%3A%2F%2Fwww.etxcapital.co.uk%2F?\" id=\"iFrameResizer0\" scrolling=\"no\" style=\"display: none; visibility: hidden; overflow: hidden;\"></iframe><iframe height=\"0\" width=\"0\" src=\"//4487845.fls.doubleclick.net/activityi;src=4487845;type=ETXVi0;cat=uk_vis;u4=en-GB;ord=7619154524680;~oref=https%3A%2F%2Fwww.etxcapital.co.uk%2F?\" id=\"iFrameResizer1\" scrolling=\"no\" style=\"display: none; visibility: hidden; overflow: hidden;\"></iframe><script type=\"text/javascript\" src=\"https://pi.pardot.com/pd.js\"></script><script src=\"https://connect.facebook.net/signals/config/808534595842409?v=stable\" async=\"\"></script><script async=\"\" src=\"//connect.facebook.net/en_US/fbevents.js\"></script><script src=\"//bat.bing.com/bat.js\" async=\"\"></script><script type=\"text/javascript\" async=\"\" src=\"//www.googleadservices.com/pagead/conversion_async.js\"></script><script type=\"text/javascript\" async=\"\" src=\"//dnn506yrbagrg.cloudfront.net/pages/scripts/0010/4169.js?414706\"></script><meta charset=\"utf-8\"><title>\n\tForex, Spread betting &amp; CFD Trading UK | ETX Capital\n</title><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"><meta name=\"apple-itunes-app\" content=\"app-id=543494470\"><link href=\"https://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,700italic,400,300,600,700,900\" rel=\"stylesheet\" type=\"text/css\"><link rel=\"Shortcut Icon\" type=\"image/png\" href=\"favicon.png\"><link href=\"Content/Styles/bootstrap.min.css\" rel=\"stylesheet\"><script id=\"facebook-jssdk\" src=\"//connect.facebook.net/en_US/sdk.js#xfbml=1&amp;version=v2.8&amp;appId=306422586388300\"></script><script async=\"\" src=\"//www.google-analytics.com/analytics.js\"></script><script async=\"\" src=\"//www.googletagmanager.com/gtm.js?id=GTM-K79WJF\"></script><script type=\"text/javascript\" src=\"//code.jquery.com/jquery-latest.min.js\"></script><script type=\"text/javascript\">        $(document).ready(function () {\n\n            $('ul.tabs li').click(function () {\n                var tab_id = $(this).attr('data-tab');\n\n                $('ul.tabs li').removeClass('current');\n                $('.tab-content').removeClass('current');\n\n                $(this).addClass('current');\n                $(\"#\" + tab_id).addClass('current');\n            })\n\n        });</script><script type=\"text/javascript\" src=\"//www.google-analytics.com/analytics.js\"></script><script type=\"text/javascript\"></script><!-- Google Tag Manager -->\n\t\t\n\t\t<script>dataLayer = [{\n\t\t'l':'en-GB',\n\t\t'wl':'ETX' }];</script>\n\t\t<noscript>&amp;lt;iframe src=\"//www.googletagmanager.com/ns.html?l=en-GB&amp;amp;wl=ETX&amp;amp;id=GTM-K79WJF\"\n\t\theight=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"&amp;gt;&amp;lt;/iframe&amp;gt;</noscript>\n\t\t<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\n\t\tnew Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n\t\tj=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n\t\t'//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n\t})(window, document, 'script', 'dataLayer', 'GTM-K79WJF');</script>\n    <!-- End Google Tag Manager -->\n<script> </script><script type=\"text/javascript\" src=\"//code.jquery.com/jquery-latest.min.js\"></script><script type=\"text/javascript\">        $(document).ready(function () {\n\n            $('ul.tabs li').click(function () {\n                var tab_id = $(this).attr('data-tab');\n\n                $('ul.tabs li').removeClass('current');\n                $('.tab-content').removeClass('current');\n\n                $(this).addClass('current');\n                $(\"#\" + tab_id).addClass('current');\n            })\n\n        });</script><script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/magnific-popup.js/1.1.0/jquery.magnific-popup.js\"></script><script type=\"text/javascript\">$(document).ready(function($) {\n    $('.popup-youtube, .popup-vimeo').magnificPopup({\n        disableOn: false,\n        type: 'iframe',\n        mainClass: 'mfp-fade',\n        removalDelay: 160,\n        preloader: false,\n\n        fixedContentPos: false\n    });\n});\n</script><script type=\"text/javascript\"></script>\n<style type=\"text/css\">.fb_hidden{position:absolute;top:-10000px;z-index:10001}.fb_reposition{overflow:hidden;position:relative}.fb_invisible{display:none}.fb_reset{background:none;border:0;border-spacing:0;color:#000;cursor:auto;direction:ltr;font-family:\"lucida grande\", tahoma, verdana, arial, sans-serif;font-size:11px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:1;margin:0;overflow:visible;padding:0;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;visibility:visible;white-space:normal;word-spacing:normal}.fb_reset>div{overflow:hidden}.fb_link img{border:none}@keyframes fb_transform{from{opacity:0;transform:scale(.95)}to{opacity:1;transform:scale(1)}}.fb_animate{animation:fb_transform .3s forwards}\n.fb_dialog{background:rgba(82, 82, 82, .7);position:absolute;top:-10000px;z-index:10001}.fb_reset .fb_dialog_legacy{overflow:visible}.fb_dialog_advanced{padding:10px;-moz-border-radius:8px;-webkit-border-radius:8px;border-radius:8px}.fb_dialog_content{background:#fff;color:#333}.fb_dialog_close_icon{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 0 transparent;cursor:pointer;display:block;height:15px;position:absolute;right:18px;top:17px;width:15px}.fb_dialog_mobile .fb_dialog_close_icon{top:5px;left:5px;right:auto}.fb_dialog_padding{background-color:transparent;position:absolute;width:1px;z-index:-1}.fb_dialog_close_icon:hover{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -15px transparent}.fb_dialog_close_icon:active{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -30px transparent}.fb_dialog_loader{background-color:#f6f7f9;border:1px solid #606060;font-size:24px;padding:20px}.fb_dialog_top_left,.fb_dialog_top_right,.fb_dialog_bottom_left,.fb_dialog_bottom_right{height:10px;width:10px;overflow:hidden;position:absolute}.fb_dialog_top_left{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 0;left:-10px;top:-10px}.fb_dialog_top_right{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -10px;right:-10px;top:-10px}.fb_dialog_bottom_left{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -20px;bottom:-10px;left:-10px}.fb_dialog_bottom_right{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -30px;right:-10px;bottom:-10px}.fb_dialog_vert_left,.fb_dialog_vert_right,.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{position:absolute;background:#525252;filter:alpha(opacity=70);opacity:.7}.fb_dialog_vert_left,.fb_dialog_vert_right{width:10px;height:100%}.fb_dialog_vert_left{margin-left:-10px}.fb_dialog_vert_right{right:0;margin-right:-10px}.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{width:100%;height:10px}.fb_dialog_horiz_top{margin-top:-10px}.fb_dialog_horiz_bottom{bottom:0;margin-bottom:-10px}.fb_dialog_iframe{line-height:0}.fb_dialog_content .dialog_title{background:#6d84b4;border:1px solid #365899;color:#fff;font-size:14px;font-weight:bold;margin:0}.fb_dialog_content .dialog_title>span{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yd/r/Cou7n-nqK52.gif) no-repeat 5px 50%;float:left;padding:5px 0 7px 26px}body.fb_hidden{-webkit-transform:none;height:100%;margin:0;overflow:visible;position:absolute;top:-10000px;left:0;width:100%}.fb_dialog.fb_dialog_mobile.loading{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ya/r/3rhSv5V8j3o.gif) white no-repeat 50% 50%;min-height:100%;min-width:100%;overflow:hidden;position:absolute;top:0;z-index:10001}.fb_dialog.fb_dialog_mobile.loading.centered{width:auto;height:auto;min-height:initial;min-width:initial;background:none}.fb_dialog.fb_dialog_mobile.loading.centered #fb_dialog_loader_spinner{width:100%}.fb_dialog.fb_dialog_mobile.loading.centered .fb_dialog_content{background:none}.loading.centered #fb_dialog_loader_close{color:#fff;display:block;padding-top:20px;clear:both;font-size:18px}#fb-root #fb_dialog_ipad_overlay{background:rgba(0, 0, 0, .45);position:absolute;bottom:0;left:0;right:0;top:0;width:100%;min-height:100%;z-index:10000}#fb-root #fb_dialog_ipad_overlay.hidden{display:none}.fb_dialog.fb_dialog_mobile.loading iframe{visibility:hidden}.fb_dialog_content .dialog_header{-webkit-box-shadow:white 0 1px 1px -1px inset;background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#738ABA), to(#2C4987));border-bottom:1px solid;border-color:#1d4088;color:#fff;font:14px Helvetica, sans-serif;font-weight:bold;text-overflow:ellipsis;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0;vertical-align:middle;white-space:nowrap}.fb_dialog_content .dialog_header table{-webkit-font-smoothing:subpixel-antialiased;height:43px;width:100%}.fb_dialog_content .dialog_header td.header_left{font-size:12px;padding-left:5px;vertical-align:middle;width:60px}.fb_dialog_content .dialog_header td.header_right{font-size:12px;padding-right:5px;vertical-align:middle;width:60px}.fb_dialog_content .touchable_button{background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#4966A6), color-stop(.5, #355492), to(#2A4887));border:1px solid #29487d;-webkit-background-clip:padding-box;-webkit-border-radius:3px;-webkit-box-shadow:rgba(0, 0, 0, .117188) 0 1px 1px inset, rgba(255, 255, 255, .167969) 0 1px 0;display:inline-block;margin-top:3px;max-width:85px;line-height:18px;padding:4px 12px;position:relative}.fb_dialog_content .dialog_header .touchable_button input{border:none;background:none;color:#fff;font:12px Helvetica, sans-serif;font-weight:bold;margin:2px -12px;padding:2px 6px 3px 6px;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog_content .dialog_header .header_center{color:#fff;font-size:16px;font-weight:bold;line-height:18px;text-align:center;vertical-align:middle}.fb_dialog_content .dialog_content{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat 50% 50%;border:1px solid #555;border-bottom:0;border-top:0;height:150px}.fb_dialog_content .dialog_footer{background:#f6f7f9;border:1px solid #555;border-top-color:#ccc;height:40px}#fb_dialog_loader_close{float:left}.fb_dialog.fb_dialog_mobile .fb_dialog_close_button{text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog.fb_dialog_mobile .fb_dialog_close_icon{visibility:hidden}#fb_dialog_loader_spinner{animation:rotateSpinner 1.2s linear infinite;background-color:transparent;background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yD/r/t-wz8gw1xG1.png);background-repeat:no-repeat;background-position:50% 50%;height:24px;width:24px}@keyframes rotateSpinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}\n.fb_iframe_widget{display:inline-block;position:relative}.fb_iframe_widget span{display:inline-block;position:relative;text-align:justify}.fb_iframe_widget iframe{position:absolute}.fb_iframe_widget_fluid_desktop,.fb_iframe_widget_fluid_desktop span,.fb_iframe_widget_fluid_desktop iframe{max-width:100%}.fb_iframe_widget_fluid_desktop iframe{min-width:220px;position:relative}.fb_iframe_widget_lift{z-index:1}.fb_hide_iframes iframe{position:relative;left:-10000px}.fb_iframe_widget_loader{position:relative;display:inline-block}.fb_iframe_widget_fluid{display:inline}.fb_iframe_widget_fluid span{width:100%}.fb_iframe_widget_loader iframe{min-height:32px;z-index:2;zoom:1}.fb_iframe_widget_loader .FB_Loader{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat;height:32px;width:32px;margin-left:-16px;position:absolute;left:50%;z-index:4}</style></head><body id=\"marketsBody\" class=\"visible-submenu\"><div id=\"GoogleAnalytics\" class=\"trackingTags\">\n\t\n\n<!-- NEW UNIVERSAL Google Analytics --> \n<script> \n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function()\n{ (i[r].q=i[r].q||[]).push(arguments)}\n,i[r].l=1*new Date();a=s.createElement(o), \nm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) \n})(window,document,'script','//www.google-analytics.com/analytics.js','ga');\nga('create', 'UA-940691-6', 'auto',\n{ 'allowLinker': true }\n); \nga('require', 'displayfeatures'); \nga('send', 'pageview');\nvar clientUrl = \"https://clients.etxcapital.com\";\n// https://developers.google.com/analytics/devguides/collection/analyticsjs/cross-domain#autolink \nga('require', 'linker'); \nga('linker:autoLink', ['clients.etxcapital.com']); \n</script>\n\t\n</div>\n<script></script><meta name=\"Generator\" content=\"Sitefinity 9.2.6200.0 OME\"><link rel=\"canonical\" href=\"https://www.etxcapital.co.uk/\"><link href=\"/Telerik.Web.UI.WebResource.axd?d=tyfkKaB_R1h0csRSH1kt9-3uSxAEJJ74q9CfIRSexOJZ8PR6b1rbYN0YUu3unp2AgC099PBE-CXfgon-56acpKY4HQ7OaiLb5UjhKcFi6uConz0leCvu9nvoz1UyV7uddm8a_hwFhuAVxRDuCsMI6g2&amp;t=635823488460000000&amp;compress=0&amp;_TSM_CombinedScripts_=%3b%3bTelerik.Sitefinity.Resources%2c+Version%3d9.2.6200.0%2c+Culture%3dneutral%2c+PublicKeyToken%3db28c218413bdf563%3aen-GB%3a9540f265-c918-463e-95d1-134a48200f7f%3a7a90d6a%3a83fa35c7\" type=\"text/css\" rel=\"stylesheet\"><link href=\"/Sitefinity/WebsiteTemplates/ETXTemplate/App_Themes/ETXCapitalTheme/global/main.css?v=636198339206511865\" type=\"text/css\" rel=\"stylesheet\"><link href=\"/Sitefinity/WebsiteTemplates/ETXTemplate/App_Themes/ETXCapitalTheme/global/team.css?v=635776553820000000\" type=\"text/css\" rel=\"stylesheet\"><style type=\"text/css\" media=\"all\">/* Header CSS */\n\n.iframe-wrapper-resizing {\n    box-sizing: content-box;\n    position: absolute;\n    width: 100%;\n    z-index: 3;\n}\n\n.iframe-wrapper-resizing iframe {\n    left: 0;\n    top: 0;\n}\n\n/* Other CSS */\n\n.mobile-sec .mobile-title::after {\n    margin-top: 10px;\n    margin-right: -25px;\n}\n\n.mobile-sec .mobile-title {\n    font-size: 19px !important;\n    font-weight: bold;\n    margin-bottom: 10px !important;\n    padding-top: 28px;\n}\n\n.mobile-spreads.open {\n    background: #fff none repeat scroll 0 0;\n}\n\n.btn.lgstarttrading {\n    float: left;\n    font-size: 18px;\n    padding: 14px 24px;\n}\n\n.btn.lgregister {\n    float: left;\n    font-size: 18px; \n    padding: 15px 20px;\n}\n\n.btn.lgfindoutmore {\n    float: right;\n    font-size: 18px;\n    padding: 15px 20px;\n}\n\n.btn.lgvieweducationtools {\n    float: right;\n    font-size: 20px;\n    padding: 15px 20px;\n}\n\n.btn.btn-stdempty {\n    background: none;\n    font-size: 16px;\n    font-weight: 300;\n    padding: 12px 20px;\n    position: relative;\n    border: 2px solid #baa96f;\n}\n\n.btn.btn-stdemptyeducation {\n    background: none;\n    font-size: 16px;\n    font-weight: 300;\n    padding: 14px 20px;\n    position: relative;\n    border: 2px solid #baa96f;\n}\n\n.main-banner-logo {\n    height: 94px;\n    width: 215px;\n}\n\n.btn.lg {\n    font-size: 20px;\n    padding: 12px 50px;\n}\n\n.mobile-sec .mobile-title {\n    border-bottom: 0 solid #e4e4e4;\n  }\n\n\nhtml, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {\n    font-size: 100%;\n}\n\np {\n    line-height: 26px; }\n\n.content-list-gold-bullets li {\n    line-height: 26px;\n    font-size:84%; }\n\n\n/* Ad hoc promotion CSS */\n\ndiv.clickable { /* Containing div must have a position value */\n    position:relative;\n}\ndiv.clickable a {\n    position:absolute;\n    width:100%;\n    height:100%;\n    top:0;\n    left:0;\n    text-decoration:none; /* Makes sure the link   doesn't get underlined */\n    z-index:10; /* raises anchor tag above everything else in div */\n    /* background-color:white; workaround to make clickable in IE */\n    /* opacity: 0; workaround to make clickable in IE */\n    filter: alpha(opacity=1); /*workaround to make clickable in IE */\n}\n\n.bonus_offers {\nbackground-image:url(\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Homepage/ad_hoc_promotions/bonus_offers.jpg\");\ncolor: #FFFFFF;\nheight: 106px;\nbackground-repeat: no-repeat; \nfont-size: 16px;\n}\n.discover_etx {\nbackground-image:url(\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Homepage/ad_hoc_promotions/discover_etx.jpg\");\ncolor: #FFFFFF;\nheight: 106px;\nbackground-repeat: no-repeat;\nfont-size: 16px;\n}\n.education {\nbackground-image:url(\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Homepage/ad_hoc_promotions/education.jpg\");\ncolor: #FFFFFF;\nheight: 106px;\nbackground-repeat: no-repeat;\nfont-size: 16px;\n}\n.brexit {\nbackground-image:url(\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Homepage/ad_hoc_promotions/demo_desktop.jpg\");\ncolor: #FFFFFF;\nheight: 106px;\nbackground-repeat: no-repeat;\nfont-size: 16px;\n}\n\n.grid .col-4newdesktop {\n    width: 31.6%;\n    margin: 8px 8px 28px 8px;\n    padding: 0 25px 0 20px;\n}\n.grid .col-4newtablet {\n    width: 31.7%;\n    margin: 5px 5px 25px 5px;\n    padding: 0 15px 0 15px;\n}\n.grid .col-4newmobile {\n    margin: 8px;\n    padding: 0px 25px 0 20px;\n    width: 284px;\n}\n.s-secnew {\n    padding-bottom: 0px;\n    background: #f2f2f2 none repeat scroll 0 0;\n}\n\n\n/* Magnific Popup CSS */\n.mfp-bg {\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 1042;\n  overflow: hidden;\n  position: fixed;\n  background: #0b0b0b;\n  opacity: 0.8; }\n\n.mfp-wrap {\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 1043;\n  position: fixed;\n  outline: none !important;\n  -webkit-backface-visibility: hidden; }\n\n.mfp-container {\n  text-align: center;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  left: 0;\n  top: 0;\n  padding: 0 8px;\n  box-sizing: border-box; }\n\n.mfp-container:before {\n  content: '';\n  display: inline-block;\n  height: 100%;\n  vertical-align: middle; }\n\n.mfp-align-top .mfp-container:before {\n  display: none; }\n\n.mfp-content {\n  position: relative;\n  display: inline-block;\n  vertical-align: middle;\n  margin: 0 auto;\n  text-align: left;\n  z-index: 1045; }\n\n.mfp-inline-holder .mfp-content,\n.mfp-ajax-holder .mfp-content {\n  width: 100%;\n  cursor: auto; }\n\n.mfp-ajax-cur {\n  cursor: progress; }\n\n.mfp-zoom-out-cur, .mfp-zoom-out-cur .mfp-image-holder .mfp-close {\n  cursor: -moz-zoom-out;\n  cursor: -webkit-zoom-out;\n  cursor: zoom-out; }\n\n.mfp-zoom {\n  cursor: pointer;\n  cursor: -webkit-zoom-in;\n  cursor: -moz-zoom-in;\n  cursor: zoom-in; }\n\n.mfp-auto-cursor .mfp-content {\n  cursor: auto; }\n\n.mfp-close,\n.mfp-arrow,\n.mfp-preloader,\n.mfp-counter {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none; }\n\n.mfp-loading.mfp-figure {\n  display: none; }\n\n.mfp-hide {\n  display: none !important; }\n\n.mfp-preloader {\n  color: #CCC;\n  position: absolute;\n  top: 50%;\n  width: auto;\n  text-align: center;\n  margin-top: -0.8em;\n  left: 8px;\n  right: 8px;\n  z-index: 1044; }\n  .mfp-preloader a {\n    color: #CCC; }\n    .mfp-preloader a:hover {\n      color: #FFF; }\n\n.mfp-s-ready .mfp-preloader {\n  display: none; }\n\n.mfp-s-error .mfp-content {\n  display: none; }\n\nbutton.mfp-close,\nbutton.mfp-arrow {\n  overflow: visible;\n  cursor: pointer;\n  background: transparent;\n  border: 0;\n  -webkit-appearance: none;\n  display: block;\n  outline: none;\n  padding: 0;\n  z-index: 1046;\n  box-shadow: none;\n  touch-action: manipulation; }\n\nbutton::-moz-focus-inner {\n  padding: 0;\n  border: 0; }\n\n.mfp-close {\n  width: 44px;\n  height: 44px;\n  line-height: 44px;\n  position: absolute;\n  right: 0;\n  top: 0;\n  text-decoration: none;\n  text-align: center;\n  opacity: 0.65;\n  padding: 0 0 18px 10px;\n  color: #FFF;\n  font-style: normal;\n  font-size: 28px;\n  font-family: Arial, Baskerville, monospace; }\n  .mfp-close:hover,\n  .mfp-close:focus {\n    opacity: 1; }\n  .mfp-close:active {\n    top: 1px; }\n\n.mfp-close-btn-in .mfp-close {\n  color: #333; }\n\n.mfp-image-holder .mfp-close,\n.mfp-iframe-holder .mfp-close {\n  color: #FFF;\n  right: -6px;\n  text-align: right;\n  padding-right: 6px;\n  width: 100%; }\n\n.mfp-counter {\n  position: absolute;\n  top: 0;\n  right: 0;\n  color: #CCC;\n  font-size: 12px;\n  line-height: 18px;\n  white-space: nowrap; }\n\n.mfp-arrow {\n  position: absolute;\n  opacity: 0.65;\n  margin: 0;\n  top: 50%;\n  margin-top: -55px;\n  padding: 0;\n  width: 90px;\n  height: 110px;\n  -webkit-tap-highlight-color: transparent; }\n  .mfp-arrow:active {\n    margin-top: -54px; }\n  .mfp-arrow:hover,\n  .mfp-arrow:focus {\n    opacity: 1; }\n  .mfp-arrow:before,\n  .mfp-arrow:after {\n    content: '';\n    display: block;\n    width: 0;\n    height: 0;\n    position: absolute;\n    left: 0;\n    top: 0;\n    margin-top: 35px;\n    margin-left: 35px;\n    border: medium inset transparent; }\n  .mfp-arrow:after {\n    border-top-width: 13px;\n    border-bottom-width: 13px;\n    top: 8px; }\n  .mfp-arrow:before {\n    border-top-width: 21px;\n    border-bottom-width: 21px;\n    opacity: 0.7; }\n\n.mfp-arrow-left {\n  left: 0; }\n  .mfp-arrow-left:after {\n    border-right: 17px solid #FFF;\n    margin-left: 31px; }\n  .mfp-arrow-left:before {\n    margin-left: 25px;\n    border-right: 27px solid #3F3F3F; }\n\n.mfp-arrow-right {\n  right: 0; }\n  .mfp-arrow-right:after {\n    border-left: 17px solid #FFF;\n    margin-left: 39px; }\n  .mfp-arrow-right:before {\n    border-left: 27px solid #3F3F3F; }\n\n.mfp-iframe-holder {\n  padding-top: 40px;\n  padding-bottom: 40px; }\n  .mfp-iframe-holder .mfp-content {\n    line-height: 0;\n    width: 100%;\n    max-width: 900px; }\n  .mfp-iframe-holder .mfp-close {\n    top: -40px; }\n\n.mfp-iframe-scaler {\n  width: 100%;\n  height: 0;\n  overflow: hidden;\n  padding-top: 56.25%; }\n  .mfp-iframe-scaler iframe {\n    position: absolute;\n    display: block;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    box-shadow: 0 0 8px rgba(0, 0, 0, 0.6);\n    background: #000; }\n\n/* Main image in popup */\nimg.mfp-img {\n  width: auto;\n  max-width: 100%;\n  height: auto;\n  display: block;\n  line-height: 0;\n  box-sizing: border-box;\n  padding: 40px 0 40px;\n  margin: 0 auto; }\n\n/* The shadow behind the image */\n.mfp-figure {\n  line-height: 0; }\n  .mfp-figure:after {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 40px;\n    bottom: 40px;\n    display: block;\n    right: 0;\n    width: auto;\n    height: auto;\n    z-index: -1;\n    box-shadow: 0 0 8px rgba(0, 0, 0, 0.6);\n    background: #444; }\n  .mfp-figure small {\n    color: #BDBDBD;\n    display: block;\n    font-size: 12px;\n    line-height: 14px; }\n  .mfp-figure figure {\n    margin: 0; }\n\n.mfp-bottom-bar {\n  margin-top: -36px;\n  position: absolute;\n  top: 100%;\n  left: 0;\n  width: 100%;\n  cursor: auto; }\n\n.mfp-title {\n  text-align: left;\n  line-height: 18px;\n  color: #F3F3F3;\n  word-wrap: break-word;\n  padding-right: 36px; }\n\n.mfp-image-holder .mfp-content {\n  max-width: 100%; }\n\n.mfp-gallery .mfp-image-holder .mfp-figure {\n  cursor: pointer; }\n\n@media screen and (max-width: 800px) and (orientation: landscape), screen and (max-height: 300px) {\n  /**\n       * Remove all paddings around the image on small screen\n       */\n  .mfp-img-mobile .mfp-image-holder {\n    padding-left: 0;\n    padding-right: 0; }\n  .mfp-img-mobile img.mfp-img {\n    padding: 0; }\n  .mfp-img-mobile .mfp-figure:after {\n    top: 0;\n    bottom: 0; }\n  .mfp-img-mobile .mfp-figure small {\n    display: inline;\n    margin-left: 5px; }\n  .mfp-img-mobile .mfp-bottom-bar {\n    background: rgba(0, 0, 0, 0.6);\n    bottom: 0;\n    margin: 0;\n    top: auto;\n    padding: 3px 5px;\n    position: fixed;\n    box-sizing: border-box; }\n    .mfp-img-mobile .mfp-bottom-bar:empty {\n      padding: 0; }\n  .mfp-img-mobile .mfp-counter {\n    right: 5px;\n    top: 3px; }\n  .mfp-img-mobile .mfp-close {\n    top: 0;\n    right: 0;\n    width: 35px;\n    height: 35px;\n    line-height: 35px;\n    background: rgba(0, 0, 0, 0.6);\n    position: fixed;\n    text-align: center;\n    padding: 0; } }\n\n@media all and (max-width: 900px) {\n  .mfp-arrow {\n    -webkit-transform: scale(0.75);\n    transform: scale(0.75); }\n  .mfp-arrow-left {\n    -webkit-transform-origin: 0;\n    transform-origin: 0; }\n  .mfp-arrow-right {\n    -webkit-transform-origin: 100%;\n    transform-origin: 100%; }\n  .mfp-container {\n    padding-left: 6px;\n    padding-right: 6px; } }\n\n\n/* Platforms CSS */\n\n@CHARSET \"UTF-8\";\n\n@media screen and (max-width: 767px) {\n\n.s-platforms {\n    background-image: url(\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/Global_Markets/pattern_715x715.jpg\");\n    padding: 0;\n}\n  \n.s-platforms ul {\n    margin-bottom: 26px;\n    margin-left: 0;\n    overflow: hidden;\n}\n\n.s-platforms ul li {\n    border: 0 solid #dcd4bb;\n    float: left;\n    font-weight: bolder;\n    height: 46px;\n    padding: 12px 8px 34px;\n    position: relative;\n    text-align: center;\n    text-transform: uppercase;\n    width: 96px;\n}\n\n.s-platforms ul li a::after {\n    background: rgba(255, 255, 255, 0.05) none repeat scroll 0 0;\n    bottom: 1px;\n    content: \"\";\n    display: block;\n    height: 60px;\n    left: 0;\n    position: absolute;\n    width: 94px;\n}\n\n.s-platforms ul li.current a::after {\n    background-color: #fff;  \n    background-image: none;\n}\n\n}\n\n@media screen and (min-width:768px) and (max-width: 1079px) {\n\n.s-platforms {\n    padding: 0;\n    background-image:url(\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/Global_Markets/pattern_715x715.jpg\");\n}\n  \n.s-platforms ul {\n    margin-bottom: 26px;\n    margin-left: 310px;\n    overflow: hidden;\n}\n\n.s-platforms ul li {\n    border: 0 solid #dcd4bb;\n    float: left;\n    font-weight: bolder;\n    height: 46px;\n    padding: 12px 12px 32px 12px;\n    position: relative;\n    text-align: center;\n    text-transform: uppercase;\n    width: 129px;\n}\n\n.s-platforms ul li a::after {\n    background: rgba(255, 255, 255, 0.05) none repeat scroll 0 0;\n    bottom: 1px;\n    content: \"\";\n    display: block;\n    height: 60px;\n    left: 0;\n    position: absolute;\n    width: 127px;\n}\n\n.s-platforms ul li.current a::after {\n    background-color: #fff;  \n    background-image: none;\n}\n\n}\n\n@media screen and (min-width: 1080px) {\n\n.s-platforms {\n    padding: 16px 0 50px;\n    background-image:url(\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/Global_Markets/pattern_715x715.jpg\");\n}\n\n.s-platforms ul {\n    margin-bottom: 26px;\n    margin-left: 410px;\n    overflow: hidden;\n}\n\n.s-platforms ul li {\n    border: 0 solid #dcd4bb;\n    float: left;\n    font-weight: bolder;\n    height: 46px;\n    padding: 12px;\n    position: relative;\n    text-align: center;\n    text-transform: uppercase;\n    width: 179px;\n}\n\n.s-platforms ul li a::after {\n    background: rgba(255, 255, 255, 0.05) none repeat scroll 0 0;\n    bottom: 1px;\n    content: \"\";\n    display: block;\n    height: 60px;\n    left: 0;\n    position: absolute;\n    width: 177px;\n}\n\n.s-platforms ul li.current a::after {\n    background-color: #fff;  \n    background-image: none;\n}\n\n}\n\n\n/* Choose / Switch ETX CSS */\n\n.switchtoetxbg {\n  background-color:#f4f4f4;\n}\n\n@CHARSET \"UTF-8\";\n\n@media (min-width: 100px) and (max-width: 768px) {\n#left_nav {\n    width:250px;\n}\n#body {\n    float: left;\n    margin: 10px 0 10px -10px;\n    width: 107%;\n}\n.accordion {\n/*    background: #ffffff none repeat scroll 0 0;\n    border-left: 1px solid rgba(103, 104, 102, 0.5);\n    border-bottom: 1px solid rgba(103, 104, 102, 0.5);\n    border-right: 1px solid rgba(103, 104, 102, 0.5);\n    border-top: 1px solid rgba(103, 104, 102, 0.5); */\n    color: #111;\n    font-size: 22px;\n    font-weight: bold;\n    height: 60px;\n    padding: 20px 10px 10px;\n    text-transform: uppercase;\n\tmargin-top: -1px;\n}\n.accordion-open {\n    -moz-border-bottom-colors: none;\n    -moz-border-left-colors: none;\n    -moz-border-right-colors: none;\n    -moz-border-top-colors: none;\n    background: #ffffff none repeat scroll 0 0;\n    border-color: rgba(103, 104, 102, 0.5);\n    border-image: none;\n    border-style: solid;\n    border-width: 1px 1px 0;\n    color: #111;\n    font-size: 22px;\n    font-weight: bold;\n    height: 60px;\n    padding-left: 10px;\n    padding-top: 20px;\n    text-transform: uppercase;\n}\n\n.accordion-open span {\n    background:url(\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/brexit/brexit-icons/navicon-x.png?sfvrsn=2\") no-repeat scroll center center / 70% auto;\n    display:block;\n    float:right;\n    padding: 10px;\n}\n.accordion-close span {\n    background: rgba(0, 0, 0, 0) url(\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/brexit/brexit-icons/navicon-cross.png?sfvrsn=2\") no-repeat scroll center center / 70% auto;\n    display: block;\n    float: right;\n    padding: 10px;\n}\ndiv.container2 {\n    padding:0;\n    margin:0;\n}\ndiv.content {\n    background: #ffffff none repeat scroll 0 0;\n/*    border: 1px solid rgba(103, 104, 102, 0.5); */\n    color: #686767;\n    font-size: 13px;\n    font-weight: normal;\n    line-height: 21px;\n    margin: 0;\n    padding-left: 10px;\n    padding-bottom: 30px;\n}\ndiv.content ul, div.content p {\n    margin: 0;\n    padding: 3px 13px 3px 0;\n}\ndiv.content ul li {\n    list-style-position:inside;\n    line-height:25px;\n}\ndiv.content ul li a {\n    color:#555555;\n}\ncode {\n    overflow:auto;\n}\n}\n\n/* Pricing table CSS */\n\n        ul.tabs{\n\t\t\tmargin: 0px;\n\t\t\tpadding: 0px;\n\t\t\tlist-style: none;\n        }\n\tul.tabs li{\n\t\t\tbackground: #EDEDED;\n\t\t\tcolor: #464646;\n\t\t\tdisplay: inline-block;\n\t\t\tpadding: 10px;\n\t\t\tcursor: pointer;\n  \t\t\tfont-size:101%;\n  \t\t\tfont-weight:bold;  \t\t\t\n\t}\n\n\tul.tabs li.current{\n\t\tbackground: #393939;\n\t\tcolor: #ffffff;\n  \t\tmargin-left:1px;\n\t}\n\n\t\t.tab-content{\n\t\t\tdisplay: none;\n\t\t\tbackground: #ffffff;\n\t\t\t/* padding: 15px; */\n            color:#363636;\n\t\t}\n\n\t\t.tab-content.current{\n\t\t\tdisplay: inherit;\n\t\t}\n\n        #market-name {\n            font-size: 24px;         \n        }\n        #bid-price, #ask-price {\n            font-size: 16px;    \n        }\n\n        table.fixed th{\n\t\t\tbackground: #393939;\n\t\t\tcolor: #ffffff;\n\t\t\tfont-size:1.1em;\n\t\t\ttext-align:center;\n\t\t\tpadding:7px 10px;\n\t\t\tborder:none;\n\t\t}\n        \n        table.fixed td{\n            font-size:110%;\n            font-weight:bold;\n            border-bottom:1px #D5D5D5 solid;\n            text-align:center;\n            margin-top:20px;\n            margin-bottom:20px;\n\t\t\tpadding:0px 8px;\n  \n        }\n        \n        table.fixed{\n            background-color:transparent;\n            border-spacing:0px;\n            width:447px;\n\t\t\tborder-left:1px #D5D5D5 solid;\n\t\t\tborder-right:1px #D5D5D5 solid;  \t    \n            table-layout:fixed;\n            font-size:76%;\n        }\n\n        .center{\n            margin-left:auto;\n            margin-right:auto;\n        }\n\n        .pricingtablecontainer{\n            padding:0px;\n\t\t\tfont-size:87%;\n        }\n\n        .price-up{\n\t\t\tcolor:#FFFFFF;\n            background: #5487C8;\n\t\t\tbackground-clip:padding-box;\n            -webkit-box-shadow: 0px 0px 0px 20px rgba(84,135,200,1);\n            -moz-box-shadow: 0px 0px 0px 20px rgba(84,135,200,1);\n            box-shadow: 0px 0px 0px 20px rgba(84,135,200,1);\n\t\t\tmargin-bottom: -7px;\n            padding-top: 12px;\n        }\n\n        .price-down{\n\t\t\tcolor:#FFFFFF;\n            background: #BE303B;\n\t\t\tbackground-clip:padding-box;\n\t\t\t-webkit-box-shadow: 0px 0px 0px 20px rgba(190,48,59,1);\n\t\t\t-moz-box-shadow: 0px 0px 0px 20px rgba(190,48,59,1);\n\t\t\tbox-shadow: 0px 0px 0px 20px rgba(190,48,59,1);\n\t\t    margin-bottom: -7px;\n            padding-top: 12px\n        }\n\n        .price-unchanged{\n            background-color: #FBFBFB;\n\t\t\tmargin-bottom: -7px;\n            padding-top: 12px;\n        }\n\n        .changeprice-up{\n            color: #5487C8;\n\t\t\tmargin-bottom: -7px;\n            padding-top: 12px;\n        }\n\n        .changeprice-down{\n            color: #BE303B;\n\t\t\tmargin-bottom: -7px;\n            padding-top: 7px;\n        }\n\n        .changeprice-unchanged{\n            color: #393939;\n\t\t\tmargin-bottom: -7px;\n            padding-top: 12px;\n        }\n\n        table.fixed td {\n            overflow:hidden;\n        }\n        @media (min-width: 768px) and (max-width: 1079px) {\n            ul.tabs li {\n                font-size:80%;\n                padding: 4px 8px;\n            }\n  \n            table.fixed th{\n                font-size: 110%;\n    \t\tpadding: 7px 8px;\n            }\n\n            table.fixed td{\n                font-size:110%;\n                padding:0 8px;\n            }  \n            table.fixed{\n                width:358px;\n            }        \n  \n  \t    table.fixed th:nth-child(1)\n  \t    {\n    \t\twidth:35%;\n  \t    }\n\n            table.fixed th:nth-child(2)\n            {\n                display:none;\n            }\n\n            table.fixed td:nth-child(2)\n            {\n                display:none;\n            }\n        }\n\n        @media (max-width: 767px) {\n            ul.tabs li {\n                font-size:62%;\n                padding: 1px 5px;\n            }\n  \n            table.fixed th{\n                font-size: 90%;\n    \t\tpadding: 3px 5px;\n            }\n\n            table.fixed td{\n                font-size: 100%;\n       \t\tpadding: 0 5px;\n            }\n            table.fixed{\n\t\twidth:270px;\n    \t\t\n            }\n  \n    \t    table.fixed th:nth-child(1)\n  \t    {\n    \t\twidth:35%;\n  \t    }\n\n            table.fixed th:nth-child(2)\n            {\n                display:none;\n            }\n\n            table.fixed td:nth-child(2)\n            {\n                display:none;\n            }\n        }</style><style type=\"text/css\" media=\"all\">/* Fix issue with grid on mobile */\n\n.grid {\n    margin-left: 0;\n    margin-right: 0;\n    width: auto;\n}\n\n/* Header CSS */\n\n/* .signupheader {\nbackground-image:url(\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Homepage/2016_q3/hpbackground_2000x860.jpg\");\nbackground-position: center top;\nbackground-blend-mode: overlay;\nbackground-color: rgba(0, 0, 0, 0.5);\nborder-top:1px #baa96f solid;\nborder-bottom:1px #baa96f solid;\nbackground-repeat: no-repeat;\n} */\n\n.signupheader {\nbackground-image:url(\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Homepage/2017_q2/hpbackground_2000x860_darker.jpg\");\nbackground-position: center top;\nbackground-color: rgba(0, 0, 0, 0.5);\nborder-top:1px #baa96f solid;\nborder-bottom:1px #baa96f solid;\nbackground-repeat: no-repeat;\n} \n\na.linkgold {\n  color:#baa96f;\n}\n\na:hover.linkgold {\n  color:#ffffff;\n}\n\n.underlinelinks a:hover{    \n  text-decoration: underline;\n}\n\n@media (min-width: 768px) and (max-width:1079px) {\n.navbar .logo {\n    width:auto;\n  }\n  \n  .navbar .logo img {\n    margin-left: 5px;\n    width:auto;\n  }\n}\n\n@media (min-width: 1080px) {\n .navbar .logo {\n    top:8px;\n    width:auto;\n  }\n  \n .navbar .logo img {\n    margin-left: 0px;\n    width:auto;\n  }\n}\n\n/* @media (min-width: 768px) {\n.s-head {\n    padding-top: 50px;\n    padding-bottom: 0px;\n    margin-bottom: -1px;\n    position: relative;\n    background: #000;\n    }\n} */\n\n@media screen and (max-width: 779px) {\n\n.s-head h3 {\n    font-family: \"Open Sans\",Arial,Helvetica,sans-serif;\n    font-size: 30px;\n    line-height: normal;\n    margin-bottom: 20px;\n    padding: 5px 0 0;\n    color: #FFF;\n    font-weight: bold;\n    text-transform:uppercase;\n}\n}\n\n\n@media screen and (max-width: 767px) {\n.s-head {\n    padding-top: 0;\n    padding-bottom: 0px;\n    margin-bottom: -1px;\n    margin-top: 0;\n    position: relative;\n    background: #000;\n    }\n}\n\n@media screen and (min-width:768px) and (max-width: 779px) {\n.s-head {\n    padding-top: 0;\n    padding-bottom: 0px;\n    margin-bottom: -1px;\n    margin-top: 0;\n    position: relative;\n    background: #000;\n    }\n}\n\n@media screen and (min-width: 781px) {\n.s-head {\n    padding-top: 50px;\n    padding-bottom: 0px;\n    margin-bottom: -1px;\n    margin-top: 0;\n    position: relative;\n    background: #000;\n    }\n\n\t.s-head h3 {\n    font-family: \"Open Sans\",Arial,Helvetica,sans-serif;\n    font-size: 40px;\n    line-height: normal;\n    margin-bottom: 20px;\n    padding: 5px 0 0;\n    color: #FFF;\n    font-weight: bold;\n\t}\n}\n</style><link href=\"/Content/Styles/webslidemenu-color-theme.css\" type=\"text/css\" rel=\"stylesheet\" media=\"all\"><link href=\"/Content/Styles/webslidemenu.css\" type=\"text/css\" rel=\"stylesheet\" media=\"all\"><meta name=\"description\" content=\"ETX Capital provides Forex, Spread betting and CFD trading options for all types of investors - from tools and education to trading.\"><meta name=\"keywords\" content=\"trading, financial, binary, conduct, regulated, etx, capital, the financial conduct authority, forex, cfd, indices, equities, commodities, regulated\">\n\n\n    <!-- Load Facebook SDK for JavaScript -->\n\t<div id=\"fb-root\" class=\" fb_reset\"><div style=\"position: absolute; top: -10000px; height: 0px; width: 0px;\"><div><iframe name=\"fb_xdm_frame_https\" frameborder=\"0\" allowtransparency=\"true\" allowfullscreen=\"true\" scrolling=\"no\" id=\"fb_xdm_frame_https\" aria-hidden=\"true\" title=\"Facebook Cross Domain Communication Frame\" tabindex=\"-1\" src=\"https://staticxx.facebook.com/connect/xd_arbiter/r/96nq-xsaNcg.js?version=42#channel=f352bdc67257f4&amp;origin=https%3A%2F%2Fwww.etxcapital.co.uk\" style=\"border: none;\"></iframe></div></div><div style=\"position: absolute; top: -10000px; height: 0px; width: 0px;\"><div></div></div></div>\n\t<script>(function (d, s, id) {\n        var js, fjs = d.getElementsByTagName(s)[0];\n        if (d.getElementById(id)) return;\n        js = d.createElement(s); js.id = id;\n        js.src = \"//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.8&appId=306422586388300\";\n        fjs.parentNode.insertBefore(js, fjs);\n    }(document, 'script', 'facebook-jssdk'));</script>\n    <form method=\"post\" action=\"./\" id=\"form1\">\n<div class=\"aspNetHidden\">\n<input type=\"hidden\" name=\"RadScriptManager_TSM\" id=\"RadScriptManager_TSM\" value=\";;System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35:en-US:d469afcf-7bb2-42b0-a0c2-3f036d3832f2:ea597d4b:b25378d2;Telerik.Sitefinity.Resources:en-US:9540f265-c918-463e-95d1-134a48200f7f:f99e4775;SitefinityWebApp:en-US:09481f73-f512-44cc-94cf-b3920afedf3a:b85b08bc:a146e6bf:a1e10680\">\n<input type=\"hidden\" name=\"ctl08_TSSM\" id=\"ctl08_TSSM\" value=\";Telerik.Sitefinity.Resources, Version=9.2.6200.0, Culture=neutral, PublicKeyToken=b28c218413bdf563:en-GB:9540f265-c918-463e-95d1-134a48200f7f:7a90d6a:83fa35c7\">\n<input type=\"hidden\" name=\"__EVENTTARGET\" id=\"__EVENTTARGET\" value=\"\">\n<input type=\"hidden\" name=\"__EVENTARGUMENT\" id=\"__EVENTARGUMENT\" value=\"\">\n<input type=\"hidden\" name=\"__VIEWSTATE\" id=\"__VIEWSTATE\" value=\"/wEPDwUKLTMwMjM0MzgzNWRkkQhVzTKN8GqzIGOpKPK2HA5Q3zWPWC97DNoo5mP6bdo=\">\n</div>\n\n<script type=\"text/javascript\">\n//<![CDATA[\nvar theForm = document.forms['form1'];\nif (!theForm) {\n    theForm = document.form1;\n}\nfunction __doPostBack(eventTarget, eventArgument) {\n    if (!theForm.onsubmit || (theForm.onsubmit() != false)) {\n        theForm.__EVENTTARGET.value = eventTarget;\n        theForm.__EVENTARGUMENT.value = eventArgument;\n        theForm.submit();\n    }\n}\n//]]>\n</script>\n\n\n<script src=\"/WebResource.axd?d=j9ynu4sDyL7zZUGXN5L6eWH0HeQf6lOjX36E9dMlGgOFkZjxEzAhGh7nudoRJx7KJqtNEE_9wdWrzCsrekb1AWF5udVBO_dNx22g-nWvVZ81&amp;t=635823488460000000\" type=\"text/javascript\"></script>\n\n\n<script type=\"text/javascript\">\n//<![CDATA[\nvar __cultureInfo = {\"name\":\"en-GB\",\"numberFormat\":{\"CurrencyDecimalDigits\":2,\"CurrencyDecimalSeparator\":\".\",\"IsReadOnly\":true,\"CurrencyGroupSizes\":[3],\"NumberGroupSizes\":[3],\"PercentGroupSizes\":[3],\"CurrencyGroupSeparator\":\",\",\"CurrencySymbol\":\"£\",\"NaNSymbol\":\"NaN\",\"CurrencyNegativePattern\":1,\"NumberNegativePattern\":1,\"PercentPositivePattern\":0,\"PercentNegativePattern\":0,\"NegativeInfinitySymbol\":\"-Infinity\",\"NegativeSign\":\"-\",\"NumberDecimalDigits\":2,\"NumberDecimalSeparator\":\".\",\"NumberGroupSeparator\":\",\",\"CurrencyPositivePattern\":0,\"PositiveInfinitySymbol\":\"Infinity\",\"PositiveSign\":\"+\",\"PercentDecimalDigits\":2,\"PercentDecimalSeparator\":\".\",\"PercentGroupSeparator\":\",\",\"PercentSymbol\":\"%\",\"PerMilleSymbol\":\"‰\",\"NativeDigits\":[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"],\"DigitSubstitution\":1},\"dateTimeFormat\":{\"AMDesignator\":\"AM\",\"Calendar\":{\"MinSupportedDateTime\":\"\\/Date(-62135596800000)\\/\",\"MaxSupportedDateTime\":\"\\/Date(253402300799999)\\/\",\"AlgorithmType\":1,\"CalendarType\":1,\"Eras\":[1],\"TwoDigitYearMax\":2029,\"IsReadOnly\":true},\"DateSeparator\":\"/\",\"FirstDayOfWeek\":1,\"CalendarWeekRule\":0,\"FullDateTimePattern\":\"dd MMMM yyyy HH:mm:ss\",\"LongDatePattern\":\"dd MMMM yyyy\",\"LongTimePattern\":\"HH:mm:ss\",\"MonthDayPattern\":\"dd MMMM\",\"PMDesignator\":\"PM\",\"RFC1123Pattern\":\"ddd, dd MMM yyyy HH\\u0027:\\u0027mm\\u0027:\\u0027ss \\u0027GMT\\u0027\",\"ShortDatePattern\":\"dd/MM/yyyy\",\"ShortTimePattern\":\"HH:mm\",\"SortableDateTimePattern\":\"yyyy\\u0027-\\u0027MM\\u0027-\\u0027dd\\u0027T\\u0027HH\\u0027:\\u0027mm\\u0027:\\u0027ss\",\"TimeSeparator\":\":\",\"UniversalSortableDateTimePattern\":\"yyyy\\u0027-\\u0027MM\\u0027-\\u0027dd HH\\u0027:\\u0027mm\\u0027:\\u0027ss\\u0027Z\\u0027\",\"YearMonthPattern\":\"MMMM yyyy\",\"AbbreviatedDayNames\":[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],\"ShortestDayNames\":[\"Su\",\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\",\"Sa\"],\"DayNames\":[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],\"AbbreviatedMonthNames\":[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\",\"\"],\"MonthNames\":[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\",\"\"],\"IsReadOnly\":true,\"NativeCalendarName\":\"Gregorian Calendar\",\"AbbreviatedMonthGenitiveNames\":[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\",\"\"],\"MonthGenitiveNames\":[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\",\"\"]},\"eras\":[1,\"A.D.\",null,0]};//]]>\n</script>\n\n<script src=\"/Telerik.Web.UI.WebResource.axd?_TSM_HiddenField_=RadScriptManager_TSM&amp;compress=0&amp;_TSM_CombinedScripts_=%3b%3bSystem.Web.Extensions%2c+Version%3d4.0.0.0%2c+Culture%3dneutral%2c+PublicKeyToken%3d31bf3856ad364e35%3aen-GB%3ad469afcf-7bb2-42b0-a0c2-3f036d3832f2%3aea597d4b%3ab25378d2%3bTelerik.Sitefinity.Resources%3aen-GB%3a9540f265-c918-463e-95d1-134a48200f7f%3af99e4775%3bSitefinityWebApp%3aen-GB%3a09481f73-f512-44cc-94cf-b3920afedf3a%3ab85b08bc%3aa146e6bf%3aa1e10680\" type=\"text/javascript\"></script>\n<script type=\"text/javascript\">\n//<![CDATA[\nif (typeof(Sys) === 'undefined') throw new Error('ASP.NET Ajax client-side framework failed to load.');\n//]]>\n</script>\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js\" type=\"text/javascript\"></script>\n<script src=\"/WebResource.axd?d=FBJrZxECsodC_hD0PC7lSHRvRCicLy7gXIwMuj2gNYg4X-RymWNYetWivO8uJAXfeB0Me8ihTXwujLU2yEJWvtAiEpPBPhkRXwelyO0POhNxIyOzEolmKOKRUc0LnWcGPcRx2Tc92zfqn44-w2yhug8UKD_gs11P90bLzB8DPY01&amp;t=636276984940000000\" type=\"text/javascript\"></script>\n<div class=\"aspNetHidden\">\n\n\t<input type=\"hidden\" name=\"__VIEWSTATEGENERATOR\" id=\"__VIEWSTATEGENERATOR\" value=\"1B0C52E1\">\n</div>\n        <script type=\"text/javascript\">\n//<![CDATA[\nSys.WebForms.PageRequestManager._initialize('ctl00$RadScriptManager', 'form1', [], ['ctl00$RadScriptManager','RadScriptManager'], [], 90, 'ctl00');\n//]]>\n</script>\n<input type=\"hidden\" name=\"ctl00$RadScriptManager\" id=\"RadScriptManager\">\n<script type=\"text/javascript\">\n//<![CDATA[\nSys.Application.setServerId(\"RadScriptManager\", \"ctl00$RadScriptManager\");\nSys.Application._enableHistoryInScriptManager();\n//]]>\n</script>\n\n\n        <div class=\"container\">\n            <nav class=\"navbar\">\n                \n<script type=\"text/javascript\">/// <reference path=\"../_references.js\" />\n\n/**\n * @ignore @license\n * \n * Client API JavaScript library (version 1.1.4)   \n * \n * Copyright:   \n * ETX Capital (c) 2015. All rights reserved.   \n * The copyright and intellectual property rights in this work vest in ETX Capital (The company).  The information \n * contained herein is the property of The Company and is supplied without any liability for error or omission. No \n * part may be reproduced, disclosed, or used without written permission.  The copyright and the restrictions on \n * reproduction and use are extended to all media in which the information may be embodied.   \n * \n *\n */\n\n/**\n * @class ETX \n *\n * `ETX` singleton contains high level configuration and functionality for the `ETX` modules.\n *\n * @static\n * @singleton\n * @readonly\n *\n */\nvar ETX = ETX || {};\n(function () {\n\n    'use strict';\n\n    /** \n     * Gets the (read only) section for global configurations.\n     * @property {Object} config\n     * @static\n     * @readonly\n     */\n    ETX.config = ETX.config || {};\n    /**\n     * Gets or sets whether debug mode is enabled. \n     * @property {Boolean} debug\n     * @member ETX.config\n     * @static\n     */\n    ETX.config.debug = false;\n    /**\n     * Gets or sets the default broker unique identifier to use if one is not provided. \n     * @property {Number} defaultBrokerID\n     * @member ETX.config\n     * @static\n     */\n    ETX.config.defaultBrokerID = '1';\n\n\n    if (ETX.hasOwnProperty('extend') === false) {\n        /**\n         * Extends a derived class with the functionality of a base class. \n         * \n         * @method extend\n         * @param {Function} subClass - Derived class constructor.\n         * @param {Function} baseClass - Base class constructor.\n         * @returns {void}\n         * \n         * @static\n         */\n        ETX.extend = function (subClass, baseClass) {\n            function inheritance() { }\n            inheritance.prototype = baseClass.prototype;\n            subClass.prototype = new inheritance();\n            subClass.prototype.constructor = subClass;\n            subClass.baseConstructor = baseClass;\n            subClass.superClass = baseClass.prototype;\n        };\n    }\n\n    if (ETX.hasOwnProperty('namespace') === false) {\n        /**\n         * Ensures the creation of a namespace. \n         * \n         * @method namespace\n         * @param {...String} namespaceSegment - One or more (segment) names used to build the namespace objects.\n         * @returns {void}\n         * \n         * @static\n         */\n        ETX.namespace = function () {\n            var a = arguments, o, i = 0, j, d, arg;\n            for (; i < a.length; i++) {\n                o = this; // Reset base object per argument or it will get reused from the last\n                arg = a[i];\n                if (arg.indexOf(\".\") > -1) { //Skip this if no \".\" is present\n                    d = arg.split(\".\");\n                    for (j = 0; j < d.length; j++) {\n                        o[d[j]] = o[d[j]] || {};\n                        o = o[d[j]];\n                    }\n                } else {\n                    o[arg] = o[arg] || {};\n                    o = o[arg]; // Reset base object to the new object so it's returned\n                }\n            }\n            return o;\n        };\n    }\n\n})();\n\n/// <reference path=\"../../_references.js\" />\n\nETX.namespace('logging');\n\n/**\n * @class ETX.logging.Logger\n *\n * @requires ETX\n *\n * Creates a new `ETX.logging.Logger`, which contains functionality to log messages (to the console by default) based on log levels.   \n *\n * ###Example:\n *      var logger = new ETX.logging.Logger({\n *          isEnabled: true,\n *          logLevel: ETX.logging.Logger.logLevels.INFO,\n *          prefixTimestamp: false,\n *          onLog: function fnToOverrideLogImpl(logLevel, message, source, optionalParams) { }\n *      });\n *      logger.fatal('A fatal msg', 'SRC_F');        // Prints 'FATAL | SRC_F | A fatal msg'\n *      logger.error('An error msg', 'SRC_E');       // Prints 'ERROR | SRC_E | An error msg'\n *      logger.warning('A warning msg', 'SRC_W');    // Prints 'WARNING | SRC_W | A warning msg'\n *      logger.info('An info msg', 'SRC_I');         // Prints 'INFO | SRC_I | An info msg'\n *      logger.debug('A debug msg', 'SRC_D');        // Does NOT print - DEBUG has lower priority over INFO...\n *      logger.versbose('A versbose msg', 'SRC_V');  // Does NOT print - VERBOSE has lower priority over INFO...\n */\n/**\n * @constructor\n * @param {Object} [options] - (Optional) Allows certain optional settings to be initialised upon instantiation.\n * @param {Boolean} [options.isEnabled=true] - (Optional) If true, message logging is enabled, otherwise it will disabled.\n * @param {String} [options.logLevel=ETX.logging.Logger.logLevels.INFO] - (Optional) Sets the current log level value defined in `ETX.logging.Logger.logLevels`.\n * @param {Boolean} [options.prefixTimestamp=false] - (Optional) If true, prefixes the current timestamp to all messages logged.\n * @param {Function} [options.onLog] - (Optional) Automatically registers a log override callback handler, used to re-define the logging implementaton.\n * @returns {ETX.logging.Logger}\n */\nETX.logging.Logger = function (options) {\n\n    'use strict';\n\n    //-CONSTRUCTOR-------------\n    //----PRIVATE--------------\n    var _logger = this,\n        _options = options || {},\n        _onLog = _options.onLog,\n        _onLogLevelText = _options.onLogLevelText,\n        _treatAsIE8 = false;\n    //----END-PRIVATE---------\n\n    //----PUBLIC--------------\n    _logger.debug = debug;\n    _logger.info = info;\n    /** \n     * Gets and set whether message logging is enabled.\n     * @property {Boolean} isEnabled\n     */\n    _logger.isEnabled = (_options.isEnabled === false ? false : true);\n    _logger.error = error;\n    _logger.fatal = fatal;\n    _logger.log = log;\n    /** \n     * Gets and set the current log level value defined in `ETX.logging.Logger.logLevels`.\n     * @property {Number} logLevel\n     */\n    _logger.logLevel = (_options.logLevel !== undefined ? _options.logLevel : (ETX.logging.Logger.logLevels.INFO || 0));\n    /** \n     * Gets and set whether to prefix the current timestamp to all messages logged.\n     * @property {Boolean} prefixTimestamp\n     */\n    _logger.prefixTimestamp = (_options.prefixTimestamp == true ? true : false);\n    _logger.verbose = verbose;\n    _logger.warning = warning;\n    //----END-PUBLIC----------\n\n\n    ////see http://patik.com/blog/complete-cross-browser-console-log/\n    //// Tell IE9 to use its built-in console\n    //if (Function.prototype.bind && (typeof console === 'object' || typeof console === 'function') && typeof console.log == 'object') {\n    //    try {\n    //        ['log', 'info', 'warn', 'error', 'assert', 'dir', 'clear', 'profile', 'profileEnd']\n    //            .forEach(function (method) {\n    //                console[method] = this.call(console[method], console);\n    //            }, Function.prototype.bind);\n    //    } catch (ex) {\n    //        _treatAsIE8 = true;\n    //    }\n    //}\n\n\n    return _logger;\n    //-END-CONSTRUCTOR--------\n\n\n    //-METHODS----------------\n    function consoleLog(message, optionalParams, logLevel) {\n        try {\n            if (console) {\n                switch (+logLevel) {\n                    case ETX.logging.Logger.logLevels.ERROR:\n                    case ETX.logging.Logger.logLevels.FATAL:\n                        if (console.error) {\n                            if (optionalParams === undefined) {\n                                console.error(message);\n                            } else {\n                                console.error(message, optionalParams);\n                            }\n                        }\n                        return;\n\n                    case ETX.logging.Logger.logLevels.WARNING:\n                        if (console.warn) {\n                            if (optionalParams === undefined) {\n                                console.warn(message);\n                            } else {\n                                console.warn(message, optionalParams);\n                            }\n                        }\n                        return;\n                }\n                if (console.log) {\n                    if (optionalParams === undefined) {\n                        console.log(message);\n                    } else {\n                        console.log(message, optionalParams);\n                    }\n                }\n            }\n        } catch (ignore) {\n            //try {\n            //    // Modern browsers\n            //    if (typeof console != 'undefined' && typeof console.log == 'function') {\n            //        // Opera 11\n            //        if (window.opera) {\n            //            var i = 0;\n            //            while (i < arguments.length) {\n            //                console.log('Item ' + (i + 1) + ': ' + arguments[i]);\n            //                i++;\n            //            }\n            //        }\n            //            // All other modern browsers\n            //        else if ((slice.call(arguments)).length == 1 && typeof slice.call(arguments)[0] == 'string') {\n            //            console.log((slice.call(arguments)).toString());\n            //        } else {\n            //            console.log.apply(console, slice.call(arguments));\n            //        }\n            //    }\n            //        // IE8\n            //    else if ((!Function.prototype.bind || _treatAsIE8) && typeof console != 'undefined' && typeof console.log == 'object') {\n            //        Function.prototype.call.call(console.log, console, slice.call(arguments));\n            //    }\n\n            //    // IE7 and lower, and other old browsers\n            //} catch (ignore) { }\n        }\n    }\n\n    /**\n     * Attempts to log the message details provided at a DEBUG priority log level, which may be not occur depending \n     * upon the current `logLevel`.\n     *\n     * @method debug\n     * @param {String} message - Message to log.\n     * @param {String} [source] - (Optional) Source of the message.\n     * @param {Object|Array} [optionalParams] - (Optional) Additional data to accompany the message (if supported).\n     * @returns {void}\n     */\n    function debug(message, source, optionalParams) {\n        log(ETX.logging.Logger.logLevels.DEBUG, message, source, optionalParams);\n    }\n\n    /**\n     * Attempts to log the message details provided at a ERROR priority log level, which may be not occur depending \n     * upon the current `logLevel`.\n     *\n     * @method error\n     * @param {String} message - Message to log.\n     * @param {String} [source] - (Optional) Source of the message.\n     * @param {Object|Array} [optionalParams] - (Optional) Optional additional data to accompany the message (if supported).\n     * @returns {void}\n     */\n    function error(message, source, optionalParams) {\n        log(ETX.logging.Logger.logLevels.ERROR, message, source, optionalParams);\n    }\n\n    /**\n     * Attempts to log the message details provided at a FATAL priority log level, which may be not occur depending \n     * upon the current `logLevel`.\n     *\n     * @method fatal\n     * @param {String} message - Message to log.\n     * @param {String} [source] - (Optional) Source of the message.\n     * @param {Object|Array} [optionalParams] - (Optional) Optional additional data to accompany the message (if supported).\n     * @returns {void}\n     */\n    function fatal(message, source, optionalParams) {\n        log(ETX.logging.Logger.logLevels.FATAL, message, source, optionalParams);\n    }\n\n    /**\n     * Attempts to log the message details provided at a INFO priority log level, which may be not occur depending \n     * upon the current `logLevel`.\n     *\n     * @method info\n     * @param {String} message - Message to log.\n     * @param {String} [source] - (Optional) Source of the message.\n     * @param {Object|Array} [optionalParams] - (Optional) Optional additional data to accompany the message (if supported).\n     * @returns {void}\n     */\n    function info(message, source, optionalParams) {\n        log(ETX.logging.Logger.logLevels.INFO, message, source, optionalParams);\n    }\n\n    /**\n     * Attempts to log the message details provided at a log level specified, which may be not occur depending \n     * upon the current `logLevel`.\n     *\n     * @method log\n     * @param {Number} logLevel - Log level value defined in `ETX.logging.Logger.logLevels`.\n     * @param {String} message - Message to log.\n     * @param {String} [source] - (Optional) Source of the message.\n     * @param {Object|Array} [optionalParams] - (Optional) Optional additional data to accompany the message (if supported).\n     * @returns {void}\n     */\n    function log(logLevel, message, source, optionalParams) {\n        // Only log messages when enabled...\n        if (_logger.isEnabled !== true) {\n            return;\n        }\n\n        // Only log messages with a lower logLevel (i.e. higher priority)...\n        if ((+_logger.logLevel) < (+logLevel)) {\n            return;\n        }\n\n        // If it's NOT debug mode, then only log messages with a logLevel of INFO (0) or lower (i.e. very high priority)...\n        if (ETX.config.debug !== true) {\n            if ((+ETX.logging.Logger.logLevels.INFO) < (+logLevel)) {\n                return;\n            }\n        }\n\n        if (_onLog) {\n            // Allow logging the message to be overridden...\n            _onLog(logLevel, message, source, optionalParams);\n        } else {\n            // Else log to the console by default...\n            var logText = message;\n\n            if (source) {\n                // Include the source...\n                logText = source + ' | ' + logText;\n            }\n\n            // Include the logLevel text...\n            logText = (ETX.logging.Logger.getLogLevelText(logLevel) || logLevel) + ' | ' + logText;\n\n            if (_logger.prefixTimestamp) {\n                // Include the current timestamp...\n                //logText = new Date().toISOString() + ' | ' + logText;\n                var now = new Date();\n                logText = now.toDateString() + ' ' + now.toLocaleTimeString() + ' | ' + logText;\n            }\n\n            // Print to console => '<YYYY-MM-DDTHH:mm:ss.sssZ> | <LOGLEVEL> | <SOURCE> | <MESSAGE>'...\n            consoleLog(logText, optionalParams, logLevel);\n        }\n    }\n\n    /**\n     * Attempts to log the message details provided at a VERBOSE priority log level, which may be not occur depending \n     * upon the current `logLevel`.\n     *\n     * @method verbose\n     * @param {String} message - Message to log.\n     * @param {String} [source] - (Optional) Source of the message.\n     * @param {Object|Array} [optionalParams] - (Optional) Optional additional data to accompany the message (if supported).\n     * @returns {void}\n     */\n    function verbose(message, source, optionalParams) {\n        log(ETX.logging.Logger.logLevels.VERBOSE, message, source, optionalParams);\n    }\n\n    /**\n     * Attempts to log the message details provided at a WARNING priority log level, which may be not occur depending \n     * upon the current `logLevel`.\n     *\n     * @method warning\n     * @param {String} message - Message to log.\n     * @param {String} [source] - (Optional) Source of the message.\n     * @param {Object|Array} [optionalParams] - (Optional) Optional additional data to accompany the message (if supported).\n     * @returns {void}\n     */\n    function warning(message, source, optionalParams) {\n        log(ETX.logging.Logger.logLevels.WARNING, message, source, optionalParams);\n    }\n    //----END-METHODS---------\n\n};\n\n\n//----STATIC--------------\n/** \n * Filter out log attempts based on log level priorities:   \n * `{ FATAL: -3, ERROR: -2, WARNING: -1, INFO: 0, DEBUG: 1, VERBOSE: 2 }`\n *\n * @enum {Number} ETX.logging.Logger.logLevels\n * \n * @member ETX.logging.Logger\n * @static\n * @readonly\n */\nETX.logging.Logger.logLevels = {\n    /** \n     * (-3) Highest priority level of logging, used to highlight unrecoverable errors.\n     * @property {Number} FATAL\n     */\n    FATAL: -3,\n    /** \n     * (-2) Very high priority level of logging, used to highlight errors.\n     * @property {Number} ERROR\n     */\n    ERROR: -2,\n    /** \n     * (-1) High priority level of logging, used to highlight warnings.\n     * @property {Number} WARNING\n     */\n    WARNING: -1,\n    /** \n     * (0) The default level of logging, used to highlight useful general information.\n     * @property {Number} INFO\n     */\n    INFO: 0,\n    /** \n     * (1) Low priority level of logging, used to by developers to highlight traceable debug information.\n     * @property {Number} DEBUG\n     */\n    DEBUG: 1,\n    /** \n     * (2) Lowest priority level of logging, used to by developers to highlight very detailed traceable debug information. \n     * @property {Number} VERBOSE\n     */\n    VERBOSE: 2\n};\n\n/** \n * Returns the user friendly display text for a log level value defined in `ETX.logging.Logger.logLevels`.\n *\n * @method getLogLevelText\n * @param {Number} logLevel - Log level value defined in `ETX.logging.Logger.logLevels`.\n * @returns {String} - User friendly display text for log level.\n * \n * @member ETX.logging.Logger\n * @static\n */\nETX.logging.Logger.getLogLevelText = function (logLevel) {\n    // Return a text representation of the log level provided...\n    switch (+logLevel) {\n        case ETX.logging.Logger.logLevels.DEBUG: { return 'DEBUG'; }\n        case ETX.logging.Logger.logLevels.ERROR: { return 'ERROR'; }\n        case ETX.logging.Logger.logLevels.FATAL: { return 'FATAL'; }\n        case ETX.logging.Logger.logLevels.INFO: { return 'INFO'; }\n        case ETX.logging.Logger.logLevels.VERBOSE: { return 'VERBOSE'; }\n        case ETX.logging.Logger.logLevels.WARNING: { return 'WARNING'; }\n        default: { return ''; }\n    }\n}\n//----END-STATIC----------\n\n/// <reference path=\"../../_references.js\" />\n/// <reference path=\"../../../../lib/_references.js\" />\n\nETX.namespace('clientAPI');\n\n/**\n * @class ETX.clientAPI.ClientAPI\n *\n * @requires ETX\n * @requires ETX.clientAPI.Constants\n * @requires ETX.clientAPI.Helpers\n * @requires ETX.clientAPI.Messages\n * @requires ETX.clientAPI.SessionFactory\n * @requires ETX.clientAPI.TransportFactory\n * @requires ETX.logging.Logger\n * @requires jQuery\n *\n * Creates a new `ETX.clientAPI.ClientAPI`, which contains all the API functionality to interface with an iTrade Client API server.   \n *    \n * **NOTE:** Requires the following third-party JavaScript libraries:   \n *\n *  +  [jQuery](http://api.jquery.com/)\n *   \n * ###Example:\n *      // Create a new ETX.clientAPI.ClientAPI instance, setting options (inline) during construction...\n *      // NOTE: As the log on credentials have been provided, an automatic log on will be attempted...\n *      var api = new ETX.clientAPI.ClientAPI({\n *          webSocketRootURL: 'ws://127.0.0.1:82',\n *          webAPIRootURL: 'http://127.0.0.1:81/',\n *          tryWebSocket: true,\n *          username: 'test_user',\n *          password: 'change_me',\n *          brokerID: '1',\n *          anonymityToken: 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855',\n *          onError: function autoRegisteredErrorsCallback(api, errorMessage, errorData) { },\n *          onLogOff: function autoRegisteredLogOffCallback(api, logOffResponse) { },\n *          onLogOn: function autoRegisteredLogOnCallback(api, logOnResponse) { },\n *          onLogOnLogOff: function autoRegisteredLogOnLogOffCallback(api, success, logOnLogOffResponse) { },\n *          onQoS: function autoRegisteredQoSCallback(api, ttl) { },\n *          logger: new ETX.logging.Logger({\n *              logLevel: ETX.logging.Logger.logLevels.DEBUG\n *          })\n *      });\n *      // Now use it...\n */\n/**\n * @constructor\n * @param {Object} [options] - (Optional) Allows certain optional settings to be initialised upon instantiation.\n * @param {String} [options.webSocketRootURL] - (Optional) Sets the URL the Client API server is using to listen to web socket requests (e.g. 'ws://127.0.0.1:82').\n * @param {Boolean} [options.tryWebSocket=true] - (Optional) If true, will attempt to communicate with the Client API server using web socket requests, otherwise it will use standard HTTP requests.\n * @param {String} [options.webAPIRootURL] - (Optional) Sets the URL the Client API server is using to listen to HTTP requests (e.g. 'http://127.0.0.1:81/').\n * @param {String} [options.username] - (Optional) Sets the client account username.\n * @param {String} [options.password] - (Optional) Sets the client account password.\n * @param {String} [options.brokerID] - (Optional) Sets the broker unique identifier for client account.\n * @param {String} [options.anonymityToken] - (Optional) Sets the unique client generated anonymity token.\n * @param {Function} [options.onLogOnLogOff] - (Optional) Automatically registers a log on/off callback handler.\n * @param {Function} [options.onLogOn] - (Optional) Automatically registers a log on/off callback handler.\n * @param {Function} [options.onLogOff] - (Optional) Automatically registers a log on callback handler.\n * @param {Function} [options.onError] - (Optional) Automatically registers a log off callback handler.\n * @param {Function} [options.onQoS] - (Optional) Automatically registers an error callback handler.\n * @param {Function} [options.onConnect] - (Optional) Automatically registers a connect callback handler.\n * @param {Function} [options.onDisconnect] - (Optional) Automatically registers a disconnect callback handler.\n * @param {ETX.logging.Logger} [options.logger] - (Optional) Sets the `ETX.logging.Logger` to use to provide message logging functionality.\n * @returns {ETX.clientAPI.ClientAPI}\n */\nETX.clientAPI.ClientAPI = function (options) {\n\n    'use strict';\n\n    //-CONSTRUCTOR-------------\n    // #region\n    //----PRIVATE--------------\n    // #region\n    var _api = this,\n        _options = options || {},\n        $ = _options.jQuery || jQuery,\n        _sessionFactory = _options.sessionFactory || new ETX.clientAPI.SessionFactory(),\n        _transportFactory = _options.transportFactory || new ETX.clientAPI.TransportFactory(),\n        _webSocketFactory = _options.webSocketFactory || new ETX.clientAPI.WebSocketFactory(),\n        _helpers = _options.helpers || ETX.clientAPI.Helpers,\n        _logger = _options.logger || new ETX.logging.Logger(),\n        _logSource = 'ClientAPI',\n        _webSocketRootURL = _options.webSocketRootURL || '',\n        _tryWebSocket = _options.tryWebSocket === false ? false : true,\n        _webAPIRootURL = _options.webAPIRootURL || '',\n        _username = _options.username,\n        _authenticationKey = _options.authenticationKey,\n        _passwordHash = _options.password,\n        _brokerID = _options.brokerID || ETX.config.defaultBrokerID,\n        _anonymityToken = _options.anonymityToken,\n        _session,\n        _logOnTimeoutTimer,\n        _logonTimeoutInterval = 5000,\n        _forceLogOnOffEvent = (_options.forceLogOnOffEvent === true),\n        // Callbacks\n        _callbacks = {\n            connect: $.Callbacks('unique'),\n            disconnect: $.Callbacks('unique'),\n            errors: $.Callbacks('unique'),\n            logOff: $.Callbacks('unique'),\n            logOn: $.Callbacks('unique'),\n            logOnLogOff: $.Callbacks('unique'),\n            QoS: $.Callbacks('unique')\n        },\n        // Callbacks mapped by unique key\n        _mappedCallbacks = {\n            executionReport: {},\n            marketSearch: {}\n        },\n        // Subscription callbacks\n        _subscriptions = {\n            account: {\n                subscribed: false,\n                subscriptionCount: 0,\n                callbacks: $.Callbacks('unique'),\n                cache: {},\n                subscriptionMessageBuilder: function () {\n                    return ETX.clientAPI.Messages.createAccountSubscribeMessage();\n                }\n            },\n            accountTransactions: {\n                subscribed: false,\n                subscriptionCount: 0,\n                callbacks: $.Callbacks('unique'),\n                cache: {},\n                subscriptionMessageBuilder: function () {\n                    return ETX.clientAPI.Messages.createAccountTransactionSubscribeMessage();\n                }\n            },\n            closedTrades: {\n                subscribed: false,\n                subscriptionCount: 0,\n                callbacks: $.Callbacks('unique'),\n                cache: {},\n                subscriptionMessageBuilder: function () {\n                    return ETX.clientAPI.Messages.createClosedTradesSubscribeMessage();\n                }\n            },\n            historicTrades: {\n                subscribed: false,\n                subscriptionCount: 0,\n                callbacks: $.Callbacks('unique'),\n                cache: {},\n                subscriptionMessageBuilder: function () {\n                    return ETX.clientAPI.Messages.createHistoricTradesSubscribeMessage();\n                }\n            },\n            openTrades: {\n                subscribed: false,\n                subscriptionCount: 0,\n                callbacks: $.Callbacks('unique'),\n                cache: {},\n                subscriptionMessageBuilder: function () {\n                    return ETX.clientAPI.Messages.createOpenTradesSubscribeMessage();\n                }\n            },\n            priceAlerts: {\n                subscribed: false,\n                subscriptionCount: 0,\n                callbacks: $.Callbacks('unique'),\n                cache: {},\n                subscriptionMessageBuilder: function () {\n                    return ETX.clientAPI.Messages.createPriceAlertsSubscribeMessage();\n                }\n            },\n            processedOrders: {\n                subscribed: false,\n                subscriptionCount: 0,\n                callbacks: $.Callbacks('unique'),\n                cache: {},\n                subscriptionMessageBuilder: function () {\n                    return ETX.clientAPI.Messages.createProcessedOrdersSubscribeMessage();\n                }\n            },\n            workingOrders: {\n                subscribed: false,\n                subscriptionCount: 0,\n                callbacks: $.Callbacks('unique'),\n                cache: {},\n                subscriptionMessageBuilder: function () {\n                    return ETX.clientAPI.Messages.createWorkingOrdersSubscribeMessage();\n                }\n            }\n        },\n        // Subscription callbacks mapped by unique key\n        _mappedSubscriptions = {\n            aggregateAccounts: {\n                subscriptionCounts: {},             // NOTE: Map of SubAccountID to SubscriptionCount...\n                callbacks: {\n                    $any: $.Callbacks('unique')     // NOTE: Map of SubAccountID to callback, where callbacks mapped to $any get fired for each and every update\n                },\n                cache: {},\n                subscriptionMessageBuilder: function (subAccountIDs) {\n                    return ETX.clientAPI.Messages.createAggregateAccountSubscribeMessage(subAccountIDs);\n                }\n            },\n            exchangeRates: {\n                subscriptionCounts: {},             // NOTE: Map of Currency Pair to SubscriptionCount...\n                callbacks: {\n                    $any: $.Callbacks('unique')     // NOTE: Map of Currency Pair to callback, where callbacks mapped to $any get fired for each and every update\n                },\n                cache: {},\n                subscriptionMessageBuilder: function (currencyPairs) {\n                    return ETX.clientAPI.Messages.createExchangeRateSubscribeMessage(currencyPairs);\n                }\n            },\n            groupMarkets: {\n                subscriptionCounts: {},             // NOTE: Map of GroupID to SubscriptionCount...\n                callbacks: {\n                    $any: $.Callbacks('unique')     // NOTE: Map of GroupID to callback, where callbacks mapped to $any get fired for each and every update\n                },\n                cache: {},\n                subscriptionMessageBuilder: function (groupMarketsIDs) {\n                    return ETX.clientAPI.Messages.createGroupMarketSubscribeMessage(groupMarketsIDs);\n                }\n            },\n            markets: {\n                subscriptionCounts: {},             // NOTE: Map of MarketID to SubscriptionCount...\n                callbacks: {\n                    $any: $.Callbacks('unique')     // NOTE: Map of MarketID to callback, where callbacks mapped to $any get fired for each and every update\n                },\n                cache: {},\n                subscriptionMessageBuilder: function (marketsIDs) {\n                    return ETX.clientAPI.Messages.createMarketSubscribeMessage(marketsIDs);\n                }\n            },\n            portfolios: {\n                subscriptionCounts: {},             // NOTE: Map of PortfolioID to SubscriptionCount...\n                callbacks: {\n                    $any: $.Callbacks('unique')     // NOTE: Map of PortfolioID to callback, where callbacks mapped to $any get fired for each and every update\n                },\n                cache: {},\n                subscriptionMessageBuilder: function (portfolioIDs) {\n                    return ETX.clientAPI.Messages.createPortfolioSubscribeMessage(portfolioIDs);\n                }\n            }\n        },\n        // Deferred Objects mapped by unique key\n        _mappedDeferredObjs = {\n            groupSearch: {},\n            marketSearch: {},\n            orderRequest: {},\n            portfolioRequest: {},\n            priceAlertRequest: {},\n            tradeQuoteRequest: {},\n            tradeRequest: {},\n            userSettingsRequest: {}\n        };\n    // #endregion\n    //----END-PRIVATE---------  \n\n    //----PUBLIC--------------\n    // #region\n    _api.addMarketToPortfolio = addMarketToPortfolio;\n    _api.declineTradeQuote = declineTradeQuote;\n    _api.destroy = destroy;\n    _api.findWorkingOrders = findWorkingOrders;\n    _api.findWorkingOrdersBy = findWorkingOrdersBy;\n    _api.findWorkingOrdersForOrderGroupID = findWorkingOrdersForOrderGroupID;\n    _api.getLoginCredentials = getLoginCredentials;\n    _api.getUserSettings = getUserSettings;\n    _api.isConnected = isConnected;\n    /** \n     * Gets or sets the `ETX.logging.Logger` used to provide message logging functionality.\n     * @property {ETX.logging.Logger} logger\n     */\n    _api.logger = _logger;\n    _api.logOff = logOff;\n    _api.logOn = logOn;\n    _api.logOnWithAuthKey = logOnWithAuthKey;\n    _api.logOnAnonymously = logOnAnonymously;\n    _api.overwriteUserSettings = overwriteUserSettings;\n    _api.registerForConnect = registerForConnect;\n    _api.registerForDisconnect = registerForDisconnect;\n    _api.registerForErrors = registerForErrors;\n    _api.registerForLogOff = registerForLogOff;\n    _api.registerForLogOn = registerForLogOn;\n    _api.registerForLogOnLogOff = registerForLogOnLogOff;\n    _api.registerForMarketUpdates = registerForMarketUpdates;\n    _api.registerForQoS = registerForQoS;\n    _api.removeMarketFromPortfolio = removeMarketFromPortfolio;\n    _api.respondToTradeRequote = respondToTradeRequote;\n    _api.searchGroups = searchGroups;\n    _api.searchMarkets = searchMarkets;\n    _api.send = send;\n    _api.sendOrderRequest = sendOrderRequest;\n    _api.sendPriceAlertRequest = sendPriceAlertRequest;\n    _api.sendTradeQuoteRequest = sendTradeQuoteRequest;\n    _api.sendTradeRequest = sendTradeRequest;\n    _api.setWebAPIRootURL = setWebAPIRootURL;\n    _api.setWebSocketRootURL = setWebSocketRootURL;\n    _api.subscribeToAccount = subscribeToAccount;\n    _api.subscribeToAccountTransactions = subscribeToAccountTransactions;\n    _api.subscribeToAggregateAccounts = subscribeToAggregateAccounts;\n    _api.subscribeToClosedTrades = subscribeToClosedTrades;\n    _api.subscribeToExchangeRates = subscribeToExchangeRates;\n    _api.subscribeToGroupMarkets = subscribeToGroupMarkets;\n    _api.subscribeToHistoricTrades = subscribeToHistoricTrades;\n    _api.subscribeToMarkets = subscribeToMarkets;\n    _api.subscribeToOpenTrades = subscribeToOpenTrades;\n    _api.subscribeToPortfolios = subscribeToPortfolios;\n    _api.subscribeToPriceAlerts = subscribeToPriceAlerts;\n    _api.subscribeToProcessedOrders = subscribeToProcessedOrders;\n    _api.subscribeToWorkingOrders = subscribeToWorkingOrders;\n    _api.unregisterForErrors = unregisterForErrors;\n    _api.unregisterForLogOff = unregisterForLogOff;\n    _api.unregisterForLogOn = unregisterForLogOn;\n    _api.unregisterForLogOnLogOff = unregisterForLogOnLogOff;\n    _api.unregisterForMarketUpdates = unregisterForMarketUpdates;\n    _api.unregisterForQoS = unregisterForQoS;\n    _api.unregisterForConnect = unregisterForConnect;\n    _api.unregisterForDisconnect = unregisterForDisconnect;\n    _api.unsubscribeToAccount = unsubscribeToAccount;\n    _api.unsubscribeToAccountTransactions = unsubscribeToAccountTransactions;\n    _api.unsubscribeToAggregateAccounts = unsubscribeToAggregateAccounts;\n    _api.unsubscribeToClosedTrades = unsubscribeToClosedTrades;\n    _api.unsubscribeToExchangeRates = unsubscribeToExchangeRates;\n    _api.unsubscribeToGroupMarkets = unsubscribeToGroupMarkets;\n    _api.unsubscribeToHistoricTrades = unsubscribeToHistoricTrades;\n    _api.unsubscribeToMarkets = unsubscribeToMarkets;\n    _api.unsubscribeToOpenTrades = unsubscribeToOpenTrades;\n    _api.unsubscribeToPortfolios = unsubscribeToPortfolios;\n    _api.unsubscribeToPriceAlerts = unsubscribeToPriceAlerts;\n    _api.unsubscribeToProcessedOrders = unsubscribeToProcessedOrders;\n    _api.unsubscribeToWorkingOrders = unsubscribeToWorkingOrders;\n    _api.updateUserSettings = updateUserSettings;\n    /** \n     * Gets or sets the version of the `ETX.clientAPI.ClientAPI`.\n     * @property {String} version\n     */\n    _api.version = '1.1.6';\n    // #endregion\n    //----END-PUBLIC----------\n\n    // Automatically register callbacks provided in options, if any...\n    if (_options.onConnect) { registerForConnect(_options.onConnect); }\n    if (_options.onDisconnect) { registerForDisconnect(_options.onDisconnect); }\n    if (_options.onError) { registerForErrors(_options.onError); }\n    if (_options.onLogOff) { registerForLogOff(_options.onLogOff); }\n    if (_options.onLogOn) { registerForLogOn(_options.onLogOn); }\n    if (_options.onLogOnLogOff) { registerForLogOnLogOff(_options.onLogOnLogOff); }\n    if (_options.onQoS) { registerForQoS(_options.onQoS); }\n\n    _logger.debug('Created ETX.clientAPI.ClientAPI', _logSource);\n\n    // Automatically start API, if valid credentials have been provided...\n    start();\n\n    return _api;\n    // #endregion\n    //-END-CONSTRUCTOR--------\n\n\n    //-METHODS----------------\n    // #region\n    /**\n     * Adds market to the given porfolio\n     *\n     * @method addMarketToPortfolio\n     * @param {String} [portfolioID] - Unique identifier of the portfolio.\n     * @param {String} [marketID] - Unique identifier of the market.\n     * @returns {void}\n     */\n    function addMarketToPortfolio(portfolioID, marketID) {\n        if (_session) {\n            _logger.debug('Sending PortfolioAddMarket request...', _logSource);\n\n            var msg = ETX.clientAPI.Messages.createPortfolioAddMarketMessage(portfolioID, marketID);\n            send(msg);\n        }\n    }\n\n    function clearLogOnTimeout() {\n        if (_logOnTimeoutTimer) {\n            clearTimeout(_logOnTimeoutTimer);\n            _logOnTimeoutTimer = undefined;\n            _logger.verbose('Cleared log on timeout timer', _logSource);\n        }\n    }\n\n    function createSession() {\n        // Create session and connect it\n        _session = _sessionFactory.create({\n            transportFactory: _transportFactory,\n            webSocketFactory: _webSocketFactory,\n            logger: _logger,\n            tryWebSocket: _tryWebSocket,\n            webSocketRootURL: _webSocketRootURL,\n            webAPIRootURL: _webAPIRootURL,\n            onConnect: onConnect,\n            onMessage: onMessage,\n            onError: onError,\n            onDisconnect: onDisconnect,\n            onQoS: onQoS\n        });\n    }\n\n    /**\n     * Declines an existing quoted trade price.\n     *\n     * @method declineTradeQuote\n     * @param {String} quoteID - Unique identifier of the trade quote to be declined.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function declineTradeQuote(quoteID) {\n        // Generate unique client identifier...\n        var uid = ETX.clientAPI.Messages.generateUniqueClientIdentifier(ETX.clientAPI.Constants.messages.TradeQuoteDecline.MessageType),\n            defer = new $.Deferred(),\n            promise = defer.promise();\n\n        if (_session) {\n            _logger.debug('Sending TradeQuoteDecline request (\"' +uid + '\")...', _logSource);\n\n            // Fire and forget...\n            var msg = ETX.clientAPI.Messages.createTradeQuoteDeclineMessage(uid, quoteID);\n            send(msg);\n            defer.resolve(_api, uid);\n        } else {\n            defer.reject(_api, 'No session');\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n\n    /**\n     * Stops any session currently established with the server, unregisters all callback handlers and cleans\n     * up all resources.\n     *\n     * @method destroy\n     * @returns {void}\n     */\n    function destroy() {\n        // Clear all callbacks...\n        for (var msgType in _callbacks) {\n            var msgTypeCallbacks = _callbacks[msgType];\n            if (msgTypeCallbacks) {\n                msgTypeCallbacks.empty();\n            }\n        }\n        // Clear all mapped callbacks...\n        for (var msgType in _mappedCallbacks) {\n            _mappedCallbacks[msgType] = {};\n        }\n        // Clear all subscriptions...\n        for (var msgType in _subscriptions) {\n            var msgTypeSubscriptions = _subscriptions[msgType];\n            if (msgTypeSubscriptions) {\n                msgTypeSubscriptions.subscribed = false;\n                msgTypeSubscriptions.subscriptionCount = 0;\n                msgTypeSubscriptions.callbacks.empty();\n                msgTypeSubscriptions.cache = {};\n            }\n        }\n        // Clear all mapped subscriptions...\n        for (var msgType in _mappedSubscriptions) {\n            _mappedSubscriptions[msgType] = {};\n        }\n\n        logOff();\n\n        _logger.debug('Destroyed ETX.clientAPI.ClientAPI', _logSource);\n    }\n\n    function destroySession() {\n        if (_session) {\n            // Clear Timeouts/Intervals...\n            clearLogOnTimeout();\n\n            _session.destroy();\n            _session = undefined;\n        }\n    }\n\n    /**\n     * Searches the internal cache for working orders matching the one of the working order\n     * IDs provided.\n     *\n     * @method findWorkingOrders\n     * @param {Array|String} workingOrderIDs - Array of (or an individual) working order IDs.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function findWorkingOrders(workingOrderIDs) {\n        var criteria = [];\n        if ($.isArray(workingOrderIDs) === false) {\n            workingOrderIDs = [workingOrderIDs];\n        }\n        for (var i in workingOrderIDs) {\n            var criterion = {},\n                workingOrderID = workingOrderIDs[i];\n            criterion[ETX.clientAPI.Constants.messages.WorkingOrder.OrderID] = workingOrderID;\n            criteria.push(criterion);\n        }\n        return findWorkingOrdersBy(criteria);\n    }\n\n    /**\n     * Searches the internal cache for working orders matching all the property values of at \n     * least one (criterion) Object within the criteria array provided.\n     *\n     * @method findWorkingOrdersBy\n     * @param {Array|Object} criteria - Array of (or an individual) (criterion) Object.\n     * @param {Boolean} autoSubscribe - If true, will automatically subscribe to working orders.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     *\n     *\n     * ###Example:\n     *      // Find any workings orders for Markets '10001', '10002', '10003' (auto-subscribing if required)\n     *      var api = new ETX.clientAPI.ClientAPI({\n     *          webSocketRootURL: 'ws://127.0.0.1:82',\n     *          webAPIRootURL: 'http://127.0.0.1:81/',\n     *          username: 'test_user',\n     *          password: 'change_me',\n     *          brokerID: '1'\n     *      });\n     *      var criteria = [], \n     *          marketIDs = ['10001', '10002', '10003'];\n     *      for (var i in marketIDs) {\n     *          var marketID = marketIDs[i],\n     *              criterion = {};\n     *          criterion[ETX.clientAPI.Constants.messages.WorkingOrder.MarketID] = marketID;\n     *          criteria.push(criterion);\n     *      }\n     *      // NOTE: Returns a jQuery Promise object, as this may be an async request\n     *      api.findWorkingOrdersBy(criteria, true)\n     *          .done(function (api, workingOrders) {\n     *              // workingOrders array should contain your search results\n     *          })\n     *          .fail(function (api, workingOrders) {\n     *              // An error must have occurred, which prevented the search operation from\n     *              // executing, so workingOrders array should be empty\n     *          })\n     *          .always(function (api, workingOrders) {\n     *              // If you don't care about whether there was an error and are more interested in the results\n     *          });\n     */\n    function findWorkingOrdersBy(criteria, autoSubscribe) {\n        var defer = new $.Deferred(),\n            unsubscriptionTimeoutRef, cachedWorkingOrderIDs;\n\n        if (_session) {\n\n            if (_subscriptions.workingOrders.subscribed === false && autoSubscribe === true) {\n                // As we have not subscribed to working orders, we need to temporarily\n                // subscribe so that we have data to query...\n                findWorkingOrdersBy_Subscribe();\n            } else {\n                // Query the data we have, if any...\n                findWorkingOrdersBy_Resolve(defer, criteria);\n            }\n        } else {\n            defer.reject(_api, []);\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return defer.promise();\n\n\n        // Nested Functions\n        // #region\n        function findWorkingOrdersBy_Subscribe() {\n            // Subscribe temporarily...\n            subscribeToWorkingOrders(findWorkingOrdersBy_SubscriptionUpdate);\n            findWorkingOrdersBy_ResetUnsubscriptionTimeout();\n        }\n\n        function findWorkingOrdersBy_SubscriptionUpdate(api, workingOrder) {\n            if ($.isArray(cachedWorkingOrderIDs)) {\n                var orderID = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderID];\n                if (orderID && cachedWorkingOrderIDs.indexOf(orderID) > 0) {\n                    findWorkingOrdersBy_ResetUnsubscriptionTimeout();\n                    cachedWorkingOrderIDs.push(orderID);\n                }\n            }\n        }\n\n        function findWorkingOrdersBy_ResetUnsubscriptionTimeout() {\n            if (unsubscriptionTimeoutRef) {\n                // Clear the previous timeout and wait again...\n                clearTimeout(unsubscriptionTimeoutRef);\n            }\n            // Wait 500ms before we unsubscribe...\n            unsubscriptionTimeoutRef = setTimeout(findWorkingOrdersBy_Unsubscribe, 500);\n        }\n\n        function findWorkingOrdersBy_Unsubscribe() {\n            // Subscription was only temporarily, we've wanted long enough, so unsubscribe...\n            cachedWorkingOrderIDs = undefined;\n            unsubscribeToWorkingOrders(findWorkingOrdersBy_SubscriptionUpdate);\n\n            findWorkingOrdersBy_Resolve(defer, criteria);\n        }\n\n        function findWorkingOrdersBy_Resolve(defer, criteria) {\n            // Query the data we have...\n            var matchingWorkingOrders = getObjectsMatchingCriteria(_subscriptions.workingOrders.cache, criteria);\n            defer.resolve(_api, matchingWorkingOrders);\n        }\n        // #endregion\n        // Nested Functions\n    }\n\n    /**\n     * Searches the internal cache for working orders matching the one of the working OCO order\n     * group IDs provided.\n     *\n     * @method findWorkingOrdersForOrderGroupID\n     * @param {Array|String} orderGroupIDs - Array of (or an individual) working OCO order group IDs.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function findWorkingOrdersForOrderGroupID(orderGroupIDs) {\n        var criteria = [];\n        if ($.isArray(orderGroupIDs) === false) {\n            orderGroupIDs = [orderGroupIDs];\n        }\n        for (var i in orderGroupIDs) {\n            var criterion = {},\n                orderGroupID = orderGroupIDs[i];\n            criterion[ETX.clientAPI.Constants.messages.WorkingOrder.OrderGroupID] = orderGroupID;\n            criteria.push(criterion);\n        }\n        return findWorkingOrdersBy(criteria);\n    }\n\n    function fireCallbacks(callbacks, args) {\n        if (callbacks) {\n            try {\n                if (args !== undefined) {\n                    args = [].concat(_api, args);\n                } else {\n                    args = [_api];\n                }\n\n                // NOTE: If any one callback throws an exception, then any subsequent callbacks will not be fired...\n                // Fire callbacks\n                callbacks.fireWith(callbacks, args);\n            } catch (ex) {\n                _logger.error('Error firing callback(s) | Exception = ' + ex, _logSource, [ex, args]);\n            }\n        }\n    }\n\n    /**\n     * Return an Object containing the current login credentials stored.\n     *\n     * @method getLoginCredentials\n     * @returns {Object} - Object containing the username, password and broker ID.\n     */\n    function getLoginCredentials() {\n        var credentials = undefined;\n        if (_anonymityToken) {\n            credentials = {\n                anonymityToken: _anonymityToken\n            };\n        } else {\n            credentials = {\n                username: _username,\n                password: _passwordHash,\n                brokerID: _brokerID\n            };\n        }\n        return credentials;\n    }\n\n    /**\n     * Fetches the user settings for the client account from the server.\n     *\n     * @method getUserSettings\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function getUserSettings() {\n        // Generate unique client identifier...\n        var uid = ETX.clientAPI.Messages.generateUniqueClientIdentifier(ETX.clientAPI.Constants.messages.UserSettingsRequest.MessageType),\n            defer = new $.Deferred(),\n            promise = defer.promise();\n\n        if (_session) {\n            _logger.debug('Sending (get) UserSettingsRequest  (\"' + uid + '\")...', _logSource);\n\n            _mappedDeferredObjs.userSettingsRequest[uid] = defer;\n\n            var msg = ETX.clientAPI.Messages.createUserSettingsRequestMessage(\n                uid, ETX.clientAPI.Constants.messages.UserSettingsRequest.UserSettingsRequestType_Get);\n            send(msg);\n        } else {\n            defer.reject(_api, 'No session');\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n\n    function getObjectsMatchingCriteria(objects, criteria) {\n        var matchingObjects = [];\n\n        if ($.isArray(criteria) === false) {\n            criteria = [criteria];\n        }\n\n        if (criteria.length > 0) {\n            for (var i in objects) {\n                var obj = objects[i];\n                if (obj) {\n                    // Check if the object matches this criteria...\n                    if (isObjectMatchingCriteria(obj, criteria)) {\n                        matchingObjects.push(obj);\n                    }\n                }\n            }\n        }\n\n        return matchingObjects;\n\n\n        // Nested Functions\n        // #region\n        function isObjectMatchingCriteria(obj, criteria) {\n            // Check if the object matches all criteria...\n            if ($.isPlainObject(obj)) {\n                if ($.isArray(criteria) === false) {\n                    criteria = [criteria];\n                }\n                for (var i in criteria) {\n                    var criterion = criteria[i];\n                    if (isObjectMatchingCriterion(obj, criterion)) {\n                        // Match!!!\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        function isObjectMatchingCriterion(obj, criterion) {\n            // Check if the object matches this criterion\n            if ($.isPlainObject(obj)) {\n                if ($.isPlainObject(criterion) && $.isEmptyObject(criterion) === false) {\n                    for (var key in criterion) {\n                        if (obj.hasOwnProperty(key) === false) {\n                            // Mismatch...\n                            return false;\n                        }\n\n                        var value = obj[key],\n                            target = criterion[key];\n                        if (value !== target) {\n                            // Mismatch...\n                            return false;\n                        }\n                    }\n                    // Match!!!\n                    return true;\n                }\n            }\n            return false;\n        }\n        // #endregion\n        // Nested Functions\n    }\n\n    function handleMsgTypeAccountUpdate(message) {\n        _logger.debug('Handling messsage AccountUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Check that we are subscribed to accounts (to prevent memory leaks)\n        if (_subscriptions.account.subscribed === true) {\n            // Update cache\n            for (var k in message.t) {\n                _subscriptions.account.cache[k] = message.t[k];\n            }\n            _logger.debug('Updated Account', _logSource);\n\n            //\n            // TODO: NOTE: We need to support SubAccount deletions some how...\n            //\n\n            // Fire callbacks\n            fireCallbacks(_subscriptions.account.callbacks, _subscriptions.account.cache);\n        }\n    }\n\n    function handleMsgTypeAccountTransactionUpdate(message) {\n        _logger.debug('Handling messsage AccountTransactionUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Check that we are subscribed to account transactions (to prevent memory leaks)\n        if (_subscriptions.accountTransactions.subscribed === true) {\n            // Update cache\n            var statementID = message.t[ETX.clientAPI.Constants.messages.AccountTransaction.StatementID];\n            if (_helpers.compare.isIdentifier(statementID)) {\n                // Update the cache\n                if (_subscriptions.accountTransactions.cache.hasOwnProperty(statementID) === false) {\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.AccountTransaction.Deleted)) {\n                        return; // If this has the delete flag, ignore\n                    }\n\n                    // Add this account transaction to the cache\n                    _subscriptions.accountTransactions.cache[statementID] = message.t;\n                    _logger.debug('Added new AccountTransaction ' + statementID, _logSource);\n                } else {\n                    // If this has the delete flag, remove from the cache\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.AccountTransaction.Deleted)) {\n                        delete _subscriptions.accountTransactions.cache[statementID];\n                        _logger.debug('Deleted existing AccountTransaction ' + statementID, _logSource);\n                    } else {\n                        // Update the fields in the cache\n                        var statement = _subscriptions.accountTransactions.cache[statementID];\n                        for (var k in message.t) {\n                            statement[k] = message.t[k];\n                        }\n                        _logger.debug('Updated existing AccountTransaction ' + statementID, _logSource);\n                    }\n                }\n\n                // Fire callbacks\n                fireCallbacks(_subscriptions.accountTransactions.callbacks, message.t);\n            }\n        }\n    }\n\n    function handleMsgTypeAggregateAccountUpdate(message) {\n        _logger.debug('Handling messsage AggregateAccountUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Fire callbacks registered for (high-level) exchange rate updates...\n        fireCallbacks(_mappedSubscriptions.exchangeRates.callbacks.$any, message.t);\n\n        // Do we have a specific exchange rate subscription?\n        var subAccountID = message.t[ETX.clientAPI.Constants.messages.AggregateAccount.SubAccountID];\n        if (_helpers.compare.isIdentifier(subAccountID)) {\n            // Check that we have subscriptions for this aggr. account (to prevent memory leaks)\n            if ((_mappedSubscriptions.aggregateAccounts.subscriptionCounts.hasOwnProperty(subAccountID)) &&\n                (_mappedSubscriptions.aggregateAccounts.subscriptionCounts[subAccountID] > 0)) {\n                // Update the cache\n                if (_mappedSubscriptions.aggregateAccounts.cache.hasOwnProperty(subAccountID) === false) {\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.AggregateAccount.Deleted)) {\n                        return; // If this has the delete flag, ignore\n                    }\n                    // Add this aggr. account to the cache\n                    _mappedSubscriptions.aggregateAccounts.cache[subAccountID] = message.t;\n                } else {\n                    // If this has the delete flag, remove from the cache\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.ExchangeRate.Deleted)) {\n                        delete _mappedSubscriptions.exchangeRates.cache[subAccountID];\n                        _logger.debug('Deleted existing AggregateAccount ' + subAccountID, _logSource);\n                    } else {\n                        // Update the cache with these tags\n                        var cacheAggAccount = _mappedSubscriptions.aggregateAccounts.cache[subAccountID];\n                        for (var k in message.t) {\n                            cacheAggAccount[k] = message.t[k];\n                        }\n                        _logger.debug('Updated existing AggregateAccount ' + subAccountID, _logSource);\n                    }\n                }\n                // Do we have any subscriptions to this market?\n                if (_mappedSubscriptions.aggregateAccounts.callbacks.hasOwnProperty(subAccountID)) {\n                    fireCallbacks(_mappedSubscriptions.aggregateAccounts.callbacks[subAccountID], message.t);\n                }\n            }\n        }\n    }\n\n    function handleMsgTypeClosedTradeUpdate(message) {\n        _logger.debug('Handling messsage ClosedTradeUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Check that we are subscribed to closed trades (to prevent memory leaks)\n        if (_subscriptions.closedTrades.subscribed === true) {\n            // Update cache\n            var tradeCloseID = message.t[ETX.clientAPI.Constants.messages.ClosedTrade.TradeCloseID];\n            if (_helpers.compare.isIdentifier(tradeCloseID)) {\n                if (_subscriptions.closedTrades.cache.hasOwnProperty(tradeCloseID) === false) {\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.ClosedTrade.Deleted)) {\n                        return; // If this has the delete flag, ignore\n                    }\n                    // Add this closed trade to the cache\n                    _subscriptions.closedTrades.cache[tradeCloseID] = message.t;\n                    _logger.debug('Added new ClosedTrade ' + tradeCloseID, _logSource);\n                } else {\n                    // If this has the delete flag, remove from the cache\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.ClosedTrade.Deleted)) {\n                        delete _subscriptions.closedTrades.cache[tradeCloseID];\n                        _logger.debug('Deleted existing ClosedTrade ' + tradeCloseID, _logSource);\n                    } else {\n                        // Update the fields in the cache\n                        var trade = _subscriptions.closedTrades.cache[tradeCloseID];\n                        for (var k in message.t) {\n                            trade[k] = message.t[k];\n                        }\n                        _logger.debug('Updated existing ClosedTrade ' + tradeCloseID, _logSource);\n                    }\n                }\n\n                // Fire callbacks\n                fireCallbacks(_subscriptions.closedTrades.callbacks, message.t);\n            }\n        }\n    }\n\n    function handleMsgTypeError(message) {\n        var error = message.t[ETX.clientAPI.Constants.messages.Error.ErrorText];\n\n        _logger.error('Error received from server | Error = ' + error, _logSource, message.t);\n\n        // Fire callbacks\n        fireCallbacks(_callbacks.errors, [error, message.t]);\n    }\n\n    function handleMsgTypeExchangeRateUpdate(message) {\n        _logger.debug('Handling messsage ExchangeRateUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Fire callbacks registered for (high-level) exchange rate updates...\n        fireCallbacks(_mappedSubscriptions.exchangeRates.callbacks.$any, message.t);\n\n        // Do we have a specific exchange rate subscription?\n        var currencyPair = message.t[ETX.clientAPI.Constants.messages.ExchangeRate.CurrencyPair];\n        if (_helpers.compare.isIdentifier(currencyPair)) {\n            // Check that we have subscriptions for this exchange rate (to prevent memory leaks)\n            if ((_mappedSubscriptions.exchangeRates.subscriptionCounts.hasOwnProperty(currencyPair)) &&\n                (_mappedSubscriptions.exchangeRates.subscriptionCounts[currencyPair] > 0)) {\n                // Update the cache\n                if (_mappedSubscriptions.exchangeRates.cache.hasOwnProperty(currencyPair) === false) {\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.ExchangeRate.Deleted)) {\n                        return; // If this has the delete flag, ignore\n                    }\n                    // Add this exchange rate to the cache\n                    _mappedSubscriptions.exchangeRates.cache[currencyPair] = message.t;\n                    _logger.debug('Added new ExchangeRate ' + currencyPair, _logSource);\n                } else {\n                    // If this has the delete flag, remove from the cache\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.ExchangeRate.Deleted)) {\n                        delete _mappedSubscriptions.exchangeRates.cache[currencyPair];\n                        _logger.debug('Deleted existing ExchangeRate ' + currencyPair, _logSource);\n                    } else {\n                        // Update the cache with these tags\n                        var exchangeRate = _mappedSubscriptions.exchangeRates.cache[currencyPair];\n                        for (var k in message.t) {\n                            exchangeRate[k] = message.t[k];\n                        }\n                        _logger.debug('Updated existing ExchangeRate ' + currencyPair, _logSource);\n                    }\n                }\n                // Do we have any subscriptions to this exchange rate ?\n                if (_mappedSubscriptions.exchangeRates.callbacks.hasOwnProperty(currencyPair)) {\n                    fireCallbacks(_mappedSubscriptions.exchangeRates.callbacks[currencyPair], message.t);\n                }\n            }\n        }\n    }\n\n    function handleMsgTypeExecutionReport(message) {\n        _logger.debug('Handling messsage ExecutionReportResponse (\"' + message.T + '\")...', _logSource);\n\n        // Get the UID from the message\n        var uid = message.t[ETX.clientAPI.Constants.messages.ExecutionReport.UniqueClientIdentifier],\n            orderStatus = message.t[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus],\n            request,\n            defer,\n            finished = false;\n\n        // Check if this execution report is for a trade request\n        if (_mappedDeferredObjs.tradeRequest.hasOwnProperty(uid)) {\n            request = _mappedDeferredObjs.tradeRequest[uid].request.t;\n            defer = _mappedDeferredObjs.tradeRequest[uid].defer;\n\n            switch (orderStatus) {\n                default:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Dealer:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Requoted:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Working:\n                    defer.notify(_api, message.t);\n                    _logger.debug('TradeRequest ExecutionReport (\"' + uid + '\") with status (\"' + orderStatus + '\") is pending...', _logSource);\n                    break;\n\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Filled:\n                    defer.resolve(_api, message.t);\n                    finished = true;\n                    break;\n\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Cancelled:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Stopped:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Rejected:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Expired:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_PriceReject:\n                    defer.reject(_api, message.t);\n                    finished = true;\n                    break;\n            }\n\n            // Are we finsihed with this report?\n            if (finished) {\n                // Remove deferred object...\n                delete _mappedDeferredObjs.tradeRequest[uid];\n                _logger.debug('TradeRequest ExecutionReport (\"' + uid + '\") with status (\"' + orderStatus + '\") is complete', _logSource);\n            }\n        }\n\n        // Check if this execution report is for a order request\n        if (_mappedDeferredObjs.orderRequest.hasOwnProperty(uid)) {\n            request = _mappedDeferredObjs.orderRequest[uid].request.t;\n            defer = _mappedDeferredObjs.orderRequest[uid].defer;\n\n            switch (orderStatus) {\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Dealer:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Requoted:\n                    defer.notify(_api, message.t);\n                    _logger.debug('OrderRequest ExecutionReport (\"' + uid + '\") with status (\"' + orderStatus + '\") is pending...', _logSource);\n                    break;\n\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Working:\n                    defer.resolve(_api, message.t);\n                    finished = true;\n                    break;\n\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Cancelled:\n                    // If this is a response to a CANCEL order request, then this is not a failure...\n                    var orderRequestType = request[ETX.clientAPI.Constants.messages.OrderRequest.OrderRequestType];\n                    if (ETX.clientAPI.Constants.messages.OrderRequest.OrderRequestType_Cancel === orderRequestType) {\n                        defer.resolve(_api, message.t);\n                    } else {\n                        defer.reject(_api, message.t);\n                    }\n                    finished = true;\n                    break;\n\n                default:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Filled:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Stopped:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Rejected:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Expired:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_PriceReject:\n                    defer.reject(_api, message.t);\n                    finished = true;\n                    break;\n            }\n\n            // Are we finsihed with this report?\n            if (finished) {\n                // Remove deferred object...\n                delete _mappedDeferredObjs.orderRequest[uid];\n                _logger.debug('OrderRequest ExecutionReport (\"' + uid + '\") with status (\"' + orderStatus + '\") is complete', _logSource);\n            }\n        }\n\n\n        // Old code\n        // #region\n        // Get the UID from the message\n        //var uid = message.t[ETX.clientAPI.Constants.messages.ExecutionReport.UniqueClientIdentifier];\n\n        //// Do we have anyone waiting for this execution report?\n        //if (_mappedCallbacks.executionReport.hasOwnProperty(uid)) {\n        //    // Fire callback\n        //    fireCallbacks(_mappedCallbacks.executionReport[uid], message.t);\n\n        //    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus)) {\n        //        var bFinished = false;\n        //        switch (message.t[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus]) {\n\n        //            case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Working:\n        //            case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Dealer:\n        //                bFinished = false;\n        //                break;\n\n        //            case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Filled:\n        //            case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Cancelled:\n        //            case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Stopped:\n        //            case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Rejected:\n        //            case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Expired:\n        //            case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_PriceReject:\n        //                bFinished = true;\n        //                break;\n        //        }\n\n        //        // Are we finsihed with this report?\n        //        if (bFinished) {\n        //            // Remove callback\n        //            //_mappedCallbacks.executionReport[uid].empty();\n        //        }\n        //    }\n        //}\n        // #endregion\n        // Old code\n    }\n\n    function handleMsgTypeGroupMarketsUpdate(message) {\n        _logger.debug('Handling messsage GroupMarketsUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Fire callbacks registered for (high-level) group market updates...\n        fireCallbacks(_mappedSubscriptions.groupMarkets.callbacks.$any, message);\n\n        // Do we have a specific group market subscription?\n        var groupID = message.t[ETX.clientAPI.Constants.messages.GroupMarkets.GroupID];\n        if (_helpers.compare.isIdentifier(groupID)) {\n            // Check that we have subscriptions for this group market (to prevent memory leaks)\n            if ((_mappedSubscriptions.groupMarkets.subscriptionCounts.hasOwnProperty(groupID)) &&\n                (_mappedSubscriptions.groupMarkets.subscriptionCounts[groupID] > 0)) {\n                // Update the cache\n                if (_mappedSubscriptions.groupMarkets.cache.hasOwnProperty(groupID) === false) {\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.GroupMarkets.Deleted)) {\n                        return; // If this has the delete flag, ignore\n                    }\n\n                    // Add this group market to the cache\n                    _mappedSubscriptions.groupMarkets.cache[groupID] = message.t;\n                    _logger.debug('Added new GroupMarket ' + groupID, _logSource);\n                } else {\n                    // If this has the delete flag, remove from the cache\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.GroupMarkets.Deleted)) {\n                        delete _mappedSubscriptions.groupMarkets.cache[groupID];\n                        _logger.debug('Deleted existing GroupMarket ' + groupID, _logSource);\n                    } else {\n                        // Update the cache with these tags\n                        var cachedGrpMkts = _mappedSubscriptions.groupMarkets.cache[groupID];\n                        for (var k in message.t) {\n                            if (k !== ETX.clientAPI.Constants.messages.GroupMarkets.MarketsArray) {\n                                cachedGrpMkts[k] = message.t[k];\n                            } else {\n                                // We cannot blindly copy the fields, we have to check each action type...\n                                var cachedGrpMkts = cachedGrpMkts[k],\n                                    modifiedGrpMkts = message.t[ETX.clientAPI.Constants.messages.GroupMarkets.MarketsArray];\n                                if ($.isArray(modifiedGrpMkts)) {\n                                    for (var i in modifiedGrpMkts) {\n                                        var modifiedGrpMkt = modifiedGrpMkts[i];\n                                        if (modifiedGrpMkt) {\n                                            var action = modifiedGrpMkt[ETX.clientAPI.Constants.messages.GroupMarkets.MarketsArray_Object.Action];\n                                            switch (action) {\n                                                case ETX.clientAPI.Constants.messages.GroupMarkets.MarketsArray_Object.Action_Added:\n                                                    // Add new market to cached array...\n                                                    cachedGrpMkts.push(modifiedGrpMkt);\n                                                    break;\n\n                                                case ETX.clientAPI.Constants.messages.GroupMarkets.MarketsArray_Object.Action_Updated:\n                                                case ETX.clientAPI.Constants.messages.GroupMarkets.MarketsArray_Object.Action_Deleted:\n                                                    // Find the existing market within cached array...\n                                                    var modifiedGrpMktID = modifiedGrpMkt[ETX.clientAPI.Constants.messages.GroupMarkets.MarketsArray_Object.MarketID];\n                                                    for (var j in cachedGrpMkts) {\n                                                        var cachedGrpMkt = cachedGrpMkts[j],\n                                                            cachedGrpMktID = cachedGrpMkt[ETX.clientAPI.Constants.messages.GroupMarkets.MarketsArray_Object.MarketID];\n                                                        if (cachedGrpMktID === modifiedGrpMktID) {\n                                                            // Found it...\n                                                            if (action === ETX.clientAPI.Constants.messages.GroupMarkets.MarketsArray_Object.Action_Updated) {\n                                                                // Update the cached market's tags...\n                                                                for (var p in modifiedGrpMkt) {\n                                                                    cachedGrpMkt[p] = modifiedGrpMkt[p];\n                                                                }\n                                                            }\n                                                            if (action === ETX.clientAPI.Constants.messages.GroupMarkets.MarketsArray_Object.Action_Deleted) {\n                                                                // Delete existing market from array...\n                                                                cachedGrpMkts.splice(j, 1);\n                                                            }\n                                                            break;\n                                                        }\n                                                    }\n                                                    break;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    _logger.debug('Updated existing GroupMarket ' + groupID, _logSource);\n                }\n                // Do we have any subscriptions to this market?\n                if (_mappedSubscriptions.groupMarkets.callbacks.hasOwnProperty(groupID)) {\n                    fireCallbacks(_mappedSubscriptions.groupMarkets.callbacks[groupID], message.t);\n                }\n            }\n        }\n    }\n\n    function handleMsgTypeGroupSearchResponse(message) {\n        _logger.debug('Handling messsage GroupSearchResponse (\"' + message.T + '\")...', _logSource);\n\n        // Get the UID from the message\n        var uid = message.t[ETX.clientAPI.Constants.messages.GroupSearchResponse.UniqueClientIdentifier];\n\n        // Do we have anyone waiting for this search result?\n        if (_mappedDeferredObjs.groupSearch.hasOwnProperty(uid)) {\n            // Get deferred object...\n            var defer = _mappedDeferredObjs.groupSearch[uid];\n\n            // Remove deferred object...\n            delete _mappedDeferredObjs.groupSearch[uid];\n\n            // Resolve deferred object...\n            defer.resolve(_api, message.t);\n\n            _logger.debug('GroupSearchResponse (\"' + uid + '\") is complete', _logSource);\n        }\n    }\n\n    function handleMsgTypeHistoricTradeUpdate(message) {\n        _logger.debug('Handling messsage HistoricTradeUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Check that we are subscribed to historic trades (to prevent memory leaks)\n        if (_subscriptions.historicTrades.subscribed === true) {\n            // Update cache\n            var tradeID = message.t[ETX.clientAPI.Constants.messages.HistoricTrade.TradeID];\n            if (_helpers.compare.isIdentifier(tradeID)) {\n                if (trade === undefined) {\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.HistoricTrade.Deleted)) {\n                        return; // If this has the delete flag, ignore\n                    }\n                    // Add this historic trade to the cache\n                    _subscriptions.historicTrades.cache[tradeID] = message.t;\n                    _logger.debug('Added new HistoricTrade ' + tradeID, _logSource);\n                } else {\n                    // If this has the delete flag, remove from the cache\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.HistoricTrade.Deleted)) {\n                        delete _subscriptions.historicTrades.cache[trade];\n                        _logger.debug('Deleted existing HistoricTrade ' + tradeID, _logSource);\n                    } else {\n                        // Update the fields in the cache\n                        var trade = _subscriptions.historicTrades.cache[tradeID];\n                        for (var k in message.t) {\n                            trade[k] = message.t[k];\n                        }\n                        _logger.debug('Updated existing HistoricTrade ' + tradeID, _logSource);\n                    }\n                }\n\n                // Fire callbacks\n                fireCallbacks(_subscriptions.historicTrades.callbacks, message.t);\n            }\n        }\n    }\n\n    function handleMsgTypeLogOffResponse(message) {\n        _logger.debug('ClientAPI : Handling messsage LogOffResponse (\"' + message.T + '\")...', _logSource);\n        destroySession();\n        fireCallbacks(_callbacks.logOnLogOff, [false, message.t]);\n        fireCallbacks(_callbacks.logOff, message.t);\n    }\n\n    function handleMsgTypeLogOnResponse(message) {\n        _logger.debug('Handling messsage handleMsgTypeLogOnResponse (\"' + message.T + '\")...', _logSource);\n\n        // If we have a logon timeout timer, cancel that too\n        if (_logOnTimeoutTimer) { clearTimeout(_logOnTimeoutTimer); }\n\n        // If we have some subscriptions (i.e. we've been connected before) then we should send the \n        // requests to the server to stay sync'd\n        var resubscribesSent = false;\n\n        for (var msgType in _subscriptions) {\n            var msgSubscription = _subscriptions[msgType];\n            if (msgSubscription) {\n                if (msgSubscription.subscribed) {\n                    _logger.debug('Resubscribing to pre-existing \"' + msgType + '\" subscriptions...', _logSource);\n                    send(msgSubscription.subscriptionMessageBuilder());\n                    resubscribesSent = true;\n                }\n            }\n        }\n\n        for (var msgType in _mappedSubscriptions) {\n            var msgMappedSubscription = _mappedSubscriptions[msgType];\n            if (msgMappedSubscription) {\n                if (msgMappedSubscription.subscriptionCounts) {\n                    var subscriptionKeys = [];\n                    for (var subscriptionKey in msgMappedSubscription.subscriptionCounts) {\n                        subscriptionKeys.push(subscriptionKey);\n                    }\n                    if (subscriptionKeys.length > 0) {\n                        _logger.debug('Resubscribing to pre-existing \"' + msgType + '\" subscriptions for ' + subscriptionKeys + '...', _logSource);\n                        send(msgMappedSubscription.subscriptionMessageBuilder(subscriptionKeys));\n                        resubscribesSent = true;\n                    }\n                }\n            }\n        }\n\n        // If we didnt have any subscriptions to reattach to, then send up the onLogon event\n        if (resubscribesSent === false || _forceLogOnOffEvent) {\n            fireCallbacks(_callbacks.logOnLogOff, [true, message.t]);\n            fireCallbacks(_callbacks.logOn, message.t);\n        }\n    }\n\n    function handleMsgTypeMarketSearchResponse(message) {\n        _logger.debug('Handling messsage MarketSearchResponse (\"' + message.T + '\")...', _logSource);\n\n        // Get the UID from the message\n        var uid = message.t[ETX.clientAPI.Constants.messages.MarketSearchResponse.UniqueClientIdentifier];\n\n        // Do we have anyone waiting for this search result?\n        if (_mappedDeferredObjs.marketSearch.hasOwnProperty(uid)) {\n            // Get deferred object...\n            var defer = _mappedDeferredObjs.marketSearch[uid];\n\n            // Remove deferred object...\n            delete _mappedDeferredObjs.marketSearch[uid];\n\n            // Resolve deferred object...\n            defer.resolve(_api, message.t);\n\n            _logger.debug('MarketSearchResponse (\"' + uid + '\") is complete', _logSource);\n        }\n    }\n\n    function handleMsgTypeMarketUpdate(message) {\n        _logger.debug('Handling messsage MarketUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Fire callbacks registered for (high-level) market updates...\n        fireCallbacks(_mappedSubscriptions.markets.callbacks.$any, message);\n\n        // Do we have a specific market subscription?\n        var marketID = message.t[ETX.clientAPI.Constants.messages.Market.MarketID];\n        if (_helpers.compare.isIdentifier(marketID)) {\n            // Check that we have subscriptions for this market (to prevent memory leaks)\n            if ((_mappedSubscriptions.markets.subscriptionCounts.hasOwnProperty(marketID)) &&\n                (_mappedSubscriptions.markets.subscriptionCounts[marketID] > 0)) {\n                // Update the cache\n                if (_mappedSubscriptions.markets.cache.hasOwnProperty(marketID) === false) {\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.Market.Deleted)) {\n                        return; // If this has the delete flag, ignore\n                    }\n                    // Add this exchange rate to the cache\n                    _mappedSubscriptions.markets.cache[marketID] = message.t;\n                    _logger.debug('Added new Market ' + marketID, _logSource);\n                } else {\n                    // If this has the delete flag, remove from the cache\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.Market.Deleted)) {\n                        delete _mappedSubscriptions.markets.cache[currencyPair];\n                        _logger.debug('Deleted existing Market ' + marketID, _logSource);\n                    } else {\n                        // Update the cache with these tags\n                        var cacheMarket = _mappedSubscriptions.markets.cache[marketID];\n                        for (var k in message.t) {\n                            cacheMarket[k] = message.t[k];\n                        }\n                        _logger.debug('Updated existing Market ' + marketID, _logSource);\n                    }\n                }\n                // Do we have any subscriptions to this market?\n                if (_mappedSubscriptions.markets.callbacks.hasOwnProperty(marketID)) {\n                    fireCallbacks(_mappedSubscriptions.markets.callbacks[marketID], message.t);\n                }\n            }\n        }\n    }\n\n    function handleMsgTypeOpenTradeUpdate(message) {\n        _logger.debug('Handling messsage OpenTradeUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Check that we are subscribed to open trades (to prevent memory leaks)\n        if (_subscriptions.openTrades.subscribed === true) {\n            // Update cache\n            var tradeID = message.t[ETX.clientAPI.Constants.messages.OpenTrade.TradeID];\n            if (_helpers.compare.isIdentifier(tradeID)) {\n                if (_subscriptions.openTrades.cache.hasOwnProperty(tradeID) === false) {\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.OpenTrade.Deleted)) {\n                        return; // If this has the delete flag, ignore\n                    }\n                    // Add this open trade to the cache\n                    _subscriptions.openTrades.cache[tradeID] = message.t;\n                    _logger.debug('Added new OpenTrade ' + tradeID, _logSource);\n                } else {\n                    // If this has the delete flag, remove from the cache\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.OpenTrade.Deleted)) {\n                        delete _subscriptions.openTrades.cache[tradeID];\n                        _logger.debug('Deleted existing OpenTrade ' + tradeID, _logSource);\n                    } else {\n                        // Update the fields in the cache\n                        var trade = _subscriptions.openTrades.cache[tradeID];\n                        for (var k in message.t) {\n                            trade[k] = message.t[k];\n                        }\n                        _logger.debug('Updated existing OpenTrade ' + tradeID, _logSource);\n                    }\n                }\n\n                // Fire callbacks\n                fireCallbacks(_subscriptions.openTrades.callbacks, message.t);\n            }\n        }\n    }\n\n    function handleMsgTypePortfolioRequestResponse(message) {\n        _logger.debug('Handling messsage PortfolioRequestResponse (\"' + message.T + '\")...', _logSource);\n\n        // Get the UID from the message\n        var uid = message.t[ETX.clientAPI.Constants.messages.PortfolioRequest.UniqueClientIdentifier];\n\n        // Do we have anyone waiting for this search result?\n        if (_mappedDeferredObjs.portfolioRequest.hasOwnProperty(uid)) {\n            // Get deferred object...\n            var defer = _mappedDeferredObjs.portfolioRequest[uid];\n\n            // Remove deferred object...\n            delete _mappedDeferredObjs.portfolioRequest[uid];\n\n            // Resolve deferred object...\n            defer.resolve(_api, message.t);\n\n            _logger.debug('PortfolioRequestResponse (\"' + uid + '\") is complete', _logSource);\n        }\n    }\n\n    function handleMsgTypePortfolioUpdate(message) {\n        _logger.debug('Handling messsage PortfolioUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Fire callbacks registered for (high-level) portfolio updates\n        fireCallbacks(_mappedSubscriptions.portfolios.callbacks.$any, message);\n\n        // Do we have a specific portfolio subscription?\n        var portfolioID = message.t[ETX.clientAPI.Constants.messages.Portfolio.PortfolioID];\n        if (_helpers.compare.isIdentifier(portfolioID)) {\n            // Check that we have subscriptions for this portfolio (to prevent memory leaks)\n            if ((_mappedSubscriptions.portfolios.subscriptionCounts.hasOwnProperty(portfolioID)) &&\n                (_mappedSubscriptions.portfolios.subscriptionCounts[portfolioID] > 0)) {\n                // Update the cache\n                if (_mappedSubscriptions.portfolios.cache.hasOwnProperty(portfolioID) === false) {\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.Portfolio.Deleted)) {\n                        return; // If this has the delete flag, ignore\n                    }\n                    // Add this exchange rate to the cache\n                    _mappedSubscriptions.portfolios.cache[portfolioID] = message.t;\n                    _logger.debug('Added new Portfolio ' + portfolioID, _logSource);\n                } else {\n                    // If this has the delete flag, remove from the cache\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.Portfolio.Deleted)) {\n                        delete _mappedSubscriptions.portfolios.cache[portfolioID];\n                        _logger.debug('Deleted existing Portfolio ' + portfolioID, _logSource);\n                    } else {\n                        // Update the cache with these tags\n                        var cachedPortfoliosMkts = _mappedSubscriptions.portfolios.cache[portfolioID];\n                        for (var k in message.t) {\n                            if (k !== ETX.clientAPI.Constants.messages.Portfolio.MarketsArray) {\n                                cachedPortfoliosMkts[k] = message.t[k];\n                            } else {\n                                // We cannot blindly copy the fields, we have to check each action type\n                                var cachedPortfoliosMkts = cachedPortfoliosMkts[k],\n                                    modifiedPortfolioMkts = message.t[ETX.clientAPI.Constants.messages.Portfolio.MarketsArray];\n                                if ($.isArray(modifiedPortfolioMkts)) {\n                                    for (var i in modifiedPortfolioMkts) {\n                                        var modifiedPortfolioMkt = modifiedPortfolioMkts[i];\n                                        if (modifiedPortfolioMkt) {\n                                            var action = modifiedPortfolioMkt[ETX.clientAPI.Constants.messages.Portfolio.MarketsArray_Object.Action];\n                                            switch (action) {\n                                                case ETX.clientAPI.Constants.messages.Portfolio.MarketsArray_Object.Action_Added:\n                                                    // Add new market to cached array\n                                                    if (modifiedPortfolioMkts.indexOf(modifiedPortfolioMkt) == -1) {\n                                                        modifiedPortfolioMkts.push(modifiedPortfolioMkt);\n                                                    }\n                                                    break;\n\n                                                case ETX.clientAPI.Constants.messages.Portfolio.MarketsArray_Object.Action_Updated:\n                                                case ETX.clientAPI.Constants.messages.Portfolio.MarketsArray_Object.Action_Deleted:\n                                                    // Find the existing market within cached array\n                                                    var modifiedPortfolioMktID = modifiedPortfolioMkt[ETX.clientAPI.Constants.messages.Portfolio.MarketsArray_Object.MarketID];\n                                                    for (var j in cachedPortfoliosMkts) {\n                                                        var cachedPortfolioMkt = cachedPortfoliosMkts[j],\n                                                            cachedPortfolioMktID = cachedPortfolioMkt[ETX.clientAPI.Constants.messages.Portfolio.MarketsArray_Object.MarketID];\n                                                        if (cachedPortfolioMktID === modifiedPortfolioMktID) {\n                                                            // Found it\n                                                            if (action === ETX.clientAPI.Constants.messages.Portfolio.MarketsArray_Object.Action_Updated) {\n                                                                // Update the cached market's tags\n                                                                for (var p in modifiedPortfolioMkt) {\n                                                                    cachedPortfolioMkt[p] = modifiedPortfolioMkt[p];\n                                                                }\n                                                            }\n                                                            if (action === ETX.clientAPI.Constants.messages.Portfolio.MarketsArray_Object.Action_Deleted) {\n                                                                // Delete existing market from array\n                                                                cachedPortfoliosMkts.splice(j, 1);\n                                                            }\n                                                            break;\n                                                        }\n                                                    }\n                                                    break;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        _logger.debug('Updated existing Portfolio ' + portfolioID, _logSource);\n                    }\n                }\n                // Do we have any subscriptions to this market?\n                if (_mappedSubscriptions.portfolios.callbacks.hasOwnProperty(portfolioID)) {\n                    fireCallbacks(_mappedSubscriptions.portfolios.callbacks[portfolioID], message.t);\n                }\n            }\n        }\n    }\n\n    function handleMsgTypePriceAlertResponse(message) {\n        _logger.debug('Handling messsage PriceAlertResponse (\"' + message.T + '\")...', _logSource);\n\n        // Get the UID from the message\n        var uid = message.t[ETX.clientAPI.Constants.messages.PriceAlertResponse.UniqueClientIdentifier],\n            result = message.t[ETX.clientAPI.Constants.messages.PriceAlertResponse.Result],\n            defer;\n\n        if (_mappedDeferredObjs.priceAlertRequest.hasOwnProperty(uid)) {\n            defer = _mappedDeferredObjs.priceAlertRequest[uid];\n\n            switch (result) {\n                case ETX.clientAPI.Constants.messages.PriceAlertResponse.Result_Success:\n                    defer.resolve(_api, message.t);\n                    break;\n\n                default:\n                case ETX.clientAPI.Constants.messages.PriceAlertResponse.Result_Failure:\n                    defer.reject(_api, message.t);\n                    break;\n            }\n\n            // Remove deferred object...\n            delete _mappedDeferredObjs.priceAlertRequest[uid];\n\n            _logger.debug('PriceAlertResponse (\"' + uid + '\") with result (\"' +result + '\") is complete', _logSource);\n        }\n    }\n\n    function handleMsgTypePriceAlertUpdate(message) {\n        _logger.debug('Handling messsage PriceAlertUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Check that we are subscribed to price alerts (to prevent memory leaks)\n        if (_subscriptions.priceAlerts.subscribed === true) {\n            // Update cache\n            var alertID = message.t[ETX.clientAPI.Constants.messages.PriceAlert.AlertID];\n            if (_helpers.compare.isIdentifier(alertID)) {\n                if (_subscriptions.priceAlerts.cache.hasOwnProperty(alertID) === false) {\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.PriceAlert.Deleted)) {\n                        return; // If this has the delete flag, ignore\n                    }\n                    // Add this price alert to the cache\n                    _subscriptions.priceAlerts.cache[alertID] = message.t;\n                    _logger.debug('Added new PriceAlert ' + alertID, _logSource);\n                } else {\n                    // If this has the delete flag, remove from the cache\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.PriceAlert.Deleted)) {\n                        delete _subscriptions.priceAlerts.cache[alertID];\n                        _logger.debug('Deleted existing PriceAlert ' + alertID, _logSource);\n                    } else {\n                        // Update the fields in the cache\n                        var priceAlert = _subscriptions.priceAlerts.cache[alertID];\n                        for (var k in message.t) {\n                            priceAlert[k] = message.t[k];\n                        }\n                        _logger.debug('Updated existing PriceAlert ' + alertID, _logSource);\n                    }\n                }\n\n                // Fire callbacks\n                fireCallbacks(_subscriptions.priceAlerts.callbacks, message.t);\n            }\n        }\n    }\n\n    function handleMsgTypeProcessedOrderUpdate(message) {\n        _logger.debug('Handling messsage ProcessedOrderUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Check that we are subscribed to processed orders (to prevent memory leaks)\n        if (_subscriptions.processedOrders.subscribed === true) {\n            // Update cache\n            var orderID = message.t[ETX.clientAPI.Constants.messages.ProcessedOrder.OrderID];\n            if (_helpers.compare.isIdentifier(orderID)) {\n                if (_subscriptions.processedOrders.cache.hasOwnProperty(orderID) === false) {\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.ProcessedOrder.Deleted)) {\n                        return; // If this has the delete flag, ignore\n                    }\n                    // Add this processed order to the cache\n                    _subscriptions.processedOrders.cache[orderID] = message.t;\n                    _logger.debug('Added new ProcessedOrder ' + orderID, _logSource);\n                } else {\n                    // If this has the delete flag, remove from the cache\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.ProcessedOrder.Deleted)) {\n                        delete _subscriptions.processedOrders.cache[orderID];\n                        _logger.debug('Deleted existing ProcessedOrder ' + orderID, _logSource);\n                    } else {\n                        // Update the fields in the cache\n                        var order = _subscriptions.processedOrders.cache[orderID];\n                        for (var k in message.t) {\n                            order[k] = message.t[k];\n                        }\n                        _logger.debug('Updated existing ProcessedOrder ' + orderID, _logSource);\n                    }\n                }\n\n                // Fire callbacks\n                fireCallbacks(_subscriptions.processedOrders.callbacks, message.t);\n            }\n        }\n    }\n\n    function handleMsgTypeSubAccountUpdate(message) {\n        _logger.debug('Handling messsage SubAccountUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Check that we are subscribed to client accounts (to prevent memory leaks)\n        if (_subscriptions.account.subscribed === true) {\n            if (_subscriptions.account.cache) {\n                // Find the client account in the cache\n                var account = _subscriptions.account.cache;\n                if (account) {\n                    if (account.hasOwnProperty(ETX.clientAPI.Constants.messages.Account.SubAccountArray)) {\n                        // Find the sub-account in the account cache and update it\n                        var accountID = (message.t[ETX.clientAPI.Constants.messages.SubAccount.AccountID] || account[ETX.clientAPI.Constants.messages.Account.AccountID]),\n                            subAccountID = message.t[ETX.clientAPI.Constants.messages.SubAccount.SubAccountID],\n                            deletedSubAccount = (message.t[ETX.clientAPI.Constants.messages.SubAccount.Deleted] === true),\n                            subAccountArray = account[ETX.clientAPI.Constants.messages.Account.SubAccountArray],\n                            subAccount;\n\n                        for (var i = 0; i < subAccountArray.length; i++) {\n                            if (subAccountArray[i].hasOwnProperty(ETX.clientAPI.Constants.messages.SubAccount.SubAccountID)) {\n                                if (subAccountArray[i][ETX.clientAPI.Constants.messages.SubAccount.SubAccountID] === subAccountID) {\n                                    // We've found the cached sub-account\n                                    subAccount = subAccountArray[i];\n                                    if (deletedSubAccount) {\n                                        // If this has the delete flag, remove from the cache\n                                        subAccountArray.splice(i, 1);\n                                        _logger.debug('Deleted existing SubAccount ' + subAccountID + ' for Account ' + accountID, _logSource);\n                                    } else {\n                                        // Update it\n                                        for (var k in message.t) {\n                                            subAccount[k] = message.t[k];\n                                        }\n                                        _logger.debug('Updated existing SubAccount ' + subAccountID + ' for Account ' + accountID, _logSource);\n                                    }\n                                    break;\n                                }\n                            }\n                        }\n\n                        // If we've not found it, so update it if its not a deletion\n                        if (subAccount === undefined) {\n                            if (deletedSubAccount === false) {\n                                subAccountArray.push(message.t);\n                                _logger.debug('Added new SubAccount ' + subAccountID + ' for Account ' + accountID, _logSource);\n                            }\n                        }\n                    }\n\n                    // Create a (minimal) account object to wrap the subaccount update\n                    var updateTags = {};\n                    updateTags[ETX.clientAPI.Constants.messages.Account.AccountID] = accountID;\n                    updateTags[ETX.clientAPI.Constants.messages.Account.SubAccountArray] = [message.t];\n\n                    // Fire callbacks\n                    fireCallbacks(_subscriptions.account.callbacks, updateTags);\n                }\n            }\n        }\n    }\n\n    function handleMsgTypeTradeQuoteResponse(message) {\n        _logger.debug('Handling messsage TradeQuoteResponse (\"' + message.T + '\")...', _logSource);\n\n        // Get the UID from the message\n        var uid = message.t[ETX.clientAPI.Constants.messages.TradeQuoteResponse.UniqueClientIdentifier],\n            quoteStatus = message.t[ETX.clientAPI.Constants.messages.TradeQuoteResponse.QuoteStatus],\n            defer,\n            finished = false;\n\n        // Check if this execution report is for a trade request\n        if (_mappedDeferredObjs.tradeQuoteRequest.hasOwnProperty(uid)) {\n            defer = _mappedDeferredObjs.tradeQuoteRequest[uid];\n\n            switch (quoteStatus) {\n                default:\n                case ETX.clientAPI.Constants.messages.TradeQuoteResponse.QuoteStatus_DealerClaim:\n                    defer.notify(_api, message.t);\n                    _logger.debug('TradeQuoteResponse (\"' + uid + '\") with quote status (\"' + quoteStatus + '\") is pending...', _logSource);\n                    break;\n\n                case ETX.clientAPI.Constants.messages.TradeQuoteResponse.QuoteStatus_DealerQuoted:\n                    defer.resolve(_api, message.t);\n                    finished = true;\n                    break;\n\n                case ETX.clientAPI.Constants.messages.TradeQuoteResponse.QuoteStatus_DealerReject:\n                case ETX.clientAPI.Constants.messages.TradeQuoteResponse.QuoteStatus_Timeout:\n                    defer.reject(_api, message.t);\n                    finished = true;\n                    break;\n            }\n\n            // Are we finsihed with this report?\n            if (finished) {\n                // Remove deferred object...\n                delete _mappedDeferredObjs.tradeQuoteRequest[uid];\n                _logger.debug('TradeQuoteResponse (\"' + uid + '\") with quote status (\"' + quoteStatus + '\") is complete', _logSource);\n            }\n        }\n    }\n\n    function handleMsgTypeUserSettingsResponse(message) {\n        _logger.debug('Handling messsage UserSettingsResponse (\"' + message.T + '\")...', _logSource);\n\n        // Get the UID from the message\n        var uid = message.t[ETX.clientAPI.Constants.messages.UserSettingsResponse.UniqueClientIdentifier];\n\n        // Do we have anyone waiting for this search result?\n        if (_mappedDeferredObjs.userSettingsRequest.hasOwnProperty(uid)) {\n            // Get deferred object...\n            var defer = _mappedDeferredObjs.userSettingsRequest[uid],\n                result = message.t[ETX.clientAPI.Constants.messages.UserSettingsResponse.Result];\n\n            // Remove deferred object...\n            delete _mappedDeferredObjs.userSettingsRequest[uid];\n\n            switch (result) {\n                case ETX.clientAPI.Constants.messages.UserSettingsResponse.Result_Success:\n                    // Resolve deferred object...\n                    defer.resolve(_api, message.t);\n                    break;\n\n                default:\n                case ETX.clientAPI.Constants.messages.UserSettingsResponse.Result_Failure:\n                    // Reject deferred object...\n                    defer.reject(_api, message.t);\n                    break;\n            }\n\n            _logger.debug('UserSettingsResponse (\"' + uid + '\") with result (\"' + result + '\") is complete', _logSource);\n        }\n    }\n\n    function handleMsgTypeWorkingOrderUpdate(message) {\n        // Check that we are subscribed to working orders (to prevent memory leaks)\n        if (_subscriptions.workingOrders.subscribed === true) {\n            // Update cache\n            var orderID = message.t[ETX.clientAPI.Constants.messages.WorkingOrder.OrderID];\n            var order = _subscriptions.workingOrders.cache[orderID];\n            if (order === undefined) {\n                // Add this working order to the cache\n                _subscriptions.workingOrders.cache[orderID] = message.t;\n            } else {\n                // If this has the delete flag, remove from the cache\n                if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.WorkingOrder.Deleted)) {\n                    delete _subscriptions.workingOrders.cache[orderID];\n                } else {\n                    // Update the fields in the cache\n                    for (var k in message.t) {\n                        order[k] = message.t[k];\n                    }\n                }\n            }\n\n            // Fire callbacks\n            fireCallbacks(_subscriptions.workingOrders.callbacks, message.t);\n        }\n    }\n\n    /**\n     * Indicates whether an authenticated session has established with the server and is currently active.\n     *\n     * @method isConnected\n     * @returns {Boolean} - If true, indicates that an active session is established with the server.\n     */\n    function isConnected() {\n        return (_session && _session.isConnected());\n    }\n\n    /**\n     * Stops any session currently established with the server.\n     *\n     * @method logOff\n     * @returns {void}\n     */\n    function logOff() {\n        // Clear all (session specific) deferred objects...\n        for (var requestType in _mappedDeferredObjs) {\n            _mappedDeferredObjs[requestType] = {};\n        }\n\n        if (_session) {\n            if (_session.isConnected()) {\n                _logger.debug('Logging off...', _logSource);\n\n                // Create and send logOff message...\n                var msg = ETX.clientAPI.Messages.createLogOffMessage();\n                send(msg);\n\n                _session.stop();\n\n                raiseLogOffEvent(ETX.clientAPI.Constants.messages.LogOffResponse.ReasonCode_UserLoggedOut, 'Log off requested');\n            }\n\n            destroySession();\n        }\n    }\n\n    /**\n     * Attempts to establish a session with the Client API server and log on with the credentials provided. \n     * \n     * @method logOn\n     * @param {String} username - Client account username.\n     * @param {String} password - Client account password.\n     * @param {String} [brokerID] - (Optional) Broker unique identifier for client account.\n     * @returns {void}\n     */\n    function logOn(username, password, brokerID) {\n        _logger.debug('Logging on (with credentials)...', _logSource);\n        start(username, password, brokerID, '', '');\n    }\n\n    /* Attempts to establish a session with the Client API server and log on with the authentication key provided. \n    * \n    * @method logOnWithAuthKey\n    * @param {String} username - Client account username.\n    * @param {String} authenticationKey - Unique server generated authentication key.\n    * @param {String} [brokerID] - (Optional) Broker unique identifier for client account.\n    * @returns {void}\n     */\n    function logOnWithAuthKey(username, authenticationKey, brokerID) {\n        _logger.debug('Logging on (with authentication Key)...', _logSource);\n        start(username,'' , brokerID, '', authenticationKey);\n    }\n\n    /**\n     * Attempts to establish a session with the Client API server and anonymously log on with the anonymity token provided.   \n     * \n     * @method logOnAnonymously\n     * @param {String} anonymityToken - Unique client generated anonymity token.\n     * @returns {void}\n     */\n    function logOnAnonymously(anonymityToken) {\n        _logger.debug('Logging on (anonymously)...', _logSource);\n        start('', '', '', anonymityToken,'');\n    }\n\n    function onConnect(session, event) {\n        if (_session) {\n            _logger.debug('Connection established, logging on...', _logSource);\n\n            // Create and send logon message...\n            var msg = ETX.clientAPI.Messages.createLogOnMessage(_username, _passwordHash, _brokerID, _anonymityToken, _api.version, _authenticationKey);\n            send(msg);\n\n            // Start the timer\n            _logOnTimeoutTimer = setTimeout(function () {\n                _session = undefined;\n\n                raiseLogOffEvent(ETX.clientAPI.Constants.messages.LogOffResponse.ReasonCode_TimedOut, 'Log on attempt to server timed out');\n            }, _logonTimeoutInterval);\n\n            // fire onConnect callback\n            fireCallbacks(_callbacks.connect);\n        }\n    }\n\n    function onDisconnect(session, message, event) {\n        clearLogOnTimeout();\n\n        fireCallbacks(_callbacks.disconnect, message);\n    }\n\n    function onError(session, errorMessage, errorData) {\n        fireCallbacks(_callbacks.errors, [errorMessage, errorData]);\n    }\n\n    function onMessage(session, message) {\n        var messageType = message.T;\n        var messageTags = message.t;\n\n        // Switch on mesage type\n        switch (messageType) {\n            case ETX.clientAPI.Constants.messages.Account.MessageType:\n                handleMsgTypeAccountUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.AccountTransaction.MessageType:\n                handleMsgTypeAccountTransactionUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.AggregateAccount.MessageType:\n                handleMsgTypeAggregateAccountUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.ClosedTrade.MessageType:\n                handleMsgTypeClosedTradeUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.Error.MessageType:\n                handleMsgTypeError(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.ExchangeRate.MessageType:\n                handleMsgTypeExchangeRateUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.ExecutionReport.MessageType:\n                handleMsgTypeExecutionReport(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.GroupMarkets.MessageType:\n                handleMsgTypeGroupMarketsUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.GroupSearchResponse.MessageType:\n                handleMsgTypeGroupSearchResponse(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.HistoricTrade.MessageType:\n                handleMsgTypeHistoricTradeUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.LogOffResponse.MessageType:\n                handleMsgTypeLogOffResponse(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.LogOnResponse.MessageType:\n                handleMsgTypeLogOnResponse(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.Market.MessageType:\n                handleMsgTypeMarketUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.MarketSearchResponse.MessageType:\n                handleMsgTypeMarketSearchResponse(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.OpenTrade.MessageType:\n                handleMsgTypeOpenTradeUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.Portfolio.MessageType:\n                handleMsgTypePortfolioUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.PriceAlert.MessageType:\n                handleMsgTypePriceAlertUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.PriceAlertResponse.MessageType:\n                handleMsgTypePriceAlertResponse(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.ProcessedOrder.MessageType:\n                handleMsgTypeProcessedOrderUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.SubAccount.MessageType:\n                handleMsgTypeSubAccountUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.TradeQuoteResponse.MessageType:\n                handleMsgTypeTradeQuoteResponse(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.UserSettingsResponse.MessageType:\n                handleMsgTypeUserSettingsResponse(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.WorkingOrder.MessageType:\n                handleMsgTypeWorkingOrderUpdate(message);\n                break;\n\n            default:\n                _logger.warning('Unhandled messsage (\"' + messageType + '\") | ' + JSON.stringify(message), _logSource);\n                break;\n        }\n    }\n\n    function onQoS(session, ttl) {\n        fireCallbacks(_callbacks.QoS, ttl);\n    }\n\n    /**\n     * Overwrites the current user settings for the account on the server with the settings provided.\n     *\n     * @method overwriteUserSettings\n     * @param {Object} userSettings - Array of Objects, each containing the user setting properties defined in `ETX.clientAPI.Constants.messages.UserSettingsRequest.UserSettingsArray_Object`.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function overwriteUserSettings(userSettings) {\n        // Generate unique client identifier...\n        var uid = ETX.clientAPI.Messages.generateUniqueClientIdentifier(ETX.clientAPI.Constants.messages.UserSettingsRequest.MessageType),\n            defer = new $.Deferred(),\n            promise = defer.promise();\n\n        if (_session) {\n            _logger.debug('Sending (overwrite) UserSettingsRequest  (\"' + uid + '\")...', _logSource);\n\n            _mappedDeferredObjs.userSettingsRequest[uid] = defer;\n\n            var msg = ETX.clientAPI.Messages.createUserSettingsRequestMessage(\n                uid, ETX.clientAPI.Constants.messages.UserSettingsRequest.UserSettingsRequestType_Overwrite, userSettings);\n            send(msg);\n        } else {\n            defer.reject(_api, 'No session');\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n\n    function raiseLogOffEvent(reasonCode, reasonText) {\n        // Spoof log off response message...\n        var message = {\n            T: ETX.clientAPI.Constants.messages.LogOffResponse.MessageType,\n            t: {}\n        };\n        message.t[ETX.clientAPI.Constants.messages.LogOffResponse.ReasonCode] = reasonCode;\n        message.t[ETX.clientAPI.Constants.messages.LogOffResponse.Text] = reasonText;\n        handleMsgTypeLogOffResponse(message);\n    }\n\n    /**\n     * Registers a callback handler to be invoked whenever the session connects to the server.\n     *\n     * @method registerForConnect\n     * @param {Function} callback - The callback handler to register for invocation whenever the session connects to the server.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function registerForConnect(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.connect.has(callback) === false) {\n                _callbacks.connect.add(callback);\n                _logger.debug('Registered for connect', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Registers a callback handler to be invoked whenever the session disconnects from the server.\n     *\n     * @method registerForDisconnect\n     * @param {Function} callback - The callback handler to register for invocation whenever the session disconnects from the server.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function registerForDisconnect(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.disconnect.has(callback) === false) {\n                _callbacks.disconnect.add(callback);\n                _logger.debug('Registered for disconnect', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Registers a callback handler to be invoked whenever an internal/server error is published.\n     *\n     * @method registerForErrors\n     * @param {Function} callback - The callback handler to register for invocation whenever an internal/server error is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {String} callback.errorMessage - Error message.\n     * @param {Object|Array|Error} [callback.errorData] - (Optional) Additional error data to accompany the error message.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function registerForErrors(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.errors.has(callback) === false) {\n                _callbacks.errors.add(callback);\n                _logger.debug('Registered for errors', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Registers a callback handler to be invoked whenever the account logged off from the session.   \n     * ***NOTE: This will NOT be invoked during `close()` or `destroy()`.***\n     *\n     * @method registerForLogOff\n     * @param {Function} callback - The callback handler to register for invocation whenever a session log off is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.logOffResponse - Object containing the log off details.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function registerForLogOff(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.logOff.has(callback) === false) {\n                _callbacks.logOff.add(callback);\n                _logger.debug('Registered for log off', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Registers a callback handler to be invoked whenever the account logs onto the session.    \n     * ***NOTE: This will NOT be invoked during `close()` or `destroy()`.***\n     *\n     * @method registerForLogOn\n     * @param {Function} callback - The callback handler to register for invocation whenever a session log on is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.logOnResponse - Object containing the log on details.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function registerForLogOn(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.logOn.has(callback) === false) {\n                _callbacks.logOn.add(callback);\n                _logger.debug('Registered for log on', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Registers a callback handler to be invoked whenever the account logs on/off the session.    \n     * ***NOTE: This will NOT be invoked during `close()` or `destroy()`.***\n     *\n     * @method registerForLogOnLogOff\n     * @param {Function} callback - The callback handler to register for invocation whenever a session log on/off is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Boolean} callback.loggedOn - If true, indicates a logged in session, else indicates the session is logged off.\n     * @param {Object} callback.logOnResponseOrLogOffResponse - Object containing the log on/off details.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function registerForLogOnLogOff(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.logOnLogOff.has(callback) === false) {\n                _callbacks.logOnLogOff.add(callback);\n                _logger.debug('Registered for log on/off', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Registers a callback handler to be invoked whenever any market updates are published.    \n     * ***NOTE: This will NOT subscribe to market updates.***\n     *\n     * @method registerForMarketUpdates\n     * @param {Function} callback - The callback handler to register for invocation whenever a market update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.market - Object containing the published market/market prices data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function registerForMarketUpdates(callback) {\n        if ($.isFunction(callback)) {\n            if (_mappedSubscriptions.markets.callbacks.$any.has(callback) === false) {\n                _mappedSubscriptions.markets.callbacks.$any.add(callback);\n                _logger.debug('Registered for (greedy) market updates', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Registers a callback handler to be invoked whenever a response to a polled quality-of-service (QoS) request \n     * is received from the server.\n     *\n     * @method registerForQoS\n     * @param {Function} callback - The callback handler to register for invocation whenever a server QoS response is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Number} callback.ttl - Total number of milliseconds it has taken for the server to respond to a QoS request.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function registerForQoS(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.QoS.has(callback) === false) {\n                _callbacks.QoS.add(callback);\n                _logger.debug('Registered for QoS', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Removes market from the given porfolio\n     *\n     * @method removeMarketFromPortfolio\n     * @param {String} [portfolioID] - Unique identifier of the portfolio.\n     * @param {String} [marketID] - Unique identifier of the market.\n     */\n    function removeMarketFromPortfolio(portfolioID, marketID) {\n        if (_session) {\n            _logger.debug('Sending PortfolioRemoveMarket request...', _logSource);\n\n            var msg = ETX.clientAPI.Messages.createPortfolioRemoveMarketMessage(portfolioID, marketID);\n            send(msg);\n        } \n    }\n\n    /**\n     * Accepts or declines place a pending trade at the re-quoted trade price.\n     *\n     * @method respondToTradeRequote\n     * @param {String} quoteID - Unique identifier of the re-quoted trade price to be accepted or declined.\n     * @param {Boolean} acceptRequote - If true, an attempt to place the pending trade at the re-quoted price will be done, else the re-quoted price will be declined and the pending trade cancelled.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function respondToTradeRequote(quoteID, acceptRequote) {\n        // Generate unique client identifier...\n        var uid = ETX.clientAPI.Messages.generateUniqueClientIdentifier(ETX.clientAPI.Constants.messages.TradeRequoteResponse.MessageType),\n            defer = new $.Deferred(),\n            promise = defer.promise();\n\n        if (_session) {\n            _logger.debug('Sending TradeRequoteResponse  (\"' + uid + '\")...', _logSource);\n\n            // Fire and forget...\n            var msg = ETX.clientAPI.Messages.createTradeRequoteResponseMessage(uid, quoteID, acceptRequote);\n            send(msg);\n            defer.resolve(_api, uid);\n        } else {\n            defer.reject(_api, 'No session');\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n\n    /**\n     * Requests portfolio markets for the given portfolio identifier\n     *\n     * @method requestPortfolio\n     * @param {String} [portfolioID] - Unique identifier of the portfolio.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    /*\n    function requestPortfolio(portfolioID) {\n        // Generate unique client identifier...\n        var uid = ETX.clientAPI.Messages.generateUniqueClientIdentifier(ETX.clientAPI.Constants.messages.PortfolioRequest.MessageType),\n            defer = new $.Deferred(),\n            promise = defer.promise();\n\n        if (_session) {\n            _logger.debug('Sending PortfolioRequest  (\"' + uid + '\")...', _logSource);\n\n            _mappedDeferredObjs.portfolioRequest[uid] = defer;\n\n            var msg = ETX.clientAPI.Messages.createPortfolioRequestMessage(uid, portfolioID);\n            send(msg);\n        } else {\n            defer.reject(_api, 'No session');\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n    */\n\n    /**\n     * Searches for groups matching the parent group identifier (if provided).\n     *\n     * @method searchGroups\n     * @param {String} [parentGroupID] - (Optional) Unique identifier of the parent group.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function searchGroups(parentGroupID) {\n        // Generate unique client identifier...\n        var uid = ETX.clientAPI.Messages.generateUniqueClientIdentifier(ETX.clientAPI.Constants.messages.GroupSearch.MessageType),\n            defer = new $.Deferred(),\n            promise = defer.promise();\n\n        if (_session) {\n            _logger.debug('Sending GroupSearch  (\"' + uid + '\")...', _logSource);\n\n            _mappedDeferredObjs.groupSearch[uid] = defer;\n\n            var msg = ETX.clientAPI.Messages.createGroupSearchMessage(uid, parentGroupID);\n            send(msg);\n        } else {\n            defer.reject(_api, 'No session');\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n\n    /**\n     * Searches for markets matching the search criteria (and constraint) provided.\n     *\n     * @method searchMarkets\n     * @param {String} searchTerm - Search term used when searching.\n     * @param {String} [searchConstraint] - (Optional) Search constraint defined in `ETX.clientAPI.Constants.messages.MarketSearch` to be applied when searching.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function searchMarkets(searchTerm, searchConstraint) {\n        // Generate unique client identifier...\n        var uid = ETX.clientAPI.Messages.generateUniqueClientIdentifier(ETX.clientAPI.Constants.messages.MarketSearch.MessageType),\n            defer = new $.Deferred(),\n            promise = defer.promise();\n\n        if (_session) {\n            _logger.debug('Sending MarketSearch  (\"' + uid + '\")...', _logSource);\n\n            _mappedDeferredObjs.marketSearch[uid] = defer;\n\n            var msg = ETX.clientAPI.Messages.createMarketSearchMessage(uid, searchTerm, searchConstraint);\n            send(msg);\n        } else {\n            defer.reject(_api, 'No session');\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n\n    /**\n     * Sends one (or more) JSON message(s) to the server.\n     *\n     * @method send\n     * @param {Object|String|Array} message - Single (or array of) JSON messages object(s) or string(s) to send.\n     * @returns {void}\n     */\n    function send(message) {\n        if (_session) {\n            if (message) {\n                if ($.isArray(message)) {\n                    var messages = message;\n                    for (var i = 0; i < messages.length; i++) {\n                        message = messages[i];\n                        if (message) {\n                            _session.send(message);\n                        }\n                    }\n                } else {\n                    _session.send(message);\n                }\n            }\n        }\n    }\n\n    /**\n     * Sends an order request JSON message to the server.\n     *\n     * @method sendOrderRequest\n     * @param {ETX.clientAPI.requests.OrderRequest} orderRequest - `ETX.clientAPI.requests.OrderRequest` object used to build the order request JSON message.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function sendOrderRequest(orderRequest) {\n        var defer = new $.Deferred(),\n            promise = defer.promise(),\n            execRpt = {};\n\n        if (_session) {\n            if (orderRequest) {\n                // Generate unique client identifier...\n                orderRequest.transactionTime = new Date().toISOString();\n                if (ETX.clientAPI.Helpers.compare.isIdentifier(orderRequest.uniqueClientIdentifier) == false) {\n                    orderRequest.uniqueClientIdentifier = ETX.clientAPI.Messages.buildUniqueClientIdentifier(ETX.clientAPI.Constants.messages.OrderRequest.MessageType, orderRequest.transactionTime);\n                }\n\n                _logger.debug('Sending OrderRequest  (\"' + orderRequest.uniqueClientIdentifier + '\")...', _logSource);\n\n                // Send the order request\n                var msg = ETX.clientAPI.Messages.createOrderRequestMessage(orderRequest.uniqueClientIdentifier, orderRequest.transactionTime, orderRequest);\n\n                _mappedDeferredObjs.orderRequest[orderRequest.uniqueClientIdentifier] = {\n                    request: msg,\n                    defer: defer\n                };\n\n                send(msg);\n            } else {\n                defer.reject(_api, (execRpt[ETX.clientAPI.Constants.messages.ExecutionReport.Text] = 'No order request'));\n            }\n        } else {\n            defer.reject(_api, (execRpt[ETX.clientAPI.Constants.messages.ExecutionReport.Text] = 'No session'));\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n\n    /**\n     * Sends an price alert request JSON message to the server.\n     *\n     * @method sendPriceAlertRequest\n     * @param {ETX.clientAPI.requests.PriceAlertRequest} priceAlertRequest - `ETX.clientAPI.requests.PriceAlertRequest` object used to build the price alert request JSON message.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function sendPriceAlertRequest(priceAlertRequest) {\n        var defer = new $.Deferred(),\n            promise = defer.promise(),\n            response = {};\n\n        if (_session) {\n            if (priceAlertRequest) {\n                // Generate unique client identifier...\n                priceAlertRequest.transactionTime = new Date().toISOString();\n                if (ETX.clientAPI.Helpers.compare.isIdentifier(priceAlertRequest.uniqueClientIdentifier) == false) {\n                    priceAlertRequest.uniqueClientIdentifier = ETX.clientAPI.Messages.buildUniqueClientIdentifier(ETX.clientAPI.Constants.messages.PriceAlertRequest.MessageType, priceAlertRequest.transactionTime);\n                }\n                _mappedDeferredObjs.priceAlertRequest[priceAlertRequest.uniqueClientIdentifier] = defer;\n\n                _logger.debug('Sending PriceAlertRequest  (\"' + priceAlertRequest.uniqueClientIdentifier + '\")...', _logSource);\n\n                // Send the price alert request\n                var msg = ETX.clientAPI.Messages.createPriceAlertRequestMessage(priceAlertRequest.uniqueClientIdentifier, priceAlertRequest.transactionTime, priceAlertRequest);\n                send(msg);\n            } else {\n                response[ETX.clientAPI.Constants.messages.PriceAlertResponse.Result] = ETX.clientAPI.Constants.messages.PriceAlertResponse.Result_Failure;\n                response[ETX.clientAPI.Constants.messages.PriceAlertResponse.Text] = 'No price alert request';\n                defer.reject(_api, response);\n            }\n        } else {\n            response[ETX.clientAPI.Constants.messages.PriceAlertResponse.Result] = ETX.clientAPI.Constants.messages.PriceAlertResponse.Result_Failure;\n            response[ETX.clientAPI.Constants.messages.PriceAlertResponse.Text] = 'No session';\n            defer.reject(_api, response);\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n\n    /**\n     * Sends an trade quote request JSON message to the server.\n     *\n     * @method sendTradeQuoteRequest\n     * @param {ETX.clientAPI.requests.TradeQuoteRequest} tradeQuoteRequest - `ETX.clientAPI.requests.TradeQuoteRequest` object used to build the trade quote request JSON message.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function sendTradeQuoteRequest(tradeQuoteRequest) {\n        // Generate unique client identifier...\n        var defer = new $.Deferred(),\n            promise = defer.promise(),\n            quoteRsp = {};\n\n        if (_session) {\n            if (tradeQuoteRequest) {\n                var uid = tradeQuoteRequest.uniqueClientIdentifier;\n                if (_mappedDeferredObjs.tradeQuoteRequest.hasOwnProperty(uid) === false) {\n                    _logger.debug('Sending TradeQuoteRequest  (\"' + uid + '\")...', _logSource);\n\n                    _mappedDeferredObjs.tradeQuoteRequest[uid] = defer;\n\n                    // Send the trade request\n                    var msg = ETX.clientAPI.Messages.createTradeQuoteRequestMessage(uid, tradeQuoteRequest.transactionTime, tradeQuoteRequest);\n                    send(msg);\n                } else {\n                    defer.reject(_api, (quoteRsp[ETX.clientAPI.Constants.messages.TradeQuoteResponse.Text] = 'Duplicate trade quote request ID ' + uid));\n                }\n            } else {\n                defer.reject(_api, (quoteRsp[ETX.clientAPI.Constants.messages.TradeQuoteResponse.Text] = 'No trade quote request'));\n            }\n        } else {\n            defer.reject(_api, (quoteRsp[ETX.clientAPI.Constants.messages.TradeQuoteResponse.Text] = 'No session'));\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n\n    /**\n     * Sends an trade request JSON message to the server.\n     *\n     * @method sendTradeRequest\n     * @param {ETX.clientAPI.requests.TradeRequest} tradeRequest - `ETX.clientAPI.requests.TradeRequest` object used to build the trade request JSON message.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function sendTradeRequest(tradeRequest) {\n        var defer = new $.Deferred(),\n            promise = defer.promise(),\n            execRpt = {};\n\n        if (_session) {\n            if (tradeRequest) {\n                // Generate unique client identifier...\n                tradeRequest.transactionTime = new Date().toISOString();\n                if (ETX.clientAPI.Helpers.compare.isIdentifier(tradeRequest.uniqueClientIdentifier) == false) {\n                    tradeRequest.uniqueClientIdentifier = ETX.clientAPI.Messages.buildUniqueClientIdentifier(ETX.clientAPI.Constants.messages.TradeRequest.MessageType, tradeRequest.transactionTime);\n                }\n\n                _logger.debug('Sending TradeRequest  (\"' + tradeRequest.uniqueClientIdentifier + '\")...', _logSource);\n\n                // Send the trade request\n                var msg = ETX.clientAPI.Messages.createTradeRequestMessage(tradeRequest.uniqueClientIdentifier, tradeRequest.transactionTime, tradeRequest);\n\n                _mappedDeferredObjs.tradeRequest[tradeRequest.uniqueClientIdentifier] = {\n                    request: msg,\n                    defer: defer\n                };\n\n                send(msg);\n            } else {\n                defer.reject(_api, (execRpt[ETX.clientAPI.Constants.messages.ExecutionReport.Text] = 'No trade request'));\n            }\n        } else {\n            defer.reject(_api, (execRpt[ETX.clientAPI.Constants.messages.ExecutionReport.Text] = 'No session'));\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n\n    /**\n     * Sets the root URL used to communicate with the Client API server using standard HTTP protocol.\n     *\n     * @method setWebAPIRootURL\n     * @param {String} webAPIRootURL - URL the Client API server is using to listen to HTTP requests (e.g. 'http://127.0.0.1:81/').\n     * @returns {void}\n     */\n    function setWebAPIRootURL(webAPIRootURL) {\n        _logger.debug('Set Web API root URL to \"' + webAPIRootURL + '\" (was \"' + _webAPIRootURL + '\")', _logSource);\n        _webAPIRootURL = webAPIRootURL;\n    }\n\n    /**\n     * Sets the root URL used to communicate with the Client API server using web sockets protocol over HTTP.\n     *\n     * @method setWebSocketRootURL\n     * @param {String} webSocketRootURL - URL the Client API server is using to listen to web socket requests (e.g. 'ws://127.0.0.1:82').\n     * @returns {void}\n     */\n    function setWebSocketRootURL(webSocketRootURL) {\n        _logger.debug('Set Web Socket root URL to \"' + webSocketRootURL + '\" (was \"' + _webSocketRootURL + '\")', _logSource);\n        _webSocketRootURL = webSocketRootURL;\n    }\n\n    function start(username, password, brokerID, anonymityToken, authenticationKey) {\n        // Stop current session, if one exists...\n        logOff();\n\n        // set the broker ID\n        if ((brokerID !== undefined) && (_brokerID !== brokerID)) {\n            _brokerID = brokerID || ETX.config.defaultBrokerID;\n        }\n\n        // we provide an anonymity token if we're logging in anonymously\n        if (anonymityToken) {\n            _anonymityToken = anonymityToken;\n\n            // set blank username & password\n            _username = '';\n            _passwordHash = '';\n        }\n        else {\n            // accept new login credentials, if provided...\n            if (username && (_username !== username)) {\n                _username = username;\n            }\n            if (password && (password !== '') && (_passwordHash !== password)) {\n                _passwordHash = password;\n            }\n\n            // is there an authentication key\n            if (authenticationKey && (_authenticationKey !== authenticationKey)) {\n                _authenticationKey = authenticationKey;\n            }\n        }\n        \n        if (_anonymityToken || (_username && _passwordHash) || (_username && _authenticationKey)) {\n            // Create and start a new session...\n            createSession();\n            if (_session) {\n                _session.start();\n            }\n        }\n    }\n\n    /**\n     * Subscribes to account (including sub-account) updates for the account with the server and registers \n     * a callback handler to be invoked whenever any account or sub-account updates are published.\n     *\n     * @method subscribeToAccount\n     * @param {Function} callback - The callback handler to register for invocation whenever an account or sub-account update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.account - Object containing the published account data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function subscribeToAccount(callback) {\n        // If anyone has asked for updates, add them to the collection\n        if ($.isFunction(callback)) {\n            if (_subscriptions.account.callbacks.has(callback) === false) {\n                _subscriptions.account.callbacks.add(callback);\n                _subscriptions.account.subscriptionCount += 1;\n                _logger.debug('Subscribed to account (Count = ' +_subscriptions.account.subscriptionCount + ')', _logSource);\n\n                // If we're not subscribed currently for the account, send message off\n                if (!_subscriptions.account.subscribed) {\n                    _logger.debug('Sending account subscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createAccountSubscribeMessage());\n                    _subscriptions.account.subscribed = true;\n                }\n\n                // If we have an account cached then send them out to the callback\n                if (_subscriptions.account.cache) {\n                    try {\n                        callback(_api, _subscriptions.account.cache);\n                    } catch (ex) {\n                        _logger.error('Error firing subscribeToAccount callback | Exception = ' + ex, _logSource, [ex, _subscriptions.account.cache]);\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to account transaction updates for the account with the server and registers \n     * a callback handler to be invoked whenever any account transaction updates are published.\n     *\n     * @method subscribeToAccountTransactions\n     * @param {Function} callback - The callback handler to register for invocation whenever an account transaction update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.accountTransaction - Object containing the published account transaction data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function subscribeToAccountTransactions(callback) {\n        // If anyone has asked for updates, add them to the collection\n        if ($.isFunction(callback)) {\n            if (_subscriptions.accountTransactions.callbacks.has(callback) === false) {\n                _subscriptions.accountTransactions.callbacks.add(callback);\n                _subscriptions.accountTransactions.subscriptionCount += 1;\n                _logger.debug('Subscribed to account transactions (Count = ' + _subscriptions.accountTransactions.subscriptionCount + ')', _logSource);\n\n                // If we're not subscribed currently for the account transaction, send message off\n                if (!_subscriptions.accountTransactions.subscribed) {\n                    _logger.debug('Sending account transactions subscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createAccountTransactionSubscribeMessage());\n                    _subscriptions.accountTransactions.subscribed = true;\n                }\n\n                // If we have any cached account transactions then send them out to the callback\n                for (var i in _subscriptions.accountTransactions.cache) {\n                    try {\n                        callback(_api, _subscriptions.account.cache[i]);\n                    } catch (ex) {\n                        _logger.error('Error firing subscribeToAccountTransactions callback | Exception = ' + ex, _logSource, [ex, _subscriptions.accountTransactions.cache[i]]);\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to aggregate account data with the server and registers a callback handler to be invoked whenever \n     * any aggregate account updates are published.\n     *\n     * @method subscribeToAggregateAccount\n     * @param {Array|String} subAccountIDs - Array of (or an individual) sub-account IDs.\n     * @param {Function} callback - The callback handler to register for invocation whenever an aggregate account update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function subscribeToAggregateAccounts(subAccountIDs, callback) {\n        var subAccountIDsToSendSubscriptionsFor = [],\n            registeredCallbackCount = 0;\n        if ($.isFunction(callback)) {\n            if ($.isArray(subAccountIDs) === false) {\n                subAccountIDs = [subAccountIDs];\n            }\n            for (var i = 0; i < subAccountIDs.length; i++) {\n                var subAccountID = (subAccountIDs[i] || '');\n                if (_helpers.compare.isIdentifier(subAccountID)) {\n                    if (_mappedSubscriptions.aggregateAccounts.callbacks.hasOwnProperty(subAccountID) === false) {\n                        _mappedSubscriptions.aggregateAccounts.callbacks[subAccountID] = $.Callbacks('unique');\n                    }\n                    if (_mappedSubscriptions.aggregateAccounts.callbacks[subAccountID].has(callback) === false) {\n                        _mappedSubscriptions.aggregateAccounts.callbacks[subAccountID].add(callback);\n                        registeredCallbackCount += 1;\n\n                        // If we aren't already subscribed, send off subscription message and add this currency pair to \n                        // our list of subscribed currency pairs\n                        if (_mappedSubscriptions.aggregateAccounts.subscriptionCounts.hasOwnProperty(subAccountID) === false) {\n                            _mappedSubscriptions.aggregateAccounts.subscriptionCounts[subAccountID] = 1;\n                            // Add this aggregate account to list that we'll ask for subscriptions for\n                            subAccountIDsToSendSubscriptionsFor.push(subAccountID);\n                            _logger.debug('Subscribed to aggregate account ' + subAccountID + ' (Count = ' + _mappedSubscriptions.aggregateAccounts.subscriptionCounts[subAccountID] + ')', _logSource);\n                        } else {\n                            _mappedSubscriptions.aggregateAccounts.subscriptionCounts[subAccountID] += 1;\n                            _logger.debug('Subscribed to aggregate account ' + subAccountID + ' (Count = ' + _mappedSubscriptions.aggregateAccounts.subscriptionCounts[subAccountID] + ')', _logSource);\n                            // If we have a cache of this aggregate account, return what we have at the moment\n                            if (_mappedSubscriptions.aggregateAccounts.cache.hasOwnProperty(subAccountID)) {\n                                try {\n                                    callback(_api, _mappedSubscriptions.aggregateAccounts.cache[subAccountID]);\n                                } catch (ex) {\n                                    _logger.error('Error firing subscribeToAggregateAccounts callback | Exception = ' + ex, _logSource, [ex, _mappedSubscriptions.aggregateAccounts.cache[subAccountID]]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // If any aggregate account need to be subscribed to\n            if (subAccountIDsToSendSubscriptionsFor.length > 0) {\n                _logger.debug('Sending aggregate accounts subscribe request(s) for ' + subAccountIDsToSendSubscriptionsFor, _logSource);\n                send(ETX.clientAPI.Messages.createAggregateAccountSubscribeMessage(subAccountIDsToSendSubscriptionsFor));\n            }\n\n            if (registeredCallbackCount === subAccountIDs.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to closed trade updates for the account with the server and registers \n     * a callback handler to be invoked whenever any closed trade updates are published.\n     *\n     * @method subscribeToClosedTrades\n     * @param {Function} callback - The callback handler to register for invocation whenever an closed trade update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.closedTrade - Object containing the published closed trade data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function subscribeToClosedTrades(callback) {\n        // If anyone has asked for updates, add them to the collection\n        if ($.isFunction(callback)) {\n            if (_subscriptions.closedTrades.callbacks.has(callback) === false) {\n                _subscriptions.closedTrades.callbacks.add(callback);\n                _subscriptions.closedTrades.subscriptionCount += 1;\n                _logger.debug('Subscribed to closed trades (Count = ' + _subscriptions.closedTrades.subscriptionCount + ')', _logSource);\n\n                // If we're not subscribed currently for closed trades, send message off\n                if (!_subscriptions.closedTrades.subscribed) {\n                    _logger.debug('Sending closed trades subscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createClosedTradesSubscribeMessage());\n                    _subscriptions.closedTrades.subscribed = true;\n                }\n\n                // If we have any cached closed trades then send them out to the callback\n                for (var i in _subscriptions.closedTrades.cache) {\n                    try {\n                        callback(_api, _subscriptions.closedTrades.cache[i]);\n                    } catch (ex) {\n                        _logger.error('Error firing subscribeToClosedTrades callback | Exception = ' + ex, _logSource, [ex, _subscriptions.closedTrades.cache[i]]);\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to specific currency pair exchange rate updates with the server and registers a callback \n     * handler to be invoked whenever any updates for those specific currency pair's exchange rates are published.\n     *\n     * @method subscribeToExchangeRates\n     * @param {Array|String} currencyPairs - Array of (or an individual) currency pairs.\n     * @param {Function} callback - The callback handler to register for invocation whenever a currency pair's exchange rate update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.exchangeRate - Object containing the published currency pair exchange price data.\n     * @returns {Boolean} - If true, indicates that all callback handlers were successfully registered.\n     */\n    function subscribeToExchangeRates(currencyPairs, callback) {\n        var currencyPairsToSendSubscriptionsFor = [],\n            registeredCallbackCount = 0;\n        if ($.isFunction(callback)) {\n            if ($.isArray(currencyPairs) === false) {\n                currencyPairs = [currencyPairs];\n            }\n            for (var i = 0; i < currencyPairs.length; i++) {\n                var currencyPair = (currencyPairs[i] || '').toUpperCase();\n                if (currencyPair && currencyPair.length === 6) {\n                    if (_mappedSubscriptions.exchangeRates.callbacks.hasOwnProperty(currencyPair) === false) {\n                        _mappedSubscriptions.exchangeRates.callbacks[currencyPair] = $.Callbacks('unique');\n                    }\n                    if (_mappedSubscriptions.exchangeRates.callbacks[currencyPair].has(callback) === false) {\n                        _mappedSubscriptions.exchangeRates.callbacks[currencyPair].add(callback);\n                        registeredCallbackCount += 1;\n\n                        // If we aren't already subscribed, send off subscription message and add this currency pair to \n                        // our list of subscribed currency pairs\n                        if (_mappedSubscriptions.exchangeRates.subscriptionCounts.hasOwnProperty(currencyPair) === false) {\n                            _mappedSubscriptions.exchangeRates.subscriptionCounts[currencyPair] = 1;\n                            // Add this exchange rate to list that we'll ask for subscriptions for\n                            currencyPairsToSendSubscriptionsFor.push(currencyPair);\n                            _logger.debug('Subscribed to exchange rate ' + currencyPair + ' (Count = ' + _mappedSubscriptions.exchangeRates.subscriptionCounts[currencyPair] + ')', _logSource);\n                        } else {\n                            _mappedSubscriptions.exchangeRates.subscriptionCounts[currencyPair]+= 1;\n                            _logger.debug('Subscribed to exchange rate ' + currencyPair + ' (Count = ' + _mappedSubscriptions.exchangeRates.subscriptionCounts[currencyPair] + ')', _logSource);\n                            // If we have a cache of this exchange rate, return what we have at the moment\n                            if (_mappedSubscriptions.exchangeRates.cache.hasOwnProperty(currencyPair)) {\n                                try {\n                                    callback(_api, _mappedSubscriptions.exchangeRates.cache[currencyPair]);\n                                } catch (ex) {\n                                    _logger.error('Error firing subscribeToCurrencyPairs callback | Exception = ' + ex, _logSource, [ex, _mappedSubscriptions.exchangeRates.cache[currencyPair]]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // If any exchange rate need to be subscribed to\n            if (currencyPairsToSendSubscriptionsFor.length > 0) {\n                _logger.debug('Sending exchange rates subscribe request(s) for ' + currencyPairsToSendSubscriptionsFor , _logSource);\n                send(ETX.clientAPI.Messages.createExchangeRateSubscribeMessage(currencyPairsToSendSubscriptionsFor));\n            }\n\n            if (registeredCallbackCount === currencyPairs.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to specific group market updates for the account with the server and registers a callback \n     * handler to be invoked whenever any updates for those specific group markets are published.\n     *\n     * @method subscribeToGroupMarkets\n     * @param {Array|String} groupIDs - Array of (or an individual) unqiue group identifiers.\n     * @param {Function} callback - The callback handler to register for invocation whenever a group market update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.groupMarkets - Object containing the published group markets data.\n     * @returns {Boolean} - If true, indicates that all callback handlers were successfully registered.\n     */\n    function subscribeToGroupMarkets(groupIDs, callback) {\n        var groupMarketsToSendSubscriptionsFor = [],\n            registeredCallbackCount = 0;\n        if ($.isFunction(callback)) {\n            if ($.isArray(groupIDs) === false) {\n                groupIDs = [groupIDs];\n            }\n            for (var i = 0; i < groupIDs.length; i++) {\n                var groupID = groupIDs[i];\n                if (groupID) {\n                    if (_mappedSubscriptions.groupMarkets.callbacks.hasOwnProperty(groupID) === false) {\n                        _mappedSubscriptions.groupMarkets.callbacks[groupID] = $.Callbacks('unique');\n                    }\n                    if (_mappedSubscriptions.groupMarkets.callbacks[groupID].has(callback) === false) {\n                        _mappedSubscriptions.groupMarkets.callbacks[groupID].add(callback);\n                        registeredCallbackCount += 1;\n\n                        // If we aren't already subscribed, send off subscription message and add this group ID to \n                        // our list of subscribed group markets\n                        if (_mappedSubscriptions.groupMarkets.subscriptionCounts.hasOwnProperty(groupID) === false) {\n                            _mappedSubscriptions.groupMarkets.subscriptionCounts[groupID] = 1;\n                            // Add this group ID to list that we'll ask for subscriptions for\n                            groupMarketsToSendSubscriptionsFor.push(groupID);\n                            _logger.debug('Subscribed to group markets for group ' + groupID + ' (Count = ' + _mappedSubscriptions.groupMarkets.subscriptionCounts[groupID] + ')', _logSource);\n                        } else {\n                            _mappedSubscriptions.groupMarkets.subscriptionCounts[groupID] += 1;\n                            _logger.debug('Subscribed to group markets for group ' + groupID + ' (Count = ' + _mappedSubscriptions.groupMarkets.subscriptionCounts[groupID] + ')', _logSource);\n                            // If we have a cache of this group market, return what we have at the moment\n                            if (_mappedSubscriptions.groupMarkets.cache.hasOwnProperty(groupID)) {\n                                try {\n                                    callback(_api, _mappedSubscriptions.groupMarkets.cache[groupID]);\n                                } catch (ex) {\n                                    _logger.error('Error firing subscribeToGroupMarkets callback | Exception = ' + ex, _logSource, [ex, _mappedSubscriptions.groupMarkets.cache[groupID]]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // If any group markets need to be subscribed to\n            if (groupMarketsToSendSubscriptionsFor.length > 0) {\n                _logger.debug('Sending group markets subscribe request(s) for group(s) ' + groupMarketsToSendSubscriptionsFor, _logSource);\n                send(ETX.clientAPI.Messages.createGroupMarketSubscribeMessage(groupMarketsToSendSubscriptionsFor));\n            }\n\n            if (registeredCallbackCount === groupIDs.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to historic trade updates for the account with the server and registers \n     * a callback handler to be invoked whenever any historic trade updates are published.\n     *\n     * @method subscribeToHistoricTrades\n     * @param {Function} callback - The callback handler to register for invocation whenever an historic trade update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.historicTrade - Object containing the published historic trade data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function subscribeToHistoricTrades(callback) {\n        // If anyone has asked for updates, add them to the collection\n        if ($.isFunction(callback)) {\n            if (_subscriptions.historicTrades.callbacks.has(callback) === false) {\n                _subscriptions.historicTrades.callbacks.add(callback);\n                _subscriptions.historicTrades.subscriptionCount += 1;\n                _logger.debug('Subscribed to historic trades (Count = ' + _subscriptions.historicTrades.subscriptionCount + ')', _logSource);\n\n                // If we're not subscribed currently for historic trades, send message off\n                if (!_subscriptions.historicTrades.subscribed) {\n                    _logger.debug('Sending historic trades subscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createHistoricTradesSubscribeMessage());\n                    _subscriptions.historicTrades.subscribed = true;\n                }\n\n                // If we have any cached historic trades then send them out to the callback\n                for (var i in _subscriptions.historicTrades.cache) {\n                    try {\n                        callback(_api, _subscriptions.historicTrades.cache[i]);\n                    } catch (ex) {\n                        _logger.error('Error firing subscribeToHistoricTrades callback | Exception = ' + ex, _logSource, [ex, _subscriptions.historicTrades.cache[i]]);\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to specific market updates for the account with the server and registers a callback \n     * handler to be invoked whenever any updates for those specific markets are published.\n     *\n     * @method subscribeToMarkets\n     * @param {Array|String} marketIDs - Array of (or an individual) market IDs.\n     * @param {Function} callback - The callback handler to register for invocation whenever a market update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.market - Object containing the published market/market prices data.\n     * @returns {Boolean} - If true, indicates that all callback handlers were successfully registered.\n     */\n    function subscribeToMarkets(marketIDs, callback) {\n        var marketsToSendSubscriptionsFor = [],\n            registeredCallbackCount = 0;\n        if ($.isFunction(callback)) {\n            if ($.isArray(marketIDs) === false) {\n                marketIDs = [marketIDs];\n            }\n            for (var i = 0; i < marketIDs.length; i++) {\n                var marketID = marketIDs[i];\n                if (marketID) {\n                    if (_mappedSubscriptions.markets.callbacks.hasOwnProperty(marketID) === false) {\n                        _mappedSubscriptions.markets.callbacks[marketID] = $.Callbacks('unique');\n                    }\n                    if (_mappedSubscriptions.markets.callbacks[marketID].has(callback) === false) {\n                        _mappedSubscriptions.markets.callbacks[marketID].add(callback);\n                        registeredCallbackCount += 1;\n\n                        // If we aren't already subscribed, send off subscription message and add this market to \n                        // our list of subscribed markets\n                        if (_mappedSubscriptions.markets.subscriptionCounts.hasOwnProperty(marketID) === false) {\n                            _mappedSubscriptions.markets.subscriptionCounts[marketID] = 1;\n                            // Add this market to list that we'll ask for subscriptions for\n                            marketsToSendSubscriptionsFor.push(marketID);\n                            _logger.debug('Subscribed to market ' + marketID + ' (Count = ' + _mappedSubscriptions.markets.subscriptionCounts[marketID] + ')', _logSource);\n                        } else {\n                            _mappedSubscriptions.markets.subscriptionCounts[marketID] += 1;\n                            _logger.debug('Subscribed to market ' + marketID + ' (Count = ' + _mappedSubscriptions.markets.subscriptionCounts[marketID] + ')', _logSource);\n                            // If we have a cache of this market, return what we have at the moment\n                            if (_mappedSubscriptions.markets.cache.hasOwnProperty(marketID)) {\n                                try {\n                                    callback(_api, _mappedSubscriptions.markets.cache[marketID]);\n                                } catch (ex) {\n                                    _logger.error('Error firing subscribeToMarkets callback | Exception = ' + ex, _logSource, [ex, _mappedSubscriptions.markets.cache[marketID]]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            // If any markets need to be subscribed to\n            if (marketsToSendSubscriptionsFor.length > 0) {\n                _logger.debug('Sending market subscribe request(s) for ' + marketsToSendSubscriptionsFor, _logSource);\n                send(ETX.clientAPI.Messages.createMarketSubscribeMessage(marketsToSendSubscriptionsFor));\n            }\n            if (registeredCallbackCount === marketIDs.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to open trade updates for the account with the server and registers \n     * a callback handler to be invoked whenever any open trade updates are published.\n     *\n     * @method subscribeToOpenTrades\n     * @param {Function} callback - The callback handler to register for invocation whenever an open trade update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.openTrade - Object containing the published open trade data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function subscribeToOpenTrades(callback) {\n        // If anyone has asked for updates, add them to the collection\n        if ($.isFunction(callback)) {\n            if (_subscriptions.openTrades.callbacks.has(callback) === false) {\n                _subscriptions.openTrades.callbacks.add(callback);\n                _subscriptions.openTrades.subscriptionCount += 1;\n                _logger.debug('Subscribed to open trades (Count = ' + _subscriptions.openTrades.subscriptionCount + ')', _logSource);\n\n                // If we're not subscribed currently for open trades, send message off\n                if (!_subscriptions.openTrades.subscribed) {\n                    _logger.debug('Sending open trades subscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createOpenTradesSubscribeMessage());\n                    _subscriptions.openTrades.subscribed = true;\n                }\n\n                // If we have any cached open trades then send them out to the callback\n                for (var i in _subscriptions.openTrades.cache) {\n                    try {\n                        callback(_api, _subscriptions.openTrades.cache[i]);\n                    } catch (ex) {\n                        _logger.error('Error firing subscribeToOpenTrades callback | Exception = ' + ex, _logSource, [ex, _subscriptions.openTrades.cache[i]]);\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to specific portfolio market updates for the account with the server and registers a callback \n     * handler to be invoked whenever any updates for those specific portfolio markets are published.\n     *\n     * @method subscribeToPortfolios\n     * @param {Array|String} portfolioIDs - Array of (or an individual) unique portfolio identifiers.\n     * @param {Function} callback - The callback handler to register for invocation whenever a portfolio market update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.portfolios - Object containing the published portfolio markets data.\n     * @returns {Boolean} - If true, indicates that all callback handlers were successfully registered.\n     */\n    function subscribeToPortfolios(portfolioIDs, callback) {\n        var portfoliosToSendSubscriptionsFor = [],\n            registeredCallbackCount = 0;\n        if ($.isFunction(callback)) {\n            if ($.isArray(portfolioIDs) === false) {\n                portfolioIDs = [portfolioIDs];\n            }\n            for (var i = 0; i < portfolioIDs.length; i++) {\n                var portfolioID = portfolioIDs[i];\n                if (portfolioID) {\n                    if (!_mappedSubscriptions.portfolios.callbacks.hasOwnProperty(portfolioID)) {\n                        _mappedSubscriptions.portfolios.callbacks[portfolioID] = $.Callbacks('unique');\n                    }\n                    if (_mappedSubscriptions.portfolios.callbacks[portfolioID].has(callback) === false) {\n                        _mappedSubscriptions.portfolios.callbacks[portfolioID].add(callback);\n                        registeredCallbackCount += 1;\n\n                        // If we aren't already subscribed, send off subscription message and add this portfolio ID to \n                        // our list of subscribed portfolio markets\n                        if (!_mappedSubscriptions.portfolios.subscriptionCounts.hasOwnProperty(portfolioID)) {\n                            _mappedSubscriptions.portfolios.subscriptionCounts[portfolioID] = 1;\n                            // Add this portfolio ID to list that we'll ask for subscriptions for\n                            portfoliosToSendSubscriptionsFor.push(portfolioID);\n                            _logger.debug('Subscribed to portfolio markets for portfolio ' + portfolioID + ' (Count = ' + _mappedSubscriptions.portfolios.subscriptionCounts[portfolioID] + ')', _logSource);\n                        } else {\n                            _mappedSubscriptions.portfolios.subscriptionCounts[portfolioID] += 1;\n                            _logger.debug('Subscribed to portfolio markets for portfolio ' + portfolioID + ' (Count = ' + _mappedSubscriptions.portfolios.subscriptionCounts[portfolioID] + ')', _logSource);\n                            // If we have a cache of this portfolio, return what we have at the moment\n                            if (_mappedSubscriptions.portfolios.cache.hasOwnProperty(portfolioID)) {\n                                try {\n                                    callback(_api, _mappedSubscriptions.portfolios.cache[portfolioID]);\n                                } catch (ex) {\n                                    _logger.error('Error firing subscribeToPortfolios callback | Exception = ' + ex, _logSource, [ex, _mappedSubscriptions.portfolios.cache[portfolioID]]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // If any portfolios need to be subscribed to\n            if (portfoliosToSendSubscriptionsFor.length > 0) {\n                _logger.debug('Sending portfolio markets subscribe request(s) for portfolio(s) ' + portfoliosToSendSubscriptionsFor, _logSource);\n                send(ETX.clientAPI.Messages.createPortfolioSubscribeMessage(portfoliosToSendSubscriptionsFor));\n            }\n\n            if (registeredCallbackCount === portfolioIDs.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to price alert updates for the account with the server and registers \n     * a callback handler to be invoked whenever any price alert updates are published.\n     *\n     * @method subscribeToPriceAlerts\n     * @param {Function} callback - The callback handler to register for invocation whenever a price alert update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.priceAlert - Object containing the published price alert data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function subscribeToPriceAlerts(callback) {\n        // If anyone has asked for updates, add them to the collection\n        if ($.isFunction(callback)) {\n            if (_subscriptions.priceAlerts.callbacks.has(callback) === false) {\n                _subscriptions.priceAlerts.callbacks.add(callback);\n                _subscriptions.priceAlerts.subscriptionCount += 1;\n                _logger.debug('Subscribed to price alerts (Count = ' + _subscriptions.priceAlerts.subscriptionCount + ')', _logSource);\n\n                // If we're not subscribed currently for the price alert, send message off\n                if (!_subscriptions.priceAlerts.subscribed) {\n                    _logger.debug('Sending price alerts subscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createPriceAlertsSubscribeMessage());\n                    _subscriptions.priceAlerts.subscribed = true;\n                }\n\n                // If we have any cached price alerts then send them out to the callback\n                for (var i in _subscriptions.priceAlerts.cache) {\n                    try {\n                        callback(_api, _subscriptions.priceAlerts.cache[i]);\n                    } catch (ex) {\n                        _logger.error('Error firing subscribeToPriceAlerts callback | Exception = ' + ex, _logSource, [ex, _subscriptions.priceAlerts.cache[i]]);\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to processed (executed/cancelled) order updates for the account with the server and registers \n     * a callback handler to be invoked whenever any processed order updates are published.\n     *\n     * @method subscribeToProcessedOrders\n     * @param {Function} callback - The callback handler to register for invocation whenever a processed order update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.processedOrder - Object containing the published processed order data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function subscribeToProcessedOrders(callback) {\n        // If anyone has asked for updates, add them to the collection\n        if ($.isFunction(callback)) {\n            if (_subscriptions.processedOrders.callbacks.has(callback) === false) {\n                _subscriptions.processedOrders.callbacks.add(callback);\n                _subscriptions.processedOrders.subscriptionCount += 1;\n                _logger.debug('Subscribed to processed orders (Count = ' + _subscriptions.processedOrders.subscriptionCount + ')', _logSource);\n\n                // If we're not subscribed currently for the processed orders, send message off\n                if (!_subscriptions.processedOrders.subscribed) {\n                    _logger.debug('Sending processed orders subscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createProcessedOrdersSubscribeMessage());\n                    _subscriptions.processedOrders.subscribed = true;\n                }\n\n                // If we have any cached processed orders then send them out to the callback\n                for (var i in _subscriptions.processedOrders.cache) {\n                    try {\n                        callback(_api, _subscriptions.processedOrders.cache[i]);\n                    } catch (ex) {\n                        _logger.error('Error firing subscribeToProcessedOrders callback | Exception = ' + ex, _logSource, [ex, _subscriptions.processedOrders.cache[i]]);\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to working order updates for the account with the server and registers \n     * a callback handler to be invoked whenever any working order updates are published.\n     *\n     * @method subscribeToWorkingOrders\n     * @param {Function} callback - The callback handler to register for invocation whenever a working order update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.workingOrder - Object containing the published working order data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function subscribeToWorkingOrders(callback) {\n        // If anyone has asked for updates, add them to the collection\n        if ($.isFunction(callback)) {\n            if (_subscriptions.workingOrders.callbacks.has(callback) === false) {\n                _subscriptions.workingOrders.callbacks.add(callback);\n                _subscriptions.workingOrders.subscriptionCount += 1;\n                _logger.debug('Subscribed to working orders (Count = ' + _subscriptions.workingOrders.subscriptionCount + ')', _logSource);\n\n                // If we're not subscribed currently for working alerts, send message off\n                if (!_subscriptions.workingOrders.subscribed) {\n                    _logger.debug('Sending working orders subscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createWorkingOrdersSubscribeMessage());\n                    _subscriptions.workingOrders.subscribed = true;\n                }\n\n                // If we have any cached orders then send them out to the callback\n                for (var i in _subscriptions.workingOrders.cache) {\n                    try {\n                        callback(_api, _subscriptions.workingOrders.cache[i]);\n                    } catch (ex) {\n                        _logger.error('Error firing subscribeToWorkingOrders callback | Exception = ' + ex, _logSource, [ex, _subscriptions.workingOrders.cache[i]]);\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unregisters a callback handler, which has already been registered for Connect events received from the server.\n     *\n     * @method unregisterForConnect\n     * @param {Function} callback - The callback handler to register for invocation whenever a Connect event is raised.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unregisterForConnect(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.connect.has(callback)) {\n                _callbacks.connect.remove(callback);\n                _logger.debug('Unregistered for connect', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unregisters a callback handler, which has already been registered for Disconnect events received from the server.\n     *\n     * @method unregisterForDisconnect\n     * @param {Function} callback - The callback handler to register for invocation whenever a Disconnect event is raised.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unregisterForDisconnect(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.disconnect.has(callback)) {\n                _callbacks.disconnect.remove(callback);\n                _logger.debug('Unregistered for disconnect', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unregisters a callback handler, which has already been registered for an internal/server errors.   \n     * ***NOTE: This will NOT be invoked during `close()` or `destroy()`.***\n     *\n     * @method unregisterForErrors\n     * @param {Function} callback - The callback handler to register for invocation whenever an internal/server error is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {String} callback.errorMessage - Error message.\n     * @param {Object|Array} [callback.errorData] - (Optional) Additional error data to accompany the error message.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unregisterForErrors(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.errors.has(callback)) {\n                _callbacks.errors.remove(callback);\n                _logger.debug('Unregistered for errors', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unregisters a callback handler, which has already been registered for session log offs.   \n     * ***NOTE: This will NOT be invoked during `close()` or `destroy()`.***\n     *\n     * @method unregisterForLogOff\n     * @param {Function} callback - The callback handler to register for invocation whenever a session log off is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.logOffResponse - Object containing the log off details.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unregisterForLogOff(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.logOff.has(callback)) {\n                _callbacks.logOff.remove(callback);\n                _logger.debug('Unregistered for log off', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unregisters a callback handler, which has already been registered for session log ons.   \n     * ***NOTE: This will NOT be invoked during `close()` or `destroy()`.***\n     *\n     * @method unregisterForLogOn\n     * @param {Function} callback - The callback handler to register for invocation whenever a session log on is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.logOnResponse - Object containing the log on details.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unregisterForLogOn(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.logOn.has(callback)) {\n                _callbacks.logOn.remove(callback);\n                _logger.debug('Unregistered for log on', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unregisters a callback handler, which has already been registered for session log ons/offs.   \n     * ***NOTE: This will NOT be invoked during `close()` or `destroy()`.***\n     *\n     * @method unregisterForLogOnLogOff\n     * @param {Function} callback - The callback handler to register for invocation whenever a session log on/off is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Boolean} callback.success - If true, indicates a successful session log on, else indicates a session log off.\n     * @param {Object} callback.logOnOffResponse - Object containing the log on/off details.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unregisterForLogOnLogOff(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.logOnLogOff.has(callback)) {\n                _callbacks.logOnLogOff.remove(callback);\n                _logger.debug('Unregistered for log on/off', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unregisters a callback handler, which has already been registered for market updates.    \n     * ***NOTE: This will NOT unsubscribe to market updates.***\n     *\n     * @method unregisterForMarketUpdates\n     * @param {Function} callback - The already registered callback handler to unregister.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.market - Object containing the published market/market prices data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unregisterForMarketUpdates(callback) {\n        if ($.isFunction(callback)) {\n            if (_mappedSubscriptions.markets.callbacks.has(callback)) {\n                _mappedSubscriptions.markets.callbacks.$any.add(callback);\n                _logger.debug('Unregistered for (greedy) market updates', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unregisters a callback handler, which has already been registered for server quality-of-service (QoS) responses.\n     * is received from the server.\n     *\n     * @method unregisterForQoS\n     * @param {Function} callback - The callback handler to register for invocation whenever a server QoS response is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Number} callback.ttl - Total number of milliseconds it has taken for the server to respond to a QoS request.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unregisterForQoS(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.QoS.has(callback)) {\n                _callbacks.QoS.remove(callback);\n                _logger.debug('Unregistered for QoS', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to account (including sub-account) updates for the account with the server and unregisters \n     * a callback handler, which has already been registered for account (including sub-account) updates.\n     *\n     * @method unsubscribeToAccount\n     * @param {Function} callback - The callback handler to register for invocation whenever an account or sub-account update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.account - Object containing the published account data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unsubscribeToAccount(callback) {\n        // Remove our callback\n        if ($.isFunction(callback)) {\n            if (_subscriptions.account.callbacks.has(callback) === true) {\n                _subscriptions.account.callbacks.remove(callback);\n                _subscriptions.account.subscriptionCount -= 1;\n                _logger.debug('Unsubscribed to account (Count = ' + _subscriptions.account.subscriptionCount + ')', _logSource);\n\n                // Only unsubscribe if they are no subscriptions anymore...\n                if (_subscriptions.account.subscriptionCount === 0) {\n                    // Clear cache of account...\n                    _subscriptions.account.subscribed = false;\n                    _subscriptions.account.cache = {};\n                    _logger.debug('Cleared account cache', _logSource);\n\n                    _logger.debug('Sending account unsubscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createAccountUnsubscribeMessage());\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to account transaction updates for the account with the server and unregisters \n     * a callback handler, which has already been registered for account transaction updates.\n     *\n     * @method unsubscribeToAccountTransactions\n     * @param {Function} callback - The callback handler to register for invocation whenever an account transaction update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.accountTransaction - Object containing the published account transaction data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unsubscribeToAccountTransactions(callback) {\n        // Remove our callback\n        if ($.isFunction(callback)) {\n            if (_subscriptions.accountTransactions.callbacks.has(callback) === true) {\n                _subscriptions.accountTransactions.callbacks.remove(callback);\n                _subscriptions.accountTransactions.subscriptionCount -= 1;\n                _logger.debug('Unsubscribed to account transactions (Count = ' + _subscriptions.accountTransactions.subscriptionCount + ')', _logSource);\n\n                // Only unsubscribe if they are no subscriptions anymore...\n                if (_subscriptions.accountTransactions.subscriptionCount === 0) {\n                    // Clear cache of account transactions...\n                    _subscriptions.accountTransactions.subscribed = false;\n                    _subscriptions.accountTransactions.cache = {};\n                    _logger.debug('Cleared account transactions cache', _logSource);\n\n                    _logger.debug('Sending account transactions unsubscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createAccountTransactionUnsubscribeMessage());\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    /**\n     * Unsubscribes to aggregate account data updates for the subaccount with the server and unregisters \n     * a callback handler, which has already been registered for aggregate account updates.\n     *\n     * @method unsubscribeToAggregateAccounts\n     * @param {Array|String} subAccountIDs - Array of (or an individual) sub-account IDs.\n     * @param {Function} callback - The callback handler to register for invocation whenever an aggregate account update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unsubscribeToAggregateAccounts(subAccountIDs, callback) {\n        var subAccountIDsToCancelSubscriptionsFor = [],\n            unregisteredCallbackCount = 0;\n        if ($.isFunction(callback)) {\n            if ($.isArray(subAccountIDs) === false) {\n                subAccountIDs = [subAccountIDs];\n            }\n            for (var i = 0; i < subAccountIDs.length; i++) {\n                var subAccountID = (subAccountIDs[i] || '').toUpperCase();\n                if (subAccountID) {\n                    // Remove our callback\n                    if (_mappedSubscriptions.aggregateAccounts.callbacks.hasOwnProperty(subAccountID)) {\n                        if (_mappedSubscriptions.aggregateAccounts.callbacks[subAccountID].has(callback)) {\n                            _mappedSubscriptions.aggregateAccounts.callbacks[subAccountID].remove(callback);\n                            unregisteredCallbackCount += 1;\n\n                            if (_mappedSubscriptions.aggregateAccounts.subscriptionCounts.hasOwnProperty(subAccountID)) {\n                                _mappedSubscriptions.aggregateAccounts.subscriptionCounts[subAccountID] -= 1;\n                                _logger.debug('Unsubscribed to aggregate account ' + subAccountID + ' (Count = ' + _mappedSubscriptions.aggregateAccounts.subscriptionCounts[subAccountID] + ')', _logSource);\n                                // If this was the last sub-account ID aggregate account, cancel our subscription for it\n                                if (_mappedSubscriptions.aggregateAccounts.subscriptionCounts[subAccountID] === 0) {\n                                    subAccountIDsToCancelSubscriptionsFor.push(subAccountID);\n                                    delete _mappedSubscriptions.aggregateAccounts.callbacks[subAccountID];\n                                    delete _mappedSubscriptions.aggregateAccounts.subscriptionCounts[subAccountID];\n                                    // Remove cache of this sub-account ID aggregate account\n                                    if (_mappedSubscriptions.aggregateAccounts.cache.hasOwnProperty(subAccountID)) {\n                                        delete _mappedSubscriptions.aggregateAccounts.cache[subAccountID];\n                                    }\n                                    _logger.debug('Cleared aggregate accounts cache for ' + subAccountID, _logSource);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            // If any sub-account ID aggregate accounts need to be cancelled...\n            if (subAccountIDsToCancelSubscriptionsFor.length > 0) {\n                _logger.debug('Sending aggregate accounts unsubscribe request(s) for ' + subAccountIDsToCancelSubscriptionsFor, _logSource);\n                send(ETX.clientAPI.Messages.createAggregateAccountUnsubscribeMessage(subAccountIDsToCancelSubscriptionsFor));\n            }\n            if (unregisteredCallbackCount === subAccountIDs.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to closed trade updates for the account with the server and unregisters \n     * a callback handler, which has already been registered for closed trade updates.\n     *\n     * @method unsubscribeToClosedTrades\n     * @param {Function} callback - The callback handler to register for invocation whenever an closed trade update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.closedTrade - Object containing the published closed trade data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unsubscribeToClosedTrades(callback) {\n        // Remove our callback\n        if ($.isFunction(callback)) {\n            if (_subscriptions.closedTrades.callbacks.has(callback) === true) {\n                _subscriptions.closedTrades.callbacks.remove(callback);\n                _subscriptions.closedTrades.subscriptionCount -= 1;\n                _logger.debug('Unsubscribed to closed trades (Count = ' + _subscriptions.closedTrades.subscriptionCount + ')', _logSource);\n\n                // Only unsubscribe if they are no subscriptions anymore...\n                if (_subscriptions.closedTrades.subscriptionCount === 0) {\n                    // Clear cache of closed trades...\n                    _subscriptions.closedTrades.subscribed = false;\n                    _subscriptions.closedTrades.cache = {};\n                    _logger.debug('Cleared closed trades cache', _logSource);\n\n                    _logger.debug('Sending closed trades unsubscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createClosedTradesUnsubscribeMessage());\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to specific currency pair exchange rate updates for the account with the server and \n     * unregisters a callback handler, which has already been registered for specific currency pair\n     * exchange rate updates.\n     *\n     * @method unsubscribeToExchangeRates\n     * @param {Array|String} currencyPairs - Array of (or an individual) currency pairs.\n     * @param {Function} callback - The callback handler to register for invocation whenever a currency pair's exchange rate update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.exchangeRate - Object containing the published currency pair exchange price data.\n     * @returns {Boolean} - If true, indicates that all callback handlers were successfully unregistered.\n     */\n    function unsubscribeToExchangeRates(currencyPairs, callback) {\n        var currencyPairsToCancelSubscriptionsFor = [],\n            unregisteredCallbackCount = 0;\n        if ($.isFunction(callback)) {\n            if ($.isArray(currencyPairs) === false) {\n                currencyPairs = [currencyPairs];\n            }\n            for (var i = 0; i < currencyPairs.length; i++) {\n                var currencyPair = (currencyPairs[i] || '').toUpperCase();\n                if (currencyPair) {\n                    // Remove our callback\n                    if (_mappedSubscriptions.exchangeRates.callbacks.hasOwnProperty(currencyPair)) {\n                        if (_mappedSubscriptions.exchangeRates.callbacks[currencyPair].has(callback)) {\n                            _mappedSubscriptions.exchangeRates.callbacks[currencyPair].remove(callback);\n                            unregisteredCallbackCount += 1;\n\n                            if (_mappedSubscriptions.exchangeRates.subscriptionCounts.hasOwnProperty(currencyPair)) {\n                                _mappedSubscriptions.exchangeRates.subscriptionCounts[currencyPair] -= 1;\n                                _logger.debug('Unsubscribed to exchange rate ' + currencyPair + ' (Count = ' + _mappedSubscriptions.exchangeRates.subscriptionCounts[currencyPair] + ')', _logSource);\n                                // If this was the last currency pair exchange rate, cancel our subscription for it\n                                if (_mappedSubscriptions.exchangeRates.subscriptionCounts[currencyPair] === 0) {\n                                    currencyPairsToCancelSubscriptionsFor.push(currencyPair);\n                                    delete _mappedSubscriptions.exchangeRates.callbacks[currencyPair];\n                                    delete _mappedSubscriptions.exchangeRates.subscriptionCounts[currencyPair];\n                                    // Remove cache of this currency pair exchange rate\n                                    if (_mappedSubscriptions.exchangeRates.cache.hasOwnProperty(currencyPair)) {\n                                        delete _mappedSubscriptions.exchangeRates.cache[currencyPair];\n                                    }\n                                    _logger.debug('Cleared exchange rates cache for ' + currencyPair, _logSource);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            // If any currency pair exchange rates need to be cancelled...\n            if (currencyPairsToCancelSubscriptionsFor.length > 0) {\n                _logger.debug('Sending exchange rates unsubscribe request(s) for ' + currencyPairsToCancelSubscriptionsFor, _logSource);\n                send(ETX.clientAPI.Messages.createExchangeRateUnsubscribeMessage(currencyPairsToCancelSubscriptionsFor));\n            }\n            if (unregisteredCallbackCount === currencyPairs.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to specific group market updates for the account with the server and unregisters \n     * a callback handler, which has already been registered for specific group market updates.\n     *\n     * @method unsubscribeToGroupMarkets\n     * @param {Array|String} marketIDs - Array of (or an individual) unqiue group identifiers.\n     * @param {Function} callback - The callback handler to register for invocation whenever a group market update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.groupMarkets - Object containing the published group markets data.\n     * @returns {Boolean} - If true, indicates that all callback handlers were successfully unregistered.\n     */\n    function unsubscribeToGroupMarkets(groupIDs, callback) {\n        var groupsMarketsToCancelSubscriptionsFor = [],\n            unregisteredCallbackCount = 0;\n        if ($.isFunction(callback)) {\n            if ($.isArray(groupIDs) === false) {\n                groupIDs = [groupIDs];\n            }\n            for (var i = 0; i < groupIDs.length; i++) {\n                var groupID = groupIDs[i];\n                if (groupID) {\n                    // Remove our callback\n                    if (_mappedSubscriptions.groupMarkets.callbacks.hasOwnProperty(groupID)) {\n                        if (_mappedSubscriptions.groupMarkets.callbacks[groupID].has(callback)) {\n                            _mappedSubscriptions.groupMarkets.callbacks[groupID].remove(callback);\n                            unregisteredCallbackCount += 1;\n\n                            if (_mappedSubscriptions.groupMarkets.subscriptionCounts.hasOwnProperty(groupID)) {\n                                _mappedSubscriptions.groupMarkets.subscriptionCounts[groupID] -= 1;\n                                _logger.debug('Unsubscribed to group markets for group ' + groupID + ' (Count = ' + _mappedSubscriptions.groupMarkets.subscriptionCounts[groupID] + ')', _logSource);\n                                // If this was the last group subscription, cancel our subscription for it\n                                if (_mappedSubscriptions.groupMarkets.subscriptionCounts[groupID] === 0) {\n                                    groupsMarketsToCancelSubscriptionsFor.push(groupID);\n                                    delete _mappedSubscriptions.groupMarkets.callbacks[groupID];\n                                    delete _mappedSubscriptions.groupMarkets.subscriptionCounts[groupID];\n                                    // Remove cache of this group ID\n                                    if (_mappedSubscriptions.groupMarkets.cache.hasOwnProperty(groupID)) {\n                                        delete _mappedSubscriptions.groupMarkets.cache[groupID];\n                                    }\n                                    _logger.debug('Cleared group markets cache for group ' + groupID, _logSource);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            // If any markets need to be cancelled...\n            if (groupsMarketsToCancelSubscriptionsFor.length > 0) {\n                _logger.debug('Sending group markets unsubscribe request(s) for group(s) ' + groupsMarketsToCancelSubscriptionsFor, _logSource);\n                send(ETX.clientAPI.Messages.createGroupMarketUnsubscribeMessage(groupsMarketsToCancelSubscriptionsFor));\n            }\n            if (unregisteredCallbackCount === groupIDs.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to historic trade updates for the account with the server and unregisters \n     * a callback handler, which has already been registered for historic trade updates.\n     *\n     * @method unsubscribeToHistoricTrades\n     * @param {Function} callback - The callback handler to register for invocation whenever an historic trade update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.historicTrade - Object containing the published historic trade data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unsubscribeToHistoricTrades(callback) {\n        // Remove our callback\n        if ($.isFunction(callback)) {\n            if (_subscriptions.historicTrades.callbacks.has(callback) === true) {\n                _subscriptions.historicTrades.callbacks.remove(callback);\n                _subscriptions.historicTrades.subscriptionCount -= 1;\n                _logger.debug('Unsubscribed to historic trades (Count = ' + _subscriptions.historicTrades.subscriptionCount + ')', _logSource);\n\n                // Only unsubscribe if they are no subscriptions anymore...\n                if (_subscriptions.historicTrades.subscriptionCount === 0) {\n                    // Clear cache of historic trades...\n                    _subscriptions.historicTrades.subscribed = false;\n                    _subscriptions.historicTrades.cache = {};\n                    _logger.debug('Cleared historic trades cache', _logSource);\n\n                    _logger.debug('Sending historic trades unsubscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createHistoricTradesUnsubscribeMessage());\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to specific market updates for the account with the server and unregisters \n     * a callback handler, which has already been registered for specific market updates.\n     *\n     * @method unsubscribeToMarkets\n     * @param {Array|String} marketIDs - Array of (or an individual) market IDs.\n     * @param {Function} callback - The callback handler to register for invocation whenever a market update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.market - Object containing the published market/market prices data.\n     * @returns {Boolean} - If true, indicates that all callback handlers were successfully unregistered.\n     */\n    function unsubscribeToMarkets(marketIDs, callback) {\n        var marketsToCancelSubscriptionsFor = [],\n            unregisteredCallbackCount = 0;\n        if ($.isFunction(callback)) {\n            if ($.isArray(marketIDs) === false) {\n                marketIDs = [marketIDs];\n            }\n            for (var i = 0; i < marketIDs.length; i++) {\n                var marketID = marketIDs[i];\n                if (marketID) {\n                    // Remove our callback\n                    if (_mappedSubscriptions.markets.callbacks.hasOwnProperty(marketID)) {\n                        if (_mappedSubscriptions.markets.callbacks[marketID].has(callback)) {\n                            _mappedSubscriptions.markets.callbacks[marketID].remove(callback);\n                            unregisteredCallbackCount += 1;\n\n                            if (_mappedSubscriptions.markets.subscriptionCounts.hasOwnProperty(marketID)) {\n                                _mappedSubscriptions.markets.subscriptionCounts[marketID] -= 1;\n                                _logger.debug('Unsubscribed to market ' + marketID + ' (Count = ' + _mappedSubscriptions.markets.subscriptionCounts[marketID] + ')', _logSource);\n                                // If this was the last market, cancel our subscription for it\n                                if (_mappedSubscriptions.markets.subscriptionCounts[marketID] === 0) {\n                                    marketsToCancelSubscriptionsFor.push(marketID);\n                                    delete _mappedSubscriptions.markets.callbacks[marketID];\n                                    delete _mappedSubscriptions.markets.subscriptionCounts[marketID];\n                                    // Remove cache of this market\n                                    if (_mappedSubscriptions.markets.cache.hasOwnProperty(marketID)) {\n                                        delete _mappedSubscriptions.markets.cache[marketID];\n                                    }\n                                    _logger.debug('Cleared markets cache for market ' + marketID, _logSource);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            // If any markets need to be cancelled...\n            if (marketsToCancelSubscriptionsFor.length > 0) {\n                _logger.debug('Sending markets unsubscribe request(s) for market(s) ' + marketsToCancelSubscriptionsFor, _logSource);\n                send(ETX.clientAPI.Messages.createMarketUnsubscribeMessage(marketsToCancelSubscriptionsFor));\n            }\n            if (unregisteredCallbackCount === marketIDs.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to open trade updates for the account with the server and unregisters \n     * a callback handler, which has already been registered for open trade updates.\n     *\n     * @method unsubscribeToOpenTrades\n     * @param {Function} callback - The callback handler to register for invocation whenever an open trade update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.openTrade - Object containing the published open trade data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unsubscribeToOpenTrades(callback) {\n        // Remove our callback\n        if ($.isFunction(callback)) {\n            if (_subscriptions.openTrades.callbacks.has(callback) === true) {\n                _subscriptions.openTrades.callbacks.remove(callback);\n                _subscriptions.openTrades.subscriptionCount -= 1;\n                _logger.debug('Unsubscribed to open trades (Count = ' + _subscriptions.openTrades.subscriptionCount + ')', _logSource);\n\n                // Only unsubscribe if they are no subscriptions anymore...\n                if (_subscriptions.openTrades.subscriptionCount === 0) {\n                    // Clear cache of open trades...\n                    _subscriptions.openTrades.subscribed = false;\n                    _subscriptions.openTrades.cache = {};\n                    _logger.debug('Cleared open trades cache', _logSource);\n\n                    _logger.debug('Sending open trades unsubscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createOpenTradesUnsubscribeMessage());\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to specific portfolio market updates for the account with the server and unregisters \n     * a callback handler, which has already been registered for specific portfolio market updates.\n     *\n     * @method unsubscribeToPortfolios\n     * @param {Array|String} portfolioIDs - Array of (or an individual) unqiue portfolio identifiers.\n     * @param {Function} callback - The callback handler to register for invocation whenever a portfolio market update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.portfolioMarkets - Object containing the published portfolio markets data.\n     * @returns {Boolean} - If true, indicates that all callback handlers were successfully unregistered.\n     */\n    function unsubscribeToPortfolios(portfolioIDs, callback) {\n        var portfoliosToCancelSubscriptionsFor = [],\n            unregisteredCallbackCount = 0;\n        if ($.isFunction(callback)) {\n            if ($.isArray(portfolioIDs) === false) {\n                portfolioIDs = [portfolioIDs];\n            }\n            for (var i = 0; i < portfolioIDs.length; i++) {\n                var portfolioID = portfolioIDs[i];\n                if (portfolioID) {\n                    // Remove our callback\n                    if (_mappedSubscriptions.portfolios.callbacks.hasOwnProperty(portfolioID)) {\n                        if (_mappedSubscriptions.portfolios.callbacks[portfolioID].has(callback)) {\n                            _mappedSubscriptions.portfolios.callbacks[portfolioID].remove(callback);\n                            unregisteredCallbackCount += 1;\n\n                            if (_mappedSubscriptions.portfolios.subscriptionCounts.hasOwnProperty(portfolioID)) {\n                                _mappedSubscriptions.portfolios.subscriptionCounts[portfolioID] -= 1;\n                                _logger.debug('Unsubscribed to portfolio markets for portfolio ' + portfolioID + ' (Count = ' + _mappedSubscriptions.portfolios.subscriptionCounts[portfolioID] + ')', _logSource);\n                                // If this was the last portfolio subscription, cancel our subscription for it\n                                if (_mappedSubscriptions.portfolios.subscriptionCounts[portfolioID] === 0) {\n                                    portfoliosToCancelSubscriptionsFor.push(portfolioID);\n                                    delete _mappedSubscriptions.portfolios.callbacks[portfolioID];\n                                    delete _mappedSubscriptions.portfolios.subscriptionCounts[portfolioID];\n                                    // Remove cache of this portfolio ID\n                                    if (_mappedSubscriptions.portfolios.cache.hasOwnProperty(portfolioID)) {\n                                        delete _mappedSubscriptions.portfolios.cache[portfolioID];\n                                    }\n                                    _logger.debug('Cleared portfolio markets cache for portfolio ' + portfolioID, _logSource);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            // If any markets need to be cancelled...\n            if (portfoliosToCancelSubscriptionsFor.length > 0) {\n                _logger.debug('Sending portfolio markets unsubscribe request(s) for portfolio(s) ' + portfoliosToCancelSubscriptionsFor, _logSource);\n                send(ETX.clientAPI.Messages.createPortfolioUnsubscribeMessage(portfoliosToCancelSubscriptionsFor));\n            }\n            if (unregisteredCallbackCount === portfolioIDs.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to price alert updates for the account with the server and unregisters \n     * a callback handler, which has already been registered for price alert updates.\n     *\n     * @method unsubscribeToPriceAlerts\n     * @param {Function} callback - The callback handler to register for invocation whenever a price alert update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.priceAlert - Object containing the published price alert data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unsubscribeToPriceAlerts(callback) {\n        // Remove our callback\n        if ($.isFunction(callback)) {\n            if (_subscriptions.priceAlerts.callbacks.has(callback) === true) {\n                _subscriptions.priceAlerts.callbacks.remove(callback);\n                _subscriptions.priceAlerts.subscriptionCount -= 1;\n                _logger.debug('Unsubscribed to price alerts (Count = ' + _subscriptions.priceAlerts.subscriptionCount + ')', _logSource);\n\n                // Only unsubscribe if they are no subscriptions anymore...\n                if (_subscriptions.priceAlerts.subscriptionCount === 0) {\n                    // Clear cache of price alerts...\n                    _subscriptions.priceAlerts.subscribed = false;\n                    _subscriptions.priceAlerts.cache = {};\n                    _logger.debug('Cleared price alerts cache', _logSource);\n\n                    _logger.debug('Sending price alerts unsubscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createPriceAlertsUnsubscribeMessage());\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to processed (executed/cancelled) order updates for the account with the server \n     * and unregisters a callback handler, which has already been registered for processed order updates.\n     *\n     * @method unsubscribeToProcessedOrders\n     * @param {Function} callback - The callback handler to register for invocation whenever a processed order update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.processedOrder - Object containing the published processed order data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unsubscribeToProcessedOrders(callback) {\n        // Remove our callback\n        if ($.isFunction(callback)) {\n            if (_subscriptions.processedOrders.callbacks.has(callback) === true) {\n                _subscriptions.processedOrders.callbacks.remove(callback);\n                _subscriptions.processedOrders.subscriptionCount -= 1;\n                _logger.debug('Unsubscribed to processed orders (Count = ' + _subscriptions.processedOrders.subscriptionCount + ')', _logSource);\n\n                // Only unsubscribe if they are no subscriptions anymore...\n                if (_subscriptions.processedOrders.subscriptionCount === 0) {\n                    // Clear cache of processed orders...\n                    _subscriptions.processedOrders.subscribed = false;\n                    _subscriptions.processedOrders.cache = {};\n                    _logger.debug('Cleared processed orders cache', _logSource);\n\n                    _logger.debug('Sending processed orders unsubscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createProcessedOrdersUnsubscribeMessage());\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to working order updates for the account with the server and unregisters \n     * a callback handler, which has already been registered for working order updates.\n     *\n     * @method unsubscribeToWorkingOrders\n     * @param {Function} callback - The callback handler to register for invocation whenever a working order update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.workingOrder - Object containing the published working order data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unsubscribeToWorkingOrders(callback) {\n        // Remove our callback\n        if ($.isFunction(callback)) {\n            if (_subscriptions.workingOrders.callbacks.has(callback) === true) {\n                _subscriptions.workingOrders.callbacks.remove(callback);\n                _subscriptions.workingOrders.subscriptionCount -= 1;\n                _logger.debug('Unsubscribed to working orders (Count = ' + _subscriptions.workingOrders.subscriptionCount + ')', _logSource);\n\n                // Only unsubscribe if they are no subscriptions anymore...\n                if (_subscriptions.workingOrders.subscriptionCount === 0) {\n                    // Clear cache of working orders...\n                    _subscriptions.workingOrders.subscribed = false;\n                    _subscriptions.workingOrders.cache = {};\n                    _logger.debug('Cleared working orders cache', _logSource);\n\n                    _logger.debug('Sending working orders unsubscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createWorkingOrdersUnsubscribeMessage());\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Updates the current user settings for the account on the server with the settings provided, where\n     * any new settings are added, existing settings are updated and settings mark as deleted are removed.\n     *\n     * @method updateUserSettings\n     * @param {Object} userSettings - Array of Objects, each containing the user setting properties defined in `ETX.clientAPI.Constants.messages.UserSettingsRequest.UserSettingsArray_Object`.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function updateUserSettings(userSettings) {\n        // Generate unique client identifier...\n        var uid = ETX.clientAPI.Messages.generateUniqueClientIdentifier(ETX.clientAPI.Constants.messages.UserSettingsRequest.MessageType),\n            defer = new $.Deferred(),\n            promise = defer.promise();\n\n        if (_session) {\n            _logger.debug('Sending (update) UserSettingsRequest  (\"' + uid + '\")...', _logSource);\n\n            _mappedDeferredObjs.userSettingsRequest[uid] = defer;\n\n            var msg = ETX.clientAPI.Messages.createUserSettingsRequestMessage(\n                uid, ETX.clientAPI.Constants.messages.UserSettingsRequest.UserSettingsRequestType_Update, userSettings);\n            send(msg);\n        } else {\n            defer.reject(_api, 'No session');\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n    // #endregion\n    //----END-METHODS---------\n\n};\n\n/// <reference path=\"../../_references.js\" />\n\nETX.namespace('clientAPI');\n\n/**\n * @class ETX.clientAPI.Constants\n * \n * @static\n * @singleton\n * @readonly\n *\n * @requires ETX\n *\n * `ETX.clientAPI.Constants` singleton provides constants for the `ETX.clientAPI` modules/sub-modules.\n */\nETX.clientAPI.Constants = (function () {\n\n    'use strict';\n\n    //-CONSTRUCTOR------------\n    // #region\n    //----PRIVATE-------------\n    var _constants = {};\n    //----END-PRIVATE---------\n\n    //----PUBLIC--------------\n    // #region\n        _constants = {\n            /**\n             * Gets the constants for messages.   \n             *\n             * ###Example:\n             *      // Subscribe to market updates and details for market '10001'...\n             *      var api = new ETX.clientAPI.ClientAPI({\n             *          webSocketRootURL: 'ws://127.0.0.1:82',\n             *          webAPIRootURL: 'http://127.0.0.1:81/',\n             *          username: 'test_user',\n             *          password: 'change_me',\n             *          brokerID: '1'\n             *      });\n             *      var targetMarketID = '10001', targetMarketObj;\n             *      // NOTE: Returns a jQuery Promise object, as this may be an async request\n             *      api.subscribeToMarketUpdates(targetMarketID, function (api, market) {\n             *          // Now an update has been published, lets check its an update for our target market...\n             *          if (market) {\n             *              // Use the Market specific constants the access the MarketID from the published message...\n             *              var marketID = market[ETX.clientAPI.Constants.messages.Market.MarketID];\n             *              if (marketID === targetMarketID) {\n             *                  // Yes it is, so lets save a reference to it so we can do something interesting...\n             *                  targetMarketObj = market;\n             *                  // Do something interesting...\n             *              }\n             *          }\n             *      });\n             *\n             * @property {ETX.clientAPI.Constants.messages} messages\n             * @static\n             * @readonly\n             */\n            messages: {\n                // #region\n                /*\n                 * Defines the common constants shared by various messages.\n                 * @property {Object} Common\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                Common: {\n                    Deleted: '$del',\n                    Subscription: {\n                        SubscribeType: '$st'\n                    }\n                },\n\n                /**\n                 * Defines the constants for account update messages.\n                 * @property {Object} Account\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                Account: {\n                    MessageType: 'A',\n\n                    AccountID: 'ai',\n                    AccountName: 'an',\n                    AssetClassArray: 'aca',\n                    AssetClassArray_Object: {\n                        AssetClass: 'ac',\n                        AssetClass_CFD: 'cfd',\n                        AssetClass_FX: 'fx',\n                        AssetClass_SB: 'sb'\n                    },\n                    AutoStops: 'as',\n                    ClientID: 'ci',\n                    DefaultCurrencyName: 'dcn',\n                    Deleted: '$del',\n                    DynamicMargin: 'dm',\n                    EmailPriceAlerts: 'epa',\n                    GuaranteedStops: 'gs',\n                    IMR: 'im',\n                    IMRType: 'it',\n                    ManagedClient: 'mc',\n                    MarginReserved: 'mr',\n                    MarginReservedManually: 'mrm',\n                    MinIMR: 'mi',\n                    ShowNetPnL: 'snrpl',\n                    SMSPriceAlerts: 'spa',\n                    TrailingStopType: 'ts',\n                    SubAccount: 'sa',\n                    SubAccountArray: 'saa',\n                    SubAccountArray_Object: {\n                        AccountID: 'ai',\n                        //CashBalance: 'cb',\n                        CreditAllocation: 'ca',\n                        //CurrencyID: 'ci',\n                        CurrencyName: 'cn',\n                        CurrencySymbol: 'cs',\n                        Deleted: '$del',\n                        Funds: 'f',\n                        //FundsAvailable: 'fa',\n                        MarginReserved: 'mr',\n                        MarginReservedManually: 'mrm',\n                        MinBet: 'mb',\n                        SpreadBettingEnabled: 'sbe',\n                        SubAccountID: 'sai',\n                        WMRA: 'wm'\n                    }\n                },\n\n                /**\n                 * Defines the constants for account subscription messages.\n                 * @property {Object} AccountSubscription\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                AccountSubscription: {\n                    MessageType: 'AS',\n\n                    SubscribeType: '$st',\n                    SubscribeType_Subscribe: 's',\n                    SubscribeType_Unsubscribe: 'u'\n                },\n\n                /**\n                 * Defines the constants for account transaction update messages.\n                 * @property {Object} AccountTransaction\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                AccountTransaction: {\n                    MessageType: 'AT',\n\n                    Amount: 'a',\n                    Comment: 'c',\n                    CurrencyName: 'cn',\n                    CurrencySymbol: 'cs',\n                    CurrentFunds: 'cf',\n                    Deleted: '$del',\n                    StatementID: 'si',\n                    SubAccountID: 'sai',\n                    Timestamp: 'ts',\n                    TransactionTypeID: 'tti',\n                    TransactionTypeText: 'ttt'\n                },\n\n                /**\n                 * Defines the constants for account transaction subscription messages.\n                 * @property {Object} AccountTransactionSubscription\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                AccountTransactionSubscription: {\n                    MessageType: 'ATS',\n\n                    SubscribeType: '$st',\n                    SubscribeType_Subscribe: 's',\n                    SubscribeType_Unsubscribe: 'u'\n                },\n\n                /**\n                 * Defines the constants for aggregate account update messages.\n                 * @property {Object} AggregateAccount\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                AggregateAccount: {\n                    MessageType: 'AA',\n\n                    AccountID: 'ai',\n                    AccountValuation: 'av',\n                    CashBalance: 'cb',\n                    CreditAllocation: 'ca',\n                    CurrencyName: 'cn',\n                    CurrencySymbol: 'cs',\n                    MarginReserved: 'mr',\n                    OpenPL: 'upnl',\n                    SubAccountID: 'sai',\n                    TradingResources: 'tr',\n                    WMRA: 'wm'\n                },\n\n                /**\n                 * Defines the constants for aggregate account subscription messages.\n                 * @property {Object} AggregateAccountSubscription\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                AggregateAccountSubscription: {\n                    MessageType: 'AAS',\n\n                    SubAccountArray: 'sa',\n                    SubAccountArray_Object: {\n                        SubAccountID: 'sai'\n                    },\n                    SubscribeType: '$st',\n                    SubscribeType_Subscribe: 's',\n                    SubscribeType_Unsubscribe: 'u'\n                },\n\n                /**\n                 * Defines the constants for closed trade update messages.\n                 * @property {Object} ClosedTrade\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                ClosedTrade: {\n                    MessageType: 'CT',\n\n                    AssetClass: 'ac',\n                    AssetClass_CFD: 'cfd',\n                    AssetClass_FX: 'fx',\n                    AssetClass_SB: 'sb',\n                    BinaryTimestamp: 'bt',\n                    ClosePrice: 'cp',\n                    CurrencyName: 'cn',\n                    CurrencyPL: 'cpl',\n                    CurrencySymbol: 's',\n                    DateClosed: 'wc',\n                    DateOpened: 'wo',\n                    DecimalPlaces: 'dp',\n                    Deleted: '$del',\n                    ForcedIncrement: 'fi',\n                    MarketID: 'mi',\n                    MarketName: 'mn',\n                    NetPnL: 'npnl',\n                    OpenPrice: 'op',\n                    PnL: 'pnl',\n                    Quantity: 'q',\n                    Side: 'si',\n                    Side_Buy: 'b',\n                    Side_Sell: 's',\n                    SubAccountID: 'sai',\n                    TradeCloseID: 'tci'\n                },\n\n                /**\n                 * Defines the constants for closed trade subscription messages.\n                 * @property {Object} ClosedTradeSubscription\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                ClosedTradeSubscription: {\n                    MessageType: 'CTS',\n\n                    SubscribeType: '$st',\n                    SubscribeType_Subscribe: 's',\n                    SubscribeType_Unsubscribe: 'u'\n                },\n\n                /**\n                 * Defines the constants for (server) error messages.\n                 * @property {Object} Error\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                Error: {\n                    MessageType: '$ERR',\n                    ErrorText: 'e',\n                    Exception: 'ex',\n                    SourceMessage: 'src',\n                    Timestamp: 'ts'\n                },\n\n                /**\n                 * Defines the constants for exchange rate update messages.\n                 * @property {Object} ExchangeRate\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                ExchangeRate: {\n                    MessageType: \"EXR\",\n\n                    BaseCurrency: \"bc\",\n                    CurrencyPair: \"cp\",\n                    QuoteCurrency: \"qc\",\n                    Rate: \"r\"\n                },\n\n                /**\n                 * Defines the constants for exchange rate subscription messages.\n                 * @property {Object} ExchangeRateSubscription\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                ExchangeRateSubscription: {\n                    MessageType: 'EXRS',\n\n                    CurrencyPairArray: 'cpa',\n                    CurrencyPairArray_Object: {\n                        CurrencyPair: 'cp'\n                    },\n                    SubscribeType: '$st',\n                    SubscribeType_Subscribe: 's',\n                    SubscribeType_Unsubscribe: 'u'\n                },\n\n                /**\n                 * Defines the constants for execution report update messages.\n                 * @property {Object} ExecutionReport\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                ExecutionReport: {\n                    MessageType: 'ER',\n\n                    CurrencyName: 'cn',\n                    CurrencySymbol: 'cs',\n                    HasGuaranteedStop: 'hgs',\n                    HasTrailingStop: 'hts',\n                    LimitOrderID: 'loid',\n                    LimitOrderLevel: 'lol',\n                    MarketID: 'mi',\n                    MarketName: 'mn',\n                    MaxStopOrderPips: 'msop',\n                    OpenPnL: 'upnl',\n                    OrderStatus: 'os',\n                    OrderStatus_Cancelled: 'c', // Cancelled: '4',\n                    OrderStatus_Dealer: 'd', // Dealer: 'D',\n                    OrderStatus_Executed: 'e',\n                    OrderStatus_Expired: 'x', // Expired: 'C',\n                    OrderStatus_Filled: 'f', // Filled: '2',\n                    OrderStatus_PriceReject: 'z', // PriceReject: 'Z',\n                    OrderStatus_Rejected: 'j', // Rejected: '8',\n                    OrderStatus_Requoted: 'r', // Requoted: 'R',\n                    OrderStatus_Stopped: 's', // Stopped: '7',\n                    OrderStatus_Working: 'w', // Working: '0',\n                    Price: 'p',\n                    PriceTraded: 'pt',\n                    Quantity: 'q',\n                    RequotedPrice: 'rqp',\n                    RequotedQuoteID: 'rqi',\n                    RequotedTimeout: 'rqt',\n                    Side: 'si',\n                    Side_Buy: 'b',\n                    Side_Sell: 's',\n                    ServerTradeIdentifier: 'tid',\n                    ServerTransactionTime: 'stt',\n                    StopOrderID: 'soid',\n                    StopOrderLevel: 'sol',\n                    Text: 'txt',\n                    TransactionTime: 'tt',\n                    UniqueClientIdentifier: 'uid'\n                },\n\n                /**\n                 * Defines the constants for group markets update messages.\n                 * @property {Object} GroupMarkets\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                GroupMarkets: {\n                    MessageType: 'GM',\n\n                    GroupID: 'gi',\n                    MarketsCount: 'mc',\n                    MarketsArray: 'ma',\n                    MarketsArray_Object: {\n                        Action: '$act',\n                        Action_Added: 'a',\n                        Action_Updated: 'u',\n                        Action_Deleted: 'd',\n                        MarketID: 'mi',\n                        SortOrder: 'so'\n                    }\n                },\n\n                /**\n                 * Defines the constants for group markets subscription messages.\n                 * @property {Object} GroupMarketsSubscription\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                GroupMarketsSubscription: {\n                    MessageType: 'GMS',\n\n                    GroupsArray: 'ga',\n                    GroupsArray_Object: {\n                        GroupID: 'gi'\n                    },\n                    SubscribeType: '$st',\n                    SubscribeType_Subscribe: 's',\n                    SubscribeType_Unsubscribe: 'u'\n                },\n\n                /**\n                 * Defines the constants for group search messages.\n                 * @property {Object} GroupSearch\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                GroupSearch: {\n                    MessageType: 'GSRQ',\n\n                    ParentGroupID: 'pgi',\n                    UniqueClientIdentifier: 'uid'\n                },\n\n                /**\n                 * Defines the constants for group search response messages.\n                 * @property {Object} GroupSearchResponse\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                GroupSearchResponse: {\n                    MessageType: 'GSRS',\n\n                    GroupsCount: 'gc',\n                    GroupsArray: 'ga',\n                    GroupsArray_Object: {\n                        AssetClassArray: 'aca',\n                        AssetClassArray_Object: {\n                            AssetClass: 'ac',\n                            AssetClass_CFD: 'cfd',\n                            AssetClass_FX: 'fx',\n                            AssetClass_SB: 'sb'\n                        },\n                        AssetClassCount: 'acc',\n                        GroupID: 'gi',\n                        GroupName: 'gn',\n                        HasChildGroups: 'hcg',\n                        HasMarkets: 'hm',\n                        ParentGroupID: 'pgi',\n                        SortOrder: 'so'\n                    },\n                    UniqueClientIdentifier: 'uid'\n                },\n\n                /**\n                 * Defines the constants for historic trade update messages.\n                 * @property {Object} HistoricTrade\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                HistoricTrade: {\n                    MessageType: 'HT',\n\n                    AdminUserID: 'aui',\n                    AssetClass: 'ac',\n                    AssetClass_CFD: 'cfd',\n                    AssetClass_FX: 'fx',\n                    AssetClass_SB: 'sb',\n                    BinaryTimestamp: 'bt',\n                    CashPrice: 'cp',\n                    CreatedBy: 'crb',\n                    CurrencyName: 'cn',\n                    DealerName: 'dn',\n                    DecimalPlaces: 'dp',\n                    Deleted: '$del',\n                    ForcedIncrement: 'fi',\n                    Market: 'm',\n                    MarketID: 'mi',\n                    Price: 'p',\n                    Quantity: 'q',\n                    Side: 'si',\n                    Side_Buy: 'b',\n                    Side_Sell: 's',\n                    SubAccountID: 'sai',\n                    TimeStamp: 'ts',\n                    TradeID: 'ti',\n                    TradeReason: 'tr',\n                    TradeReason_Admin: 'a',\n                    TradeReason_Client: 'c',\n                    TradeReason_ClientAPI: 'ca',\n                    TradeReason_EndOfDayProcessor: 'eodp',\n                    TradeReason_Liquidation: 'l',\n                    TradeReason_Mobile: 'm',\n                    TradeReason_Order: 'o',\n                    TradeReason_Rebook: 'r',\n                    TradeReason_STP: 's',\n                    TradeReason_TradeableAPI: 'ta',\n                    TradeReason_Unknown: 'u',\n                    TradeReasonInfo: 'tri',\n                    XRefType: 'xr'\n                },\n\n                /**\n                 * Defines the constants for historic trade subscription messages.\n                 * @property {Object} HistoricTradeSubscription\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                HistoricTradeSubscription: {\n                    MessageType: 'HTS',\n\n                    SubscribeType: '$st',\n                    SubscribeType_Subscribe: 's',\n                    SubscribeType_Unsubscribe: 'u'\n                },\n\n                /**\n                 * Defines the constants for log off messages.\n                 * @property {Object} LogOff\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                LogOff: {\n                    MessageType: 'LORQ',\n\n                    ReasonCode: 'rc',\n                    ReasonCode_UserLoggedOut: 'u',\n                    Text: 'txt'\n                },\n\n                /**\n                 * Defines the constants for log off response messages.\n                 * @property {Object} LogOffResponse\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                LogOffResponse: {\n                    MessageType: 'LORS',\n\n                    ReasonCode: 'rc',\n                    ReasonCode_LogOnFailure: 'l',\n                    ReasonCode_UserLoggedOut: 'u',\n                    ReasonCode_LoggedInElsewhere: 'm',\n                    ReasonCode_AdminLogOut: 'a',\n                    ReasonCode_TimedOut: 't',\n                    ReasonCode_Undefined: '?',\n                    Text: 'txt'\n                },\n\n                /**\n                 * Defines the constants for log on messages.\n                 * @property {Object} LogOn\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                LogOn: {\n                    MessageType: 'LRQ',\n\n                    AnonymityToken: 'at',\n                    APIType: 'api',\n                    APIVersion: 'apiv',\n                    Broker: 'b',\n                    Password: 'p',\n                    Username: 'u',\n                    AuthenticationKey: 'ak'\n    },\n\n            /**\n             * Defines the constants for log on response messages.\n             * @property {Object} LogOnResponse\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            LogOnResponse: {\n                MessageType: 'LRS',\n\n                Text: 'txt'\n            },\n\n            /**\n             * Defines the constants for market update messages.\n             * @property {Object} Market\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            Market: {\n                MessageType: 'M',\n\n                Allow24hr: 'a24',\n                Ask: 'a',\n                AssetClass: 'ac',\n                AssetClass_CFD: 'cfd',\n                AssetClass_FX: 'fx',\n                AssetClass_SB: 'sb',\n                Bid: 'b',\n                ChangeOnDay: 'ch',\n                ChartCode: 'cc',\n                ChartInstrument: 'ci',\n                CloseTime: 'ct',\n                ClosingPrice: 'cp',\n                ContractSize: 'cs',\n                DealTicketTimeout: 'dtt',\n                DecimalPlaces: 'dp',\n                DefaultStake: 'ds',\n                Deleted: '$del',\n                Direction: 'd',\n                Duration: 'du',\n                EndOfTradingDay: 'end',\n                Exchange: 'exc',\n                Expiry: 'exp',\n                ForcedIncrement: 'fi',\n                FSACode: 'fsa',\n                GuaranteedStopChargeType: 'gsct',\n                GuaranteedStopChargeAmount: 'gsca',\n                GuaranteedStopOn: 'gso',\n                GuaranteedStopExtraSpread: 'gses',\n                GuaranteedStopExtraSpreadType: 'gsest',\n                GuaranteedStopMinOrderDistance: 'gsmo',\n                GuaranteedStopMinOrderDistanceType: 'gsmot',\n                GuaranteedStopPermittedOnOrders: 'gsor',\n                High: 'h',\n                IMR: 'im',\n                InternetTrade: 'it',\n                IsOpen: 'op',\n                IsOutOfHours: 'ooh',\n                IsTradedInLots: 'til',\n                LastPriceTimeStamp: 'lp',\n                LastTradeTime: 'ltt',\n                LotDescription: 'ld',\n                LotSize: 'ls',\n                Low: 'l',\n                MarketCurrency: 'mc',\n                MarketID: 'mi',\n                MarketName: 'mn',\n                MarketStatus: 'st',\n                MarketType: 'mt',\n                MaxNightStake: 'mxns',\n                MaxStake: 'mxs',\n                MinIMR: 'mimr',\n                MinStake: 'ms',\n                OpenCloseInfo: 'oci',\n                OpenStatus: 'os',\n                OpenTime: 'ot',\n                OrderDistanceType: 'odt',\n                OrderDistanceValue: 'odv',\n                PipSize: 'psz',\n                PipValue: 'pv',\n                PriceScale: 'ps',\n                QuoteCurrency: 'qc',\n                RoundToNearest: 'rtn',\n                Spread: 'sp',\n                StepSize: 'ss',\n                //TelephoneTrade: 'tt',\n                ValueDate: 'vd'\n            },\n\n            /**\n             * Defines the constants for market subscription messages.\n             * @property {Object} MarketSubscription\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            MarketSubscription: {\n                MessageType: 'MS',\n\n                SubscribeType: '$st',\n                SubscribeType_Subscribe: 's',\n                SubscribeType_Unsubscribe: 'u',\n                MarketsArray: 'ma',\n                MarketsArray_Object: {\n                    MarketID: 'mi'\n                }\n            },\n\n            /**\n             * Defines the constants for market search messages.\n             * @property {Object} MarketSearch\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            MarketSearch: {\n                MessageType: 'MSRQ',\n\n                SearchTerm: 'st',\n                SearchConstraint: 'sc',\n                SearchConstraint_StartsWith: 'sw',\n                SearchConstraint_Contains: 'c',\n                UniqueClientIdentifier: 'uid'\n            },\n\n            /**\n             * Defines the constants for market search response messages.\n             * @property {Object} MarketSearchResponse\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            MarketSearchResponse: {\n                MessageType: 'MSRS',\n\n                MarketsArray: 'ma',\n                MarketsArray_Object: {\n                    MarketID: 'mi',\n                    MarketName: 'name',\n                },\n                UniqueClientIdentifier: 'uid'\n            },\n\n            /**\n             * Defines the constants for open trade update messages.\n             * @property {Object} OpenTrade\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            OpenTrade: {\n                MessageType: 'OT',\n\n                AssetClass: 'ac',\n                AssetClass_CFD: 'cfd',\n                AssetClass_FX: 'fx',\n                AssetClass_SB: 'sb',\n                CreatedBy: 'crb',\n                CurrentPrice: 'cp',\n                Deleted: '$del',\n                LimitOrderID: 'loi',\n                LimitOrderLevel: 'lol',\n                MarginReserved: 'mr',\n                MarketID: 'mi',\n                MarketName: 'mn',\n                Price: 'p',\n                OpenPnL: 'upnl',\n                Quantity: 'q',\n                Side: 'si',\n                Side_Buy: 'b',\n                Side_Sell: 's',\n                StopOrderID: 'soi',\n                StopOrderLevel: 'sol',\n                SubAccountID: 'sai',\n                TradeID: 'ti',\n                TransactionTime: 'tt',\n                XRefType: 'xr'\n            },\n\n            /**\n             * Defines the constants for open trade subscription messages.\n             * @property {Object} OpenTradeSubscription\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            OpenTradeSubscription: {\n                MessageType: 'OTS',\n\n                SubscribeType: '$st',\n                SubscribeType_Subscribe: 's',\n                SubscribeType_Unsubscribe: 'u'\n            },\n\n            /**\n             * Defines the constants for order request messages.\n             * @property {Object} OrderRequest\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            OrderRequest: {\n                MessageType: 'ORQ',\n\n                AlertMessage: 'am',\n                CancellingOrderID: 'coi',\n                ClosingOrders: {\n                    TradeID: 'ti',\n                    LimitOrderLevel: 'cllol',\n                    LimitOrderID: 'clloi',\n                    LimitOrderOn: 'clloo',\n                    StopOrderGuaranteedOn: 'clsogo',\n                    StopOrderID: 'clsoi',\n                    StopOrderLevel: 'clsol',\n                    StopOrderOn: 'clsoo',\n                    StopOrderTrailingIncrementSize: 'clsotis',\n                    StopOrderTrailingOn: 'clsoto'\n                },\n                EmailAlertOn: 'eao',\n                MarketID: 'mi',\n                NewOrders: {\n                    GoodTilDateTime: 'gttd',\n                    GoodTilType: 'gtt',\n                    GoodTilType_Cancelled: 'c',\n                    GoodTilType_DateTime: 'd',\n                    GoodTilType_EndOfDay: 'eod',\n                    OCO: {\n                        Level: 'ocol',\n                        LimitOrderLevel: 'ocolol',\n                        LimitOrderOn: 'ocoloo',\n                        OrderID: 'ocooi',\n                        Quantity: 'ocoq',\n                        Side: 'ocosi',\n                        Side_Buy: 'b',\n                        Side_Sell: 's',\n                        StopOrderGuaranteedOn: 'ocosogo',\n                        StopOrderLevel: 'ocosol',\n                        StopOrderOn: 'ocosoo',\n                        StopOrderTrailingIncrementSize: 'ocosotis',\n                        StopOrderTrailingOn: 'ocosoto'\n                    },\n                    OCOOn: 'ocooo',\n                    OrderGroupID: 'ogi',\n                    Primary: {\n                        Level: 'pol',\n                        LimitOrderLevel: 'polol',\n                        LimitOrderOn: 'poloo',\n                        OrderID: 'pooi',\n                        Quantity: 'poq',\n                        Side: 'posi',\n                        Side_Buy: 'b',\n                        Side_Sell: 's',\n                        StopOrderGuaranteedOn: 'posogo',\n                        StopOrderLevel: 'posol',\n                        StopOrderOn: 'posoo',\n                        StopOrderTrailingIncrementSize: 'posotis',\n                        StopOrderTrailingOn: 'posoto'\n                    }\n                },\n                OrderRequestType: 'ort',\n                OrderRequestType_Amend: 'a',\n                OrderRequestType_Cancel: 'c',\n                OrderRequestType_New: 'n',\n                SMSAlertOn: 'sao',\n                SubAccountID: 'sai',\n                TransactionTime: 'tt',\n                UniqueClientIdentifier: 'uid'\n            },\n\n            /**\n             * Defines the constants for poll messages.\n             * @property {Object} Poll\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            Poll: {\n                MessageType: 'P',\n\n                ClientTime: 'ct'\n            },\n\n            /**\n             * Defines the constants for portfolio update messages.\n             * @property {Object} Portfolio\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            Portfolio: {\n                MessageType: 'PF',\n\n                Deleted: '$del',\n                PortfolioID: 'pi',\n                MarketsCount: 'mc',\n                MarketsArray: 'ma',\n                MarketsArray_Object: {\n                    Action: '$act',\n                    Action_Added: 'a',\n                    Action_Updated: 'u',\n                    Action_Deleted: 'd',\n                    MarketID: 'mi',\n                    SortOrder: 'so'\n                }\n            },\n\n            /**\n             * Defines the constants for portfolio add market messages.\n             * @property {Object} PortfolioAddMarket\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            PortfolioAddMarket: {\n                MessageType: 'PFAMRQ',\n\n                PortfolioID: 'pi',\n                MarketID: 'mi'\n            },\n\n            /**\n             * Defines the constants for portfolio remove market messages.\n             * @property {Object} PortfolioRemoveMarket\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            PortfolioRemoveMarket: {\n                MessageType: 'PFRMRQ',\n\n                PortfolioID: 'pi',\n                MarketID: 'mi'\n            },\n\n            /**\n             * Defines the constants for portfolio request messages.\n             * @property {Object} PortfolioRequest\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            /*\n            PortfolioRequest: {\n                MessageType: 'PFRQ',\n\n                PortfolioID: 'pi',\n                UniqueClientIdentifier: 'uid'\n            },\n\n            PortfolioRequestResponse: {\n                MessageType: 'PFRS',\n\n                PortfolioID: 'pi',    \n                MarketsCount: 'mc',\n                MarketsArray: 'ma',\n                MarketsArray_Object: {\n                    MarketID: 'mi'\n                },\n                UniqueClientIdentifier: 'uid'\n            },\n            */\n\n            /**\n             * Defines the constants for portfolio subscription messages.\n             * @property {Object} PortfolioSubscription\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            PortfolioSubscription: {\n                MessageType: 'PFS',\n\n                PortfoliosArray: 'pa',\n                PortfoliosArray_Object: {\n                    PortfolioID: 'pi'\n                },\n                SubscribeType: '$st',\n                SubscribeType_Subscribe: 's',\n                SubscribeType_Unsubscribe: 'u'\n            },\n\n            /**\n             * Defines the constants for price alert update messages.\n             * @property {Object} PriceAlert\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            PriceAlert: {\n                MessageType: 'PA',\n\n                AlertID: 'ai',\n                AlertMessage: 'am',\n                Deleted: '$del',\n                EmailAlertOn: 'eao',\n                HasFired: 'hf',\n                LastTriggered: 'lt',\n                MarketID: 'mi',\n                MarketName: 'm',\n                Side: 'si',\n                Side_Buy: 'b',\n                Side_Sell: 's',\n                SMSAlertOn: 'sao',\n                TransactionTime: 'tt',\n                TriggerPrice: 'tp'\n            },\n\n            /**\n             * Defines the constants for price alert request messages.\n             * @property {Object} PriceAlertRequest\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            PriceAlertRequest: {\n                MessageType: 'PARQ',\n\n                AlertID: 'ai',\n                AlertMessage: 'am',\n                EmailAlertOn: 'eao',\n                MarketID: 'mi',\n                PriceAlertRequestType: 'part',\n                PriceAlertRequestType_Amend: 'a',\n                PriceAlertRequestType_Cancel: 'c',\n                PriceAlertRequestType_New: 'n',\n                Side: 'si',\n                Side_Buy: 'b',\n                Side_Sell: 's',\n                SMSAlertOn: 'sao',\n                TransactionTime: 'tt',\n                TriggerPrice: 'tp',\n                UniqueClientIdentifier: 'uid'\n            },\n\n            /**\n             * Defines the constants for price alert request response messages.\n             * @property {Object} PriceAlertResponse\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            PriceAlertResponse: {\n                MessageType: 'PARS',\n\n                AlertID: 'ai',\n                Result: \"res\",\n                Result_Failure: \"f\",\n                Result_Success: \"s\",\n                Text: 'txt',\n                UniqueClientIdentifier: 'uid'\n            },\n\n            /**\n             * Defines the constants for price alert subscription messages.\n             * @property {Object} PriceAlertSubscription\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            PriceAlertSubscription: {\n                MessageType: 'PAS',\n\n                SubscribeType: '$st',\n                SubscribeType_Subscribe: 's',\n                SubscribeType_Unsubscribe: 'u'\n            },\n\n            /**\n             * Defines the constants for processed (executed/cancelled) order update messages.\n             * @property {Object} ProcessedOrder\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            ProcessedOrder: {\n                MessageType: 'PRO',\n\n                AccountID: 'ai',\n                AssetClass: 'ac',\n                CancelReason: 'cr',\n                CompletedDate: 'cpd',\n                CreatedBy: 'crb',\n                DecimalPlaces: 'dp',\n                Deleted: '$del',\n                ExecutePrice: 'ep',\n                ForcedIncrement: 'fi',\n                GoodTilDateTime: 'gttd',\n                GoodTilType: 'gtt',\n                GuaranteedStopsOn: 'gso',\n                Level: 'l',\n                MarketID: 'mi',\n                MarketName: 'mn',\n                OrderID: 'oi',\n                OrderStatus: 'os',\n                OrderStatus_Executed: 'e',\n                OrderStatus_Cancelled: 'c',\n                OrderStatus_Working: 'w',\n                OrderType: 'ot',\n                OrderType_Stop: 's',\n                OrderType_Limit: 'l',\n                OrderType_New: 'n',\n                OrderType_OCO: 'oco',\n                Quantity: 'q',\n                Side: 'si',\n                Side_Buy: 'b',\n                Side_Sell: 's',\n                SubAccountID: 'sai',\n                TradeID: 'ti',\n                TrailingStopsOn: 'tso',\n                TrailingStopIncrementSize: 'tsis',\n                TransactionTime: 'tt',\n                XRefType: 'xr'\n            },\n\n            /**\n             * Defines the constants for processed (executed/cancelled) order subscription messages.\n             * @property {Object} ProcessedOrderSubscription\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            ProcessedOrderSubscription: {\n                MessageType: 'PROS',\n\n                SubscribeType: '$st',\n                SubscribeType_Subscribe: 's',\n                SubscribeType_Unsubscribe: 'u'\n            },\n\n            /**\n             * Defines the constant for session ID \n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            SessionID: '$sid',\n\n            /**\n             * Defines the constants for sub-account update messages.\n             * @property {Object} SubAccount\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            SubAccount: {\n                MessageType: 'SA',\n\n                AccountID: 'ai',\n                //CashBalance: 'cb',\n                CreditAllocation: 'ca',\n                //CurrencyID: 'ci',\n                CurrencyName: 'cn',\n                CurrencySymbol: 'cs',\n                Deleted: '$del',\n                Funds: 'f',\n                //FundsAvailable: 'fa',\n                MarginReserved: 'mr',\n                MarginReservedManually: 'mrm',\n                MinBet: 'mb',\n                SpreadBettingEnabled: 'sbe',\n                SubAccountID: 'sai',\n                WMRA: 'wm'\n            },\n\n            /**\n             * Defines the constants for trade quote decline messages.\n             * @property {Object} TradeQuoteDecline\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            TradeQuoteDecline: {\n                MessageType: 'TQDRQ',\n\n                QuoteID: 'qi',\n                UniqueClientIdentifier: 'uid'\n            },\n\n            /**\n             * Defines the constants for trade quote request messages.\n             * @property {Object} TradeQuoteRequest\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            TradeQuoteRequest: {\n                MessageType: 'TQRQ',\n\n                MarketID: 'mi',\n                Quantity: 'q',\n                Side: 'si',\n                Side_Buy: 'b',\n                Side_Sell: 's',\n                TransactionTime: 'tt',\n                UniqueClientIdentifier: 'uid'\n            },\n\n            /**\n             * Defines the constants for trade quote request response messages.\n             * @property {Object} TradeQuoteResponse\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            TradeQuoteResponse: {\n                MessageType: 'TQRS',\n\n                QuotedAsk: 'qa',\n                QuotedBid: 'qb',\n                QuotedQuantity: 'qq',\n                QuoteID: 'qi',\n                QuoteStatus: \"qs\",\n                QuoteStatus_DealerClaim: \"c\",\n                QuoteStatus_DealerQuoted: \"q\",\n                QuoteStatus_DealerReject: \"r\",\n                QuoteStatus_Deleted: \"d\",\n                QuoteStatus_Timeout: \"t\",\n                QuoteStatus_Unknown: \"?\",\n                QuoteTimeout: \"qt\",\n                Text: 'txt',\n                TransactionTime: 'tt',\n                UniqueClientIdentifier: 'uid'\n            },\n\n            /**\n             * Defines the constants for trade request messages.\n             * @property {Object} TradeRequest\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            TradeRequest: {\n                MessageType: 'TR',\n\n                AlertMessage: 'am',\n                //ClosePosition: 'cp',     // Not supported yet!!!\n                ClosingTradeID: 'cti',\n                CurrencyName: 'cn',\n                EmailAlertOn: 'eao',\n                LimitOrderLevel: 'lol',\n                MarketID: 'mi',\n                Price: 'p',\n                Quantity: 'q',\n                QuoteID: 'qi',\n                Side: 'si',\n                Side_Buy: 'b',\n                Side_Sell: 's',\n                SMSAlertOn: 'sao',\n                StopOrderGuaranteedOn: 'sogo',\n                StopOrderLevel: 'sol',\n                StopOrderTrailingOn: 'soto',\n                StopOrderTrailingIncrementSize: 'sotis',\n                SubAccountID: 'sai',\n                TransactionTime: 'tt',\n                UniqueClientIdentifier: 'uid'\n            },\n\n            /**\n             * Defines the constants for trade re-quote response messages.\n             * @property {Object} TradeRequoteResponse\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            TradeRequoteResponse: {\n                MessageType: 'TRQRS',\n\n                QuoteID: 'qi',\n                Response: 'r',\n                UniqueClientIdentifier: 'uid'\n            },\n\n            /**\n             * Defines the constants for user settings request messages.\n             * @property {Object} UserSettingsRequest\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            UserSettingsRequest: {\n                MessageType: 'USRQ',\n\n                UniqueClientIdentifier: 'uid',\n                UserSettingsArray: 'usa',\n                UserSettingsArray_Object: {\n                    Deleted: '$del',\n                    Key: 'k',\n                    Value: 'v',\n                },\n                UserSettingsRequestType: 'usrt',\n                UserSettingsRequestType_Get: 'g',\n                UserSettingsRequestType_Overwrite: 'o',\n                UserSettingsRequestType_Update: 'u'\n            },\n\n            /**\n             * Defines the constants for user settings request response messages.\n             * @property {Object} UserSettingsResponse\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            UserSettingsResponse: {\n                MessageType: 'USRS',\n\n                Result: \"res\",\n                Result_Failure: \"f\",\n                Result_Success: \"s\",\n                Text: \"txt\",\n                UniqueClientIdentifier: 'uid',\n                UserSettingsArray: 'usa',\n                UserSettingsArray_Object: {\n                    Deleted: '$del',\n                    Key: 'k',\n                    Value: 'v'\n                }\n            },\n\n            /**\n             * Defines the constants for working order update messages.\n             * @property {Object} WorkingOrder\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            WorkingOrder: {\n                MessageType: 'WO',\n\n                AlertMessage: 'am',\n                AssetClass: 'ac',\n                AssetClass_CFD: 'cfd',\n                AssetClass_FX: 'fx',\n                AssetClass_SB: 'sb',\n                CompletedDate: 'cpd',\n                CreatedBy: 'crb',\n                CurrencyName: 'cn',\n                DecimalPlaces: 'dp',\n                Deleted: '$del',\n                EmailAlertOn: 'eao',\n                ExecutePrice: 'ep',             // Not convinced this is needed fo WOs...\n                GoodTilDateTime: 'gttd',\n                GoodTilType: 'gtt',\n                GoodTilType_Cancelled: 'c',\n                GoodTilType_DateTime: 'd',\n                GoodTilType_EndOfDay: 'eod',\n                GuaranteedStopsOn: 'gso',\n                Level: 'l',\n                LimitOrderID: 'loi',\n                LimitOrderLevel: 'lol',\n                MarketID: 'mi',\n                MarketName: 'mn',\n                OrderGroupID: 'ogi',\n                OrderID: 'oi',\n                OrderStatus: 'os',\n                OrderStatus_Executed: 'e',\n                OrderStatus_Cancelled: 'c',\n                OrderStatus_Working: 'w',\n                OrderType: 'ot',\n                OrderType_Limit: 'l',\n                OrderType_New: 'n',\n                OrderType_OCO: 'oco',\n                OrderType_Stop: 's',\n                Quantity: 'q',\n                Side: 'si',\n                Side_Buy: 'b',\n                Side_Sell: 's',\n                SMSAlertOn: 'sao',\n                StopOrderID: 'soi',\n                StopOrderLevel: 'sol',\n                SubAccountID: 'sai',\n                TradeID: 'ti',\n                TradePrice: 'tp',             // Not convinced this is needed fo WOs...\n                TrailingStopsOn: 'tso',\n                TrailingStopsIncrementSize: 'tsis',\n                TransactionTime: 'tt',\n                XRefType: 'xr'\n            },\n\n            /**\n             * Defines the constants for working order subscription messages.\n             * @property {Object} WorkingOrderSubscription\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            WorkingOrderSubscription: {\n                MessageType: 'WOS',\n\n                SubscribeType: '$st',\n                SubscribeType_Subscribe: 's',\n                SubscribeType_Unsubscribe: 'u'\n            }\n            // #endregion\n        },\n\n        // NOTE: These have deliberately been anotated WITHOUT '/**' comment tags, as they\n        //       should NOT be included in the documentation.\n        /*\n         * Defines the constants for transport type (e.g. websocket, long poll)\n         * @property {Object} TransportType\n         * @member ETX.clientAPI.Constants.TransportType\n         * @static\n         * @readonly\n         */\n        TransportType: {\n            LongPoll: 'LongPoll',\n            None: 'None',\n            WebSocket: 'WebSocket'\n        }\n    };\n    // #endregion\n    //----END-PUBLIC----------\n\n    return _constants;\n    // #endregion\n    //-END-CONSTRUCTOR--------\n\n})();\n\n/// <reference path=\"../../_references.js\" />\n\nETX.namespace('clientAPI');\n\n/**\n * @class ETX.clientAPI.Helpers \n *\n * @static\n * @singleton\n * @readonly\n *\n * @requires ETX\n * @requires ETX.logging.Logger\n * @requires CryptoJS.SHA256\n * @requires jQuery\n * @requires Moment.js\n *\n * `ETX.clientAPI.Helpers` singleton contains helper functions for the `ETX` modules.   \n *    \n * **NOTE:** Requires the following third-party JavaScript libraries:   \n *\n *  +  [CryptoJS.SHA256](https://code.google.com/p/crypto-js/)\n *  +  [jQuery](http://api.jquery.com/)\n *  +  [Moment.js](http://momentjs.com/)\n */\nETX.clientAPI.Helpers = (function () {\n\n    'use strict';\n\n    //-CONSTRUCTOR------------\n    // #region\n    //----PRIVATE-------------\n    var _helpers = {},\n        _customDateFormats = [\"YYYYMMDD-HH:mm:ss\"];\n    //----END-PRIVATE---------\n\n    //----PUBLIC--------------\n    _helpers = {\n\n        // Converters\n        // #region\n        /** \n         * Gets the (read only) section for conversion helpers.\n         * @property {ETX.clientAPI.Helpers.convert} convert\n         * @static\n         * @readonly\n         */\n        convert: {\n            toBoolean: toBoolean,\n            toDate: toDate,\n            toHash: toHash\n        },\n        // #endregion\n        // Converters\n\n\n        // Comparers\n        // #region\n        /** \n         * Gets the (read only) section for comparison helpers.\n         * @property {ETX.clientAPI.Helpers.compare} compare\n         * @static\n         * @readonly\n         */\n        compare: {\n            isIdentifier: isIdentifier,\n            isNullOrEmpty: isNullOrEmpty\n        },\n        // #endregion\n        // Comparers\n\n\n        // Formatters\n        // #region\n        /** \n         * Gets the (read only) section for formatting helpers.\n         * @property {ETX.clientAPI.Helpers.format} format\n         * @static\n         * @readonly\n         */\n        format: {\n            asAssetClassText: asAssetClassText,\n            asString: asString,\n            asYesNoFlag: asYesNoFlag,\n            asYesNoUndeterminedFlag: asYesNoUndeterminedFlag\n        },\n        // #endregion\n        // Formatters\n\n\n        // Utilities\n        // #region\n        /** \n         * Gets the (read only) section for utility helpers.\n         * @property {ETX.clientAPI.Helpers.utility} utilities\n         * @static\n         * @readonly\n         */\n        utility: {\n            ieVersion: ieVersion\n        }\n        // #endregion\n        // Utilities\n\n    };\n    //----END-PUBLIC----------\n\n    return _helpers;\n    // #endregion\n    //-END-CONSTRUCTOR--------\n\n\n    //-METHODS----------------\n    // #region\n    // Converters\n    // #region\n    /**\n     * Resolves the value provided to a Boolean value.\n     *\n     * @method toBoolean\n     * @param {Object} value - Value to resolve to a Boolean value.\n     * @returns {Boolean}\n     *\n     * @member ETX.clientAPI.Helpers.convert\n     * @static\n     */\n    function toBoolean(value) {\n        if (value === true) {\n            return true;\n        }\n        if (_helpers.compare.isNullOrEmpty(value) === false) {\n            switch (value.toString().toUpperCase()[0]) {\n                case 'Y':\n                case 'T':\n                case '1':\n                    return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Resolves the value provided to a Date value.\n     *\n     * @method toDate\n     * @param {Object} value - Value to resolve to a Date value.\n     * @param {String|Array} [formats] - (Optional) Array or individual date format string(s).\n     * @returns {Date}\n     *\n     * @member ETX.clientAPI.Helpers.convert\n     * @static\n     */\n    function toDate(value, formats) {\n        // Perform default\n        var date = moment(value);\n        if (date.isValid()) {\n            return date.toDate();\n        }\n        var fmts = [].concat(_customDateFormats);\n        if (formats) {\n            fmts = [].concat(fmts, formats);\n        }\n        date = moment(value, fmts.length == 1 ? fmts[0] : fmts);\n        if (date.isValid()) {\n            return date.toDate();\n        }\n        return undefined;\n    }\n\n    /**\n     * Encrypts the value provided using SHA256 hashing algorithm.\n     *\n     * @method toHash\n     * @param {Object} value - Value to SHA256 hash encrypt.\n     * @returns {String}\n     *\n     * @member ETX.clientAPI.Helpers.convert\n     * @static\n     */\n    function toHash(value) {\n        var hash = '',\n            hashDigest = CryptoJS.SHA256(value);\n        if (hashDigest) {\n            hash = hashDigest.toString();\n        }\n        return hash;\n    }\n    // #endregion\n    // Converters\n\n\n    // Comparers\n    // #region\n    /**\n     * Determines whether the value provided could potentially be an entity identifier.\n     *\n     * @method isIdentifier\n     * @param {Object} value - Value to test as an entity identifier.\n     * @returns {Boolean} - If true, then value could be an entity identifier, else the value is almost deifinitely not an entity identifier.\n     *\n     * @member ETX.clientAPI.Helpers.compare\n     * @static\n     */\n    function isIdentifier(value) {\n        if ((_helpers.compare.isNullOrEmpty(value) === false) && (value !== '0')) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Determines whether the value provided is `undefined`, `null` or an empty `String`.\n     *\n     * @method isNullOrEmpty\n     * @param {Object} value - Value to test.\n     * @returns {Boolean}\n     *\n     * @member ETX.clientAPI.Helpers.compare\n     * @static\n     */\n    function isNullOrEmpty(value) {\n        if ((value === undefined) || (value === null) || (value === '')) {\n            return true;\n        }\n        return false;\n    }\n    // #endregion\n    // Comparers\n\n\n    // Formatters\n    // #region\n    /**\n     * Formats the asset class provided as user friendly display text.\n     *\n     * @method asAssetClassText\n     * @param {Object} assetClass - Asset class to format as user friendly display text.\n     * @returns {String} - Formatted user friendly display text.\n     *\n     * @member ETX.clientAPI.Helpers.format\n     * @static\n     */\n    function asAssetClassText(assetClass) {\n        switch (assetClass) {\n            case 'cfd':\n            case '1':\n                { return 'CFD'; }\n            case 'fx':\n            case '2':\n                { return 'FX'; }\n            case 'sb':\n            case '3':\n                { return 'Spread'; }\n            default:\n                { return assetClass; }\n        }\n    }\n\n    /**\n     * Formats the value provided as a `String`.\n     *\n     * @method asString\n     * @param {Object} value - Value to format as a `String`.\n     * @returns {String} - Formatted `String`.\n     *\n     * @member ETX.clientAPI.Helpers.format\n     * @static\n     */\n    function asString(value) {\n        if (_helpers.compare.isNullOrEmpty(value) === false) {\n            return value.toString();\n        }\n        return '';\n    }\n\n    /**\n     * Formats the value provided as a yes/no flag (i.e. `'Y'` or `'N'`).\n     *\n     * @method asYesNoFlag\n     * @param {Object} value - Value to format as a yes/no flag.\n     * @returns {String} - Formatted yes/no flag.\n     *\n     * @member ETX.clientAPI.Helpers.format\n     * @static\n     */\n    function asYesNoFlag(value) {\n        if (_helpers.convert.toBoolean(value)) {\n            return 'Y';\n        }\n        return 'N';\n    }\n\n    /**\n     * Formats the value provided as a yes/no/undetermined flag (i.e. `'Y'`, `'N'` or `'?'`).\n     *\n     * @method asYesNoUndeterminedFlag\n     * @param {Object} value - Value to format as a yes/no flag.\n     * @param {String} [defaultUndeterminedFlag='?'] - (Optional) Default flag value to use for undetermined values.\n     * @returns {String} - Formatted yes/no/undetermined flag.\n     *\n     * @member ETX.clientAPI.Helpers.format\n     * @static\n     */\n    function asYesNoUndeterminedFlag(value, defaultUndeterminedFlag) {\n        if (defaultUndeterminedFlag === undefined) {\n            defaultUndeterminedFlag = '?';\n        }\n        if ((_helpers.compare.isNullOrEmpty(value) === false) && (value !== defaultUndeterminedFlag)) {\n            return _helpers.format.asYesNoFlag(value);\n        }\n        return defaultUndeterminedFlag;\n    }\n    // #endregion\n    // Formatters\n\n\n    // Utilities\n    // #region\n    /**\n     * Returns the version of Internet Explorer (or undefined if IE not detected or IE version is less than 5)\n     *\n     * @method ieVersion\n     * @returns {Number} - The IE version detected (or undefined if IE not detected or IE version is less than 5)\n     *\n     * @member ETX.clientAPI.Helpers.utility\n     * @static\n     */\n    function ieVersion() {\n        var undef, rv = -1; // Return value assumes failure.\n        var ua = window.navigator.userAgent;\n        var msie = ua.indexOf('MSIE ');\n        var trident = ua.indexOf('Trident/');\n\n        if (msie > 0) {\n            // IE 10 or older => return version number\n            rv = parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n        } else if (trident > 0) {\n            // IE 11 (or newer) => return version number\n            var rvNum = ua.indexOf('rv:');\n            rv = parseInt(ua.substring(rvNum + 3, ua.indexOf('.', rvNum)), 10);\n        }\n        return ((rv > -1) ? rv : undef);\n    }\n    // #endregion\n    // Utilities\n    // #endregion\n    //-END-METHODS------------\n\n})();\n\n/// <reference path=\"../../_references.js\" />\n\nETX.namespace('clientAPI');\n\nETX.clientAPI.Messages = (function () {\n\n    'use strict';\n\n    //-CONSTRUCTOR------------\n    // #region\n    //----PRIVATE-------------\n    // #region\n    var _messages = {},\n        _constMsgs = ETX.clientAPI.Constants.messages,\n        _helpers = ETX.clientAPI.Helpers;\n    // #endregion\n    //----END-PRIVATE---------\n\n    //----PUBLIC--------------\n    // #region\n    _messages.buildUniqueClientIdentifier = function (messageType, uniqueToken) {\n        var uid = messageType + '_' + uniqueToken;\n        return uid;\n    }\n    _messages.createAccountSubscribeMessage = function () {\n        var msg = { T: _constMsgs.AccountSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.AccountSubscription.SubscribeType] = _constMsgs.AccountSubscription.SubscribeType_Subscribe;\n        return msg;\n    };\n    _messages.createAccountUnsubscribeMessage = function () {\n        var msg = { T: _constMsgs.AccountSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.AccountSubscription.SubscribeType] = _constMsgs.AccountSubscription.SubscribeType_Unsubscribe;\n        return msg;\n    };\n    _messages.createAccountTransactionSubscribeMessage = function () {\n        var msg = { T: _constMsgs.AccountTransactionSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.AccountTransactionSubscription.SubscribeType] = _constMsgs.AccountTransactionSubscription.SubscribeType_Subscribe;\n        return msg;\n    };\n    _messages.createAccountTransactionUnsubscribeMessage = function () {\n        var msg = { T: _constMsgs.AccountTransactionSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.AccountTransactionSubscription.SubscribeType] = _constMsgs.AccountTransactionSubscription.SubscribeType_Unsubscribe;\n        return msg;\n    };\n    _messages.createAggregateAccountSubscribeMessage = function (subAccountIDs) {\n        var msg = { T: _constMsgs.AggregateAccountSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.AggregateAccountSubscription.SubscribeType] = _constMsgs.AggregateAccountSubscription.SubscribeType_Subscribe;\n        tags[_constMsgs.AggregateAccountSubscription.SubAccountArray] = [];\n\n        var idArray = tags[_constMsgs.AggregateAccountSubscription.SubAccountArray];\n        for (var n = 0; n < subAccountIDs.length; n++) {\n            var sa = {};\n            sa[_constMsgs.AggregateAccountSubscription.SubAccountArray_Object.SubAccountID] = subAccountIDs[n];\n            idArray.push(sa);\n        }\n        return msg;\n    };\n    _messages.createAggregateAccountUnsubscribeMessage = function (subAccountIDs) {\n        var msg = { T: _constMsgs.AggregateAccountSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.AggregateAccountSubscription.SubscribeType] = _constMsgs.AggregateAccountSubscription.SubscribeType_Unsubscribe;\n        tags[_constMsgs.AggregateAccountSubscription.SubAccountArray] = [];\n\n        var idArray = tags[_constMsgs.AggregateAccountSubscription.SubAccountArray];\n        for (var n = 0; n < subAccountIDs.length; n++) {\n            var sa = {};\n            sa[_constMsgs.AggregateAccountSubscription.SubAccountArray_Object.SubAccountID] = subAccountIDs[n];\n            idArray.push(sa);\n        }\n        return msg;\n    };\n    _messages.createClosedTradesSubscribeMessage = function () {\n        var msg = { T: _constMsgs.ClosedTradeSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.ClosedTradeSubscription.SubscribeType] = _constMsgs.ClosedTradeSubscription.SubscribeType_Subscribe;\n        return msg;\n    };\n    _messages.createClosedTradesUnsubscribeMessage = function () {\n        var msg = { T: _constMsgs.ClosedTradeSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.ClosedTradeSubscription.SubscribeType] = _constMsgs.ClosedTradeSubscription.SubscribeType_Unsubscribe;\n        return msg;\n    };\n    _messages.createExchangeRateSubscribeMessage = function (currencyPairs) {\n        var msg = { T: _constMsgs.ExchangeRateSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.ExchangeRateSubscription.SubscribeType] = _constMsgs.ExchangeRateSubscription.SubscribeType_Subscribe;\n        tags[_constMsgs.ExchangeRateSubscription.CurrencyPairArray] = [];\n\n        // Add each currency pair to the array\n        var repeatingGroupParent = tags[_constMsgs.ExchangeRateSubscription.CurrencyPairArray];\n        for (var n = 0; n < currencyPairs.length; n++) {\n            var exchangeRate = {};\n            exchangeRate[_constMsgs.ExchangeRate.CurrencyPair] = currencyPairs[n];\n            repeatingGroupParent.push(exchangeRate);\n        };\n        return msg;\n    };\n    _messages.createExchangeRateUnsubscribeMessage = function (currencyPairs) {\n        var msg = { T: _constMsgs.ExchangeRateSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.ExchangeRateSubscription.SubscribeType] = _constMsgs.ExchangeRateSubscription.SubscribeType_Unsubscribe;\n        tags[_constMsgs.ExchangeRateSubscription.CurrencyPairArray] = [];\n\n        // Add each currency pair to the array\n        var repeatingGroupParent = tags[_constMsgs.ExchangeRateSubscription.CurrencyPairArray];\n        for (var n = 0; n < currencyPairs.length; n++) {\n            var exchangeRate = {};\n            exchangeRate[_constMsgs.ExchangeRate.CurrencyPair] = currencyPairs[n];\n            repeatingGroupParent.push(exchangeRate);\n        };\n        return msg;\n    };\n    _messages.createGroupMarketSubscribeMessage = function (groupIDs) {\n        var msg = { T: _constMsgs.GroupMarketsSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.GroupMarketsSubscription.SubscribeType] = _constMsgs.GroupMarketsSubscription.SubscribeType_Subscribe;\n        tags[_constMsgs.GroupMarketsSubscription.GroupsArray] = [];\n\n        // Add each group to the array\n        var repeatingGroupParent = tags[_constMsgs.GroupMarketsSubscription.GroupsArray];\n        for (var n = 0; n < groupIDs.length; n++) {\n            var group = {};\n            group[_constMsgs.GroupMarketsSubscription.GroupsArray_Object.GroupID] = groupIDs[n];\n            repeatingGroupParent.push(group);\n        };\n        return msg;\n    };\n    _messages.createGroupMarketUnsubscribeMessage = function (groupIDs) {\n        var msg = { T: _constMsgs.GroupMarketsSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.GroupMarketsSubscription.SubscribeType] = _constMsgs.GroupMarketsSubscription.SubscribeType_Unsubscribe;\n        tags[_constMsgs.GroupMarketsSubscription.GroupsArray] = [];\n\n        // Add each group to the array\n        var repeatingGroupParent = tags[_constMsgs.GroupMarketsSubscription.GroupsArray];\n        for (var n = 0; n < groupIDs.length; n++) {\n            var group = {};\n            group[_constMsgs.GroupMarketsSubscription.GroupsArray_Object.GroupID] = groupIDs[n];\n            repeatingGroupParent.push(group);\n        };\n        return msg;\n    };\n    _messages.createGroupSearchMessage = function (uniqueClientIdentifier, parentGroupID) {\n        var msg = { T: _constMsgs.GroupSearch.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.GroupSearch.UniqueClientIdentifier] = uniqueClientIdentifier;\n        if (_helpers.compare.isIdentifier(parentGroupID)) {\n            tags[_constMsgs.GroupSearch.ParentGroupID] = parentGroupID;\n        }\n        return msg;\n    };\n    _messages.createHistoricTradesSubscribeMessage = function () {\n        var msg = { T: _constMsgs.HistoricTradeSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.HistoricTradeSubscription.SubscribeType] = _constMsgs.HistoricTradeSubscription.SubscribeType_Subscribe;\n        return msg;\n    };\n    _messages.createHistoricTradesUnsubscribeMessage = function () {\n        var msg = { T: _constMsgs.HistoricTradeSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.HistoricTradeSubscription.SubscribeType] = _constMsgs.HistoricTradeSubscription.SubscribeType_Unsubscribe;\n        return msg;\n    };\n    _messages.createLogOffMessage = function () {\n        var msg = { T: _constMsgs.LogOff.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.LogOff.ReasonCode] = _constMsgs.LogOff.ReasonCode_UserLoggedOut;\n        tags[_constMsgs.LogOff.Text] = 'User requested log off';\n        return msg;\n    };\n    _messages.createLogOnMessage = function (username, password, brokerID, anonymityToken, version, authenticationKey) {\n        var msg = { T: _constMsgs.LogOn.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.LogOn.Username] = username;\n        tags[_constMsgs.LogOn.Password] = password;\n        tags[_constMsgs.LogOn.Broker] = brokerID;\n        tags[_constMsgs.LogOn.AnonymityToken] = anonymityToken;\n        tags[_constMsgs.LogOn.APIType] = 'clientapi-js';\n        tags[_constMsgs.LogOn.APIVersion] = version || '1.00.00';\n        tags[_constMsgs.LogOn.AuthenticationKey] = authenticationKey;\n        return msg;\n    };\n    _messages.createLogOnMessageWithAuthKey = function (username, password, brokerID, anonymityToken, version, authenticationKey) {\n        var msg = { T: _constMsgs.LogOn.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.LogOn.Username] = username;\n        tags[_constMsgs.LogOn.AuthenticationKey] = authenticationKey;\n        tags[_constMsgs.LogOn.Password] = password;\n        tags[_constMsgs.LogOn.Broker] = brokerID;\n        tags[_constMsgs.LogOn.AnonymityToken] = anonymityToken;\n        tags[_constMsgs.LogOn.APIType] = 'clientapi-js';\n        tags[_constMsgs.LogOn.APIVersion] = version || '1.00.00';\n        return msg;\n    };\n    _messages.createMarketSearchMessage = function (uniqueClientIdentifier, searchTerm, searchConstraint) {\n        var msg = { T: _constMsgs.MarketSearch.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.MarketSearch.UniqueClientIdentifier] = uniqueClientIdentifier;\n        tags[_constMsgs.MarketSearch.SearchTerm] = searchTerm;\n        if (searchConstraint === _constMsgs.MarketSearch.SearchConstraint_StartsWith) {\n            tags[_constMsgs.MarketSearch.SearchConstraint] = _constMsgs.MarketSearch.SearchConstraint_StartsWith;\n        } else {\n            tags[_constMsgs.MarketSearch.SearchConstraint] = _constMsgs.MarketSearch.SearchConstraint_Contains;\n        }\n        return msg;\n    };\n    _messages.createMarketSubscribeMessage = function (saMarkets) {\n        var msg = { T: _constMsgs.MarketSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.MarketSubscription.SubscribeType] = _constMsgs.MarketSubscription.SubscribeType_Subscribe;\n        tags[_constMsgs.MarketSubscription.MarketsArray] = [];\n\n        // Add each market to the array\n        var repeatingGroupParent = tags[_constMsgs.MarketSubscription.MarketsArray];\n        for (var n = 0; n < saMarkets.length; n++) {\n            var market = {};\n            market[_constMsgs.MarketSubscription.MarketsArray_Object.MarketID] = saMarkets[n];\n            repeatingGroupParent.push(market);\n        };\n        return msg;\n    };\n    _messages.createMarketUnsubscribeMessage = function (saMarkets) {\n        var msg = { T: _constMsgs.MarketSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.MarketSubscription.SubscribeType] = _constMsgs.MarketSubscription.SubscribeType_Unsubscribe;\n        tags[_constMsgs.MarketSubscription.MarketsArray] = [];\n\n        // Add each market to the array\n        var repeatingGroupParent = tags[_constMsgs.MarketSubscription.MarketsArray];\n        for (var n = 0; n < saMarkets.length; n++) {\n            var market = {};\n            market[_constMsgs.MarketSubscription.MarketsArray_Object.MarketID] = saMarkets[n];\n            repeatingGroupParent.push(market);\n        };\n        return msg;\n    };\n    _messages.createOpenTradesSubscribeMessage = function () {\n        var msg = { T: _constMsgs.OpenTradeSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.OpenTradeSubscription.SubscribeType] = _constMsgs.OpenTradeSubscription.SubscribeType_Subscribe;\n        return msg;\n    };\n    _messages.createOpenTradesUnsubscribeMessage = function () {\n        var msg = { T: _constMsgs.OpenTradeSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.OpenTradeSubscription.SubscribeType] = _constMsgs.OpenTradeSubscription.SubscribeType_Unsubscribe;\n        return msg;\n    };\n    _messages.createOrderRequestMessage = function (uniqueClientIdentifier, transactiontime, orderRequest) {\n        var msg = { T: _constMsgs.OrderRequest.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.OrderRequest.UniqueClientIdentifier] = uniqueClientIdentifier;\n        tags[_constMsgs.OrderRequest.TransactionTime] = transactiontime;\n\n        // Core\n        // #region\n        switch ((orderRequest.orderRequestType || '').toLowerCase()) {\n            case 'new':\n            case ETX.clientAPI.requests.OrderRequest.requestTypes.NEW:\n                tags[_constMsgs.OrderRequest.OrderRequestType] = _constMsgs.OrderRequest.OrderRequestType_New;\n                break;\n\n            case 'amend':\n            case ETX.clientAPI.requests.OrderRequest.requestTypes.AMEND:\n                tags[_constMsgs.OrderRequest.OrderRequestType] = _constMsgs.OrderRequest.OrderRequestType_Amend;\n                break;\n\n            case 'cancel':\n            case ETX.clientAPI.requests.OrderRequest.requestTypes.CANCEL:\n                tags[_constMsgs.OrderRequest.OrderRequestType] = _constMsgs.OrderRequest.OrderRequestType_Cancel;\n                break;\n        }\n        tags[_constMsgs.OrderRequest.MarketID] = orderRequest.marketID;\n        // #endregion\n        // Core\n\n        switch (tags[_constMsgs.OrderRequest.OrderRequestType]) {\n\n            // ORDER NEW/AMEND\n            case _constMsgs.OrderRequest.OrderRequestType_New:\n            case _constMsgs.OrderRequest.OrderRequestType_Amend:\n                {\n                    // Core\n                    // #region\n                    tags[_constMsgs.OrderRequest.SubAccountID] = orderRequest.subAccountID;\n                    // #endregion\n                    // Core\n\n                    // Include the trade ID of the closing order(s) to be cancelled, if any...\n                    if (_helpers.compare.isIdentifier(orderRequest.closingOrders.tradeID) == false) {\n\n                        // OCO specific\n                        // #region\n                        if (_helpers.compare.isIdentifier(orderRequest.newOrders.orderGroupID)) {\n                            tags[_constMsgs.OrderRequest.OrderGroupID] = orderRequest.newOrders.orderGroupID;\n                        }\n                        // #endregion\n                        // OCO specific\n\n                        // Primary Order specific\n                        // #region\n                        // Include the primary order details...\n                        if (_helpers.compare.isIdentifier(orderRequest.newOrders.primaryOrder.orderID)) {\n                            tags[_constMsgs.OrderRequest.NewOrders.Primary.OrderID] = orderRequest.newOrders.primaryOrder.orderID;\n                        }\n                        switch ((orderRequest.newOrders.primaryOrder.side || '').toLowerCase()) {\n                            case 'buy':\n                            case ETX.clientAPI.requests.OrderRequest.sides.BUY:\n                                tags[_constMsgs.OrderRequest.NewOrders.Primary.Side] = _constMsgs.OrderRequest.NewOrders.Primary.Side_Buy;\n                                break;\n\n                            case 'sell':\n                            case ETX.clientAPI.requests.OrderRequest.sides.SELL:\n                                tags[_constMsgs.OrderRequest.NewOrders.Primary.Side] = _constMsgs.OrderRequest.NewOrders.Primary.Side_Sell;\n                                break;\n                        }\n                        tags[_constMsgs.OrderRequest.NewOrders.Primary.Level] = _helpers.format.asString(orderRequest.newOrders.primaryOrder.level);\n                        tags[_constMsgs.OrderRequest.NewOrders.Primary.Quantity] = _helpers.format.asString(orderRequest.newOrders.primaryOrder.quantity);\n                        // Include the primary stop order details...\n                        tags[_constMsgs.OrderRequest.NewOrders.Primary.StopOrderOn] = _helpers.convert.toBoolean(orderRequest.newOrders.primaryOrder.stopOrderOn);\n                        if (tags[_constMsgs.OrderRequest.NewOrders.Primary.StopOrderOn]) {\n                            tags[_constMsgs.OrderRequest.NewOrders.Primary.StopOrderLevel] = _helpers.format.asString(orderRequest.newOrders.primaryOrder.stopOrderLevel);\n                            tags[_constMsgs.OrderRequest.NewOrders.Primary.StopOrderGuaranteedOn] = _helpers.convert.toBoolean(orderRequest.newOrders.primaryOrder.stopOrderGuaranteedOn);\n                            tags[_constMsgs.OrderRequest.NewOrders.Primary.StopOrderTrailingOn] = _helpers.convert.toBoolean(orderRequest.newOrders.primaryOrder.stopOrderTrailingOn);\n                            tags[_constMsgs.OrderRequest.NewOrders.Primary.StopOrderTrailingIncrementSize] = _helpers.format.asString(orderRequest.newOrders.primaryOrder.stopOrderTrailingIncrementSize);\n                        }\n                        // Include the primary limit order details...\n                        tags[_constMsgs.OrderRequest.NewOrders.Primary.LimitOrderOn] = _helpers.convert.toBoolean(orderRequest.newOrders.primaryOrder.limitOrderOn);\n                        if (tags[_constMsgs.OrderRequest.NewOrders.Primary.LimitOrderOn]) {\n                            tags[_constMsgs.OrderRequest.NewOrders.Primary.LimitOrderLevel] = _helpers.format.asString(orderRequest.newOrders.primaryOrder.limitOrderLevel);\n                        }\n                        // #endregion\n                        // Primary Order specific\n\n                        // OCO Order specific\n                        // #region\n                        tags[_constMsgs.OrderRequest.NewOrders.OCOOn] = _helpers.convert.toBoolean(orderRequest.newOrders.ocoOrderOn);\n                        if (tags[_constMsgs.OrderRequest.NewOrders.OCOOn]) {\n                            // Include the OCO order details...\n                            if (_helpers.compare.isIdentifier(orderRequest.newOrders.ocoOrder.orderID)) {\n                                tags[_constMsgs.OrderRequest.NewOrders.OCO.OrderID] = orderRequest.newOrders.ocoOrder.orderID;\n                            }\n                            switch ((orderRequest.newOrders.ocoOrder.side || '').toLowerCase()) {\n                                case 'buy':\n                                case ETX.clientAPI.requests.OrderRequest.sides.BUY:\n                                    tags[_constMsgs.OrderRequest.NewOrders.OCO.Side] = _constMsgs.OrderRequest.NewOrders.OCO.Side_Buy;\n                                    break;\n\n                                case 'sell':\n                                case ETX.clientAPI.requests.OrderRequest.sides.SELL:\n                                    tags[_constMsgs.OrderRequest.NewOrders.OCO.Side] = _constMsgs.OrderRequest.NewOrders.OCO.Side_Sell;\n                                    break;\n                            }\n                            tags[_constMsgs.OrderRequest.NewOrders.OCO.Side] = orderRequest.newOrders.ocoOrder.side;\n                            tags[_constMsgs.OrderRequest.NewOrders.OCO.Level] = _helpers.format.asString(orderRequest.newOrders.ocoOrder.level);\n                            tags[_constMsgs.OrderRequest.NewOrders.OCO.Quantity] = _helpers.format.asString(orderRequest.newOrders.ocoOrder.quantity);\n                            // Include the OCO stop order details...\n                            tags[_constMsgs.OrderRequest.NewOrders.OCO.StopOrderOn] = _helpers.convert.toBoolean(orderRequest.newOrders.ocoOrder.stopOrderOn);\n                            if (tags[_constMsgs.OrderRequest.NewOrders.OCO.StopOrderOn]) {\n                                tags[_constMsgs.OrderRequest.NewOrders.OCO.StopOrderLevel] = _helpers.format.asString(orderRequest.newOrders.ocoOrder.stopOrderLevel);\n                                tags[_constMsgs.OrderRequest.NewOrders.OCO.StopOrderGuaranteedOn] = _helpers.convert.toBoolean(orderRequest.newOrders.ocoOrder.stopOrderGuaranteedOn);\n                                tags[_constMsgs.OrderRequest.NewOrders.OCO.StopOrderTrailingOn] = _helpers.convert.toBoolean(orderRequest.newOrders.ocoOrder.stopOrderTrailingOn);\n                                tags[_constMsgs.OrderRequest.NewOrders.OCO.StopOrderTrailingIncrementSize] = _helpers.format.asString(orderRequest.newOrders.ocoOrder.stopOrderTrailingIncrementSize);\n                            }\n                            // Include the OCO limit order details...\n                            tags[_constMsgs.OrderRequest.NewOrders.OCO.LimitOrderOn] = _helpers.convert.toBoolean(orderRequest.newOrders.ocoOrder.limitOrderOn);\n                            if (tags[_constMsgs.OrderRequest.NewOrders.OCO.LimitOrderOn]) {\n                                tags[_constMsgs.OrderRequest.NewOrders.OCO.LimitOrderLevel] = _helpers.format.asString(orderRequest.newOrders.ocoOrder.limitOrderLevel);\n                            }\n                        }\n                        // #endregion\n                        // OCO Order specific\n\n                        // Misc\n                        // #region\n                        // Include the good til details...\n                        switch ((orderRequest.newOrders.goodTilType || '').toLowerCase()) {\n                            case 'cancelled':\n                            case ETX.clientAPI.requests.OrderRequest.goodTilTypes.CANCELLED:\n                                tags[_constMsgs.OrderRequest.NewOrders.GoodTilType] = _constMsgs.OrderRequest.NewOrders.GoodTilType_Cancelled;\n                                break;\n\n                            case 'endofday':\n                            case ETX.clientAPI.requests.OrderRequest.goodTilTypes.END_OF_DAY:\n                                tags[_constMsgs.OrderRequest.NewOrders.GoodTilType] = _constMsgs.OrderRequest.NewOrders.GoodTilType_EndOfDay;\n                                break;\n\n                            case 'date':\n                            case ETX.clientAPI.requests.OrderRequest.goodTilTypes.DATE:\n                                tags[_constMsgs.OrderRequest.NewOrders.GoodTilType] = _constMsgs.OrderRequest.NewOrders.GoodTilType_DateTime;\n                                var goodTilDateTime = moment(orderRequest.newOrders.goodTilDateTime);\n                                tags[_constMsgs.OrderRequest.NewOrders.GoodTilDateTime] = goodTilDateTime.isValid() ? goodTilDateTime.toISOString() : orderRequest.newOrders.goodTilDateTime;\n                                break;\n                        }\n                        // Include the alert details...\n                        tags[_constMsgs.OrderRequest.EmailAlertOn] = _helpers.convert.toBoolean(orderRequest.emailAlertOn);\n                        tags[_constMsgs.OrderRequest.SMSAlertOn] = _helpers.convert.toBoolean(orderRequest.smsAlertOn);\n                        tags[_constMsgs.OrderRequest.AlertMessage] = orderRequest.alertMessage;\n                        // #endregion\n                        // Misc\n\n                    } else {\n\n                        // Closing Order specific\n                        // #region\n                        // Include the trade ID of the closing order(s) to be cancelled, if any...\n                        if (_helpers.compare.isIdentifier(orderRequest.closingOrders.tradeID)) {\n                            tags[_constMsgs.OrderRequest.ClosingOrders.TradeID] = orderRequest.closingOrders.tradeID;\n                        }\n                        // Include the primary stop order details...\n                        tags[_constMsgs.OrderRequest.ClosingOrders.StopOrderOn] = _helpers.convert.toBoolean(orderRequest.closingOrders.stopOrderOn);\n                        if (tags[_constMsgs.OrderRequest.ClosingOrders.StopOrderOn]) {\n                            tags[_constMsgs.OrderRequest.ClosingOrders.StopOrderLevel] = _helpers.format.asString(orderRequest.closingOrders.stopOrderLevel);\n                            tags[_constMsgs.OrderRequest.ClosingOrders.StopOrderGuaranteedOn] = _helpers.convert.toBoolean(orderRequest.closingOrders.stopOrderGuaranteedOn);\n                            tags[_constMsgs.OrderRequest.ClosingOrders.StopOrderTrailingOn] = _helpers.convert.toBoolean(orderRequest.closingOrders.stopOrderTrailingOn);\n                            tags[_constMsgs.OrderRequest.ClosingOrders.StopOrderTrailingIncrementSize] = _helpers.format.asString(orderRequest.closingOrders.stopOrderTrailingIncrementSize);\n                        }\n                        // Include the primary limit order details...\n                        tags[_constMsgs.OrderRequest.ClosingOrders.LimitOrderOn] = _helpers.convert.toBoolean(orderRequest.closingOrders.limitOrderOn);\n                        if (tags[_constMsgs.OrderRequest.ClosingOrders.LimitOrderOn]) {\n                            tags[_constMsgs.OrderRequest.ClosingOrders.LimitOrderLevel] = _helpers.format.asString(orderRequest.closingOrders.limitOrderLevel);\n                        }\n                        // #endregion\n                        // Closing Order specific\n\n                        // Misc\n                        // #region\n                        // Include the alert details...\n                        tags[_constMsgs.OrderRequest.EmailAlertOn] = _helpers.convert.toBoolean(orderRequest.emailAlertOn);\n                        tags[_constMsgs.OrderRequest.SMSAlertOn] = _helpers.convert.toBoolean(orderRequest.smsAlertOn);\n                        tags[_constMsgs.OrderRequest.AlertMessage] = orderRequest.alertMessage;\n                        // #endregion\n                        // Misc\n\n                    }\n                }\n                break;\n\n                // ORDER CANCEL\n            case _constMsgs.OrderRequest.OrderRequestType_Cancel:\n                {\n                    // Include the order ID to be cancelled...\n                    tags[_constMsgs.OrderRequest.CancellingOrderID] = orderRequest.cancellingOrderID;\n                }\n                break;\n        }\n\n        return msg;\n    };\n    _messages.createPollMessage = function () {\n        var msg = { T: _constMsgs.Poll.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.Poll.ClientTime] = new Date().getTime();\n        return msg;\n    };\n    _messages.createPortfolioAddMarketMessage = function (portfolioID, marketID) {\n        var msg = { T: _constMsgs.PortfolioAddMarket.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.PortfolioAddMarket.PortfolioID] = portfolioID;\n        tags[_constMsgs.PortfolioAddMarket.MarketID] = marketID;\n        return msg;\n    };\n    _messages.createPortfolioRemoveMarketMessage = function (portfolioID, marketID) {\n        var msg = { T: _constMsgs.PortfolioRemoveMarket.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.PortfolioRemoveMarket.PortfolioID] = portfolioID;\n        tags[_constMsgs.PortfolioRemoveMarket.MarketID] = marketID;\n        return msg;\n    };\n    _messages.createPortfolioSubscribeMessage = function (portfolioIDs) {\n        var msg = { T: _constMsgs.PortfolioSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.PortfolioSubscription.SubscribeType] = _constMsgs.PortfolioSubscription.SubscribeType_Subscribe;\n        tags[_constMsgs.PortfolioSubscription.PortfoliosArray] = [];\n\n        // Add each portfolio to the array\n        var repeatingPortfolio = tags[_constMsgs.PortfolioSubscription.PortfoliosArray];\n        for (var n = 0; n < portfolioIDs.length; n++) {\n            var portfolio = {};\n            portfolio[_constMsgs.PortfolioSubscription.PortfoliosArray_Object.PortfolioID] = portfolioIDs[n];\n            repeatingPortfolio.push(portfolio);\n        };\n        return msg;\n    };\n    _messages.createPortfolioUnsubscribeMessage = function (portfolioIDs) {\n        var msg = { T: _constMsgs.PortfolioSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.PortfolioSubscription.SubscribeType] = _constMsgs.PortfolioSubscription.SubscribeType_Unsubscribe;\n        tags[_constMsgs.PortfolioSubscription.PortfoliosArray] = [];\n\n        // Add each portfolio to the array\n        var repeatingPortfolio = tags[_constMsgs.PortfolioSubscription.PortfoliosArray];\n        for (var n = 0; n < portfolioIDs.length; n++) {\n            var portfolio = {};\n            portfolio[_constMsgs.PortfolioSubscription.PortfoliosArray_Object.PortfolioID] = portfolioIDs[n];\n            repeatingPortfolio.push(portfolio);\n        };\n        return msg;\n    };\n    _messages.createPriceAlertRequestMessage = function (uniqueClientIdentifier, transactiontime, priceAlertRequest) {\n        var msg = { T: _constMsgs.PriceAlertRequest.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.PriceAlertRequest.UniqueClientIdentifier] = uniqueClientIdentifier;\n        tags[_constMsgs.PriceAlertRequest.TransactionTime] = transactiontime;\n        switch ((priceAlertRequest.priceAlertRequestType || '').toLowerCase()) {\n            case 'new':\n            case ETX.clientAPI.requests.PriceAlertRequest.requestTypes.NEW:\n                tags[_constMsgs.PriceAlertRequest.PriceAlertRequestType] = _constMsgs.PriceAlertRequest.PriceAlertRequestType_New;\n                break;\n\n            case 'amend':\n            case ETX.clientAPI.requests.PriceAlertRequest.requestTypes.AMEND:\n                tags[_constMsgs.PriceAlertRequest.PriceAlertRequestType] = _constMsgs.PriceAlertRequest.PriceAlertRequestType_Amend;\n                break;\n\n            case 'cancel':\n            case ETX.clientAPI.requests.PriceAlertRequest.requestTypes.CANCEL:\n                tags[_constMsgs.PriceAlertRequest.PriceAlertRequestType] = _constMsgs.PriceAlertRequest.PriceAlertRequestType_Cancel;\n                break;\n\n                //case 'reactivate':\n                //case ETX.clientAPI.requests.PriceAlertRequest.requestTypes.REACTIVATE:\n                //    tags[_constMsgs.PriceAlertRequest.PriceAlertRequestType] = _constMsgs.PriceAlertRequest.PriceAlertRequestType_Reactivate;\n                //    break;\n        }\n        if (priceAlertRequest.alertID) {\n            // Only include the alert ID if it has been provided...\n            tags[_constMsgs.PriceAlertRequest.AlertID] = priceAlertRequest.alertID;\n        }\n        tags[_constMsgs.PriceAlertRequest.MarketID] = priceAlertRequest.marketID;\n        switch ((priceAlertRequest.side || '').toLowerCase()) {\n            case 'buy':\n            case ETX.clientAPI.requests.PriceAlertRequest.sides.BUY:\n                tags[_constMsgs.PriceAlertRequest.Side] = _constMsgs.PriceAlertRequest.Side_Buy;\n                break;\n\n            case 'sell':\n            case ETX.clientAPI.requests.PriceAlertRequest.sides.SELL:\n                tags[_constMsgs.PriceAlertRequest.Side] = _constMsgs.PriceAlertRequest.Side_Sell;\n                break;\n        }\n        tags[_constMsgs.PriceAlertRequest.TriggerPrice] = (priceAlertRequest.triggerPrice || '').toString();\n        tags[_constMsgs.PriceAlertRequest.EmailAlertOn] = (priceAlertRequest.emailAlertOn === true ? 'Y' : 'N');\n        tags[_constMsgs.PriceAlertRequest.SMSAlertOn] = (priceAlertRequest.smsAlertOn === true ? 'Y' : 'N');\n        tags[_constMsgs.PriceAlertRequest.AlertMessage] = priceAlertRequest.alertMessage;\n        return msg;\n    };\n    _messages.createPriceAlertsSubscribeMessage = function () {\n        var msg = { T: _constMsgs.PriceAlertSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.PriceAlertSubscription.SubscribeType] = _constMsgs.PriceAlertSubscription.SubscribeType_Subscribe;\n        return msg;\n    };\n    _messages.createPriceAlertsUnsubscribeMessage = function () {\n        var msg = { T: _constMsgs.PriceAlertSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.PriceAlertSubscription.SubscribeType] = _constMsgs.PriceAlertSubscription.SubscribeType_Unsubscribe;\n        return msg;\n    };\n    _messages.createProcessedOrdersSubscribeMessage = function () {\n        var msg = { T: _constMsgs.ProcessedOrderSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.ProcessedOrderSubscription.SubscribeType] = _constMsgs.ProcessedOrderSubscription.SubscribeType_Subscribe;\n        return msg;\n    };\n    _messages.createProcessedOrdersUnsubscribeMessage = function () {\n        var msg = { T: _constMsgs.ProcessedOrderSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.ProcessedOrderSubscription.SubscribeType] = _constMsgs.ProcessedOrderSubscription.SubscribeType_Unsubscribe;\n        return msg;\n    };\n    _messages.createTradeQuoteRequestMessage = function (uniqueClientIdentifier, transactiontime, tradeQuoteRequest) {\n        var msg = { T: _constMsgs.TradeQuoteRequest.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.TradeQuoteRequest.UniqueClientIdentifier] = uniqueClientIdentifier;\n        tags[_constMsgs.TradeQuoteRequest.TransactionTime] = transactiontime;\n        tags[_constMsgs.TradeQuoteRequest.MarketID] = tradeQuoteRequest.marketID;\n        switch (tradeQuoteRequest.side) {\n            case 'buy':\n            case ETX.clientAPI.requests.TradeQuoteRequest.sides.BUY:\n                tags[_constMsgs.TradeQuoteRequest.Side] = _constMsgs.TradeQuoteRequest.Side_Buy;\n                break;\n\n            case 'sell':\n            case ETX.clientAPI.requests.TradeQuoteRequest.sides.SELL:\n                tags[_constMsgs.TradeQuoteRequest.Side] = _constMsgs.TradeQuoteRequest.Side_Buy;\n                break;\n        }\n        tags[_constMsgs.TradeQuoteRequest.Quantity] = tradeQuoteRequest.quantity;\n        return msg;\n    };\n    _messages.createTradeQuoteDeclineMessage = function (uniqueClientIdentifier, quoteID) {\n        var msg = { T: _constMsgs.TradeQuoteDecline.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.TradeQuoteDecline.UniqueClientIdentifier] = uniqueClientIdentifier;\n        tags[_constMsgs.TradeQuoteDecline.QuoteID] = quoteID;\n        return msg;\n    };\n    _messages.createTradeRequestMessage = function (uniqueClientIdentifier, transactiontime, tradeRequest) {\n        var msg = { T: _constMsgs.TradeRequest.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.TradeRequest.UniqueClientIdentifier] = uniqueClientIdentifier;\n        tags[_constMsgs.TradeRequest.TransactionTime] = transactiontime;\n        tags[_constMsgs.TradeRequest.MarketID] = tradeRequest.marketID;\n        if (tradeRequest.currencyName) {\n            // Only include the Currency Name if it has been provided...\n            tags[_constMsgs.TradeRequest.CurrencyName] = tradeRequest.currencyName;\n        }\n        if (tradeRequest.subAccountID) {\n            // Only include the Sub-Account ID if it has been provided...\n            tags[_constMsgs.TradeRequest.SubAccountID] = tradeRequest.subAccountID;\n        }\n        switch ((tradeRequest.side || '').toLowerCase()) {\n            case 'buy':\n            case ETX.clientAPI.requests.TradeRequest.sides.BUY:\n                tags[_constMsgs.TradeRequest.Side] = _constMsgs.TradeRequest.Side_Buy;\n                break;\n\n            case 'sell':\n            case ETX.clientAPI.requests.TradeRequest.sides.SELL:\n                tags[_constMsgs.TradeRequest.Side] = _constMsgs.TradeRequest.Side_Sell;\n                break;\n        }\n        tags[_constMsgs.TradeRequest.Quantity] = (tradeRequest.quantity || '').toString();\n        if (tradeRequest.isMarketOrder() === false) {\n            // If a price has been provided, then use it, else leave it out and the server should use the market's live price...\n            tags[_constMsgs.TradeRequest.Price] = (tradeRequest.price || '').toString();\n        }\n        if (tradeRequest.quoteID) {\n            // Only include the quote ID if it has been provided...\n            tags[_constMsgs.TradeRequest.QuoteID] = tradeRequest.quoteID;\n        }\n        if (tradeRequest.stopOrderLevel) {\n            // Include the stop order details...\n            tags[_constMsgs.TradeRequest.StopOrderLevel] = (tradeRequest.stopOrderLevel || '').toString();\n            tags[_constMsgs.TradeRequest.StopOrderGuaranteedOn] = (tradeRequest.stopOrderGuaranteedOn === true ? true : false);\n            tags[_constMsgs.TradeRequest.StopOrderTrailingOn] = tradeRequest.stopOrderTrailingOn;\n            tags[_constMsgs.TradeRequest.StopOrderTrailingIncrementSize] = (tradeRequest.stopOrderTrailingIncrementSize || '').toString();\n        }\n        if (tradeRequest.limitOrderLevel) {\n            // Include the limit order details...\n            tags[_constMsgs.TradeRequest.LimitOrderLevel] = (tradeRequest.limitOrderLevel || '').toString();\n        }\n        if (tradeRequest.closingTradeID) {\n            // Only include the closing trade ID if it has been provided...\n            tags[_constMsgs.TradeRequest.ClosingTradeID] = tradeRequest.closingTradeID;\n        }\n        if (tradeRequest.emailAlertOn || tradeRequest.smsAlertOn) {\n            // Include the alert details...\n            tags[_constMsgs.TradeRequest.EmailAlertOn] = tradeRequest.emailAlertOn;\n            tags[_constMsgs.TradeRequest.SMSAlertOn] = tradeRequest.smsAlertOn;\n            tags[_constMsgs.TradeRequest.AlertMessage] = tradeRequest.alertMessage;\n        }\n        return msg;\n    };\n    _messages.createTradeRequoteResponseMessage = function (uniqueClientIdentifier, quoteID, acceptRequote) {\n        var msg = { T: _constMsgs.TradeRequoteResponse.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.TradeRequoteResponse.UniqueClientIdentifier] = uniqueClientIdentifier;\n        tags[_constMsgs.TradeRequoteResponse.QuoteID] = quoteID;\n        tags[_constMsgs.TradeRequoteResponse.Response] = (acceptRequote === true ? true : false);\n        return msg;\n    };\n    _messages.createWorkingOrdersSubscribeMessage = function () {\n        var msg = { T: _constMsgs.WorkingOrderSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.WorkingOrderSubscription.SubscribeType] = _constMsgs.WorkingOrderSubscription.SubscribeType_Subscribe;\n        return msg;\n    };\n    _messages.createWorkingOrdersUnsubscribeMessage = function () {\n        var msg = { T: _constMsgs.WorkingOrderSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.WorkingOrderSubscription.SubscribeType] = _constMsgs.WorkingOrderSubscription.SubscribeType_Subscribe;\n        return msg;\n    };\n    _messages.createUserSettingsRequestMessage = function (uniqueClientIdentifier, userSettingsRequestType, userSettings) {\n        var msg = { T: _constMsgs.UserSettingsRequest.MessageType, t: {} },\n            tags = msg.t;\n        tags[_constMsgs.UserSettingsRequest.UniqueClientIdentifier] = uniqueClientIdentifier;\n        switch (userSettingsRequestType) {\n            case 'get':\n            case _constMsgs.UserSettingsRequest.UserSettingsRequestType_Get:\n                tags[_constMsgs.UserSettingsRequest.UserSettingsRequestType] = _constMsgs.UserSettingsRequest.UserSettingsRequestType_Get;\n                break;\n            case 'overwrite':\n            case _constMsgs.UserSettingsRequest.UserSettingsRequestType_Overwrite:\n                tags[_constMsgs.UserSettingsRequest.UserSettingsRequestType] = _constMsgs.UserSettingsRequest.UserSettingsRequestType_Overwrite;\n                tags[_constMsgs.UserSettingsRequest.UserSettingsArray] = [];\n                break;\n            case 'update':\n            case _constMsgs.UserSettingsRequest.UserSettingsRequestType_Update:\n                tags[_constMsgs.UserSettingsRequest.UserSettingsRequestType] = _constMsgs.UserSettingsRequest.UserSettingsRequestType_Update;\n                tags[_constMsgs.UserSettingsRequest.UserSettingsArray] = [];\n                break;\n\n        }\n        if ($.isArray(tags[_constMsgs.UserSettingsRequest.UserSettingsArray])) {\n            if ($.isArray(userSettings)) {\n                for (var i in userSettings) {\n                    var aUserSetting = userSettings[i];\n                    if (aUserSetting) {\n                        var userSetting = {};\n                        userSetting[_constMsgs.UserSettingsRequest.UserSettingsArray_Object.Key] = aUserSetting[_constMsgs.UserSettingsRequest.UserSettingsArray_Object.Key];\n                        userSetting[_constMsgs.UserSettingsRequest.UserSettingsArray_Object.Value] = aUserSetting[_constMsgs.UserSettingsRequest.UserSettingsArray_Object.Value];\n                        if (aUserSetting.hasOwnProperty(_constMsgs.UserSettingsRequest.UserSettingsArray_Object.Deleted)) {\n                            userSetting[_constMsgs.UserSettingsRequest.UserSettingsArray_Object.Deleted] = _constMsgs.UserSettingsRequest.UserSettingsArray_Object.Deleted;\n                        }\n                        /*if (_helpers.compare.isNullOrEmpty(userSetting[_constMsgs.UserSettingsRequest.UserSettingsArray_Object.Key]) === false)*/ {\n                            tags[_constMsgs.UserSettingsRequest.UserSettingsArray].push(userSetting);\n                        }\n                    }\n                }\n            }\n        }\n        return msg;\n    };\n    _messages.generateUniqueClientIdentifier = function (messageType) {\n        return _messages.buildUniqueClientIdentifier(messageType, new Date().toISOString());\n    }\n    // #endregion\n    //----END-PUBLIC----------\n\n    return _messages;\n    // #endregion\n    //-END-CONSTRUCTOR--------\n\n})();\n\n/// <reference path=\"../../_references.js\" />\n\nETX.namespace('clientAPI');\n\nETX.clientAPI.Session = function (options) {\n\n    'use strict';\n\n    //-CONSTRUCTOR-------------\n    // #region\n    //----PRIVATE--------------\n    // #region\n    var _session = this,\n        _options = options || {},\n        $ = _options.jQuery || jQuery,\n        _transportFactory = _options.transportFactory || new ETX.clientAPI.TransportFactory(),\n        _webSocketFactory = _options.webSocketFactory || new ETX.clientAPI.WebSocketFactory(),\n        _helpers = _options.helpers || ETX.clientAPI.Helpers,\n        _logger = _options.logger || new ETX.logging.Logger(),\n        _logSource = 'Session',\n        _tryWebSocket = _options.tryWebSocket === false ? false : true,\n        _webSocketRootURL = _options.webSocketRootURL || '',\n        _webAPIRootURL = _options.webAPIRootURL || '',\n        _transportFactory = _options.transportFactory,\n        _transport,\n        _pendingMessageCache = [],\n        // Callbacks\n        _onConnect = _options.onConnect,\n        _onMessage = _options.onMessage,\n        _onError = _options.onError,\n        _onDisconnect = _options.onDisconnect,\n        _onQoS = _options.onQoS,\n        // Connectivity\n        _isAuthenticated = false,\n        _isConnected = false,\n        _autoConnect = false,\n        _connectLastAttempt,\n        _reconnectIntervalTimer,\n        _reconnectIntervalInterval = _options.reconnectInterval || 5000,\n        // Timer for poll\n        _pollIntervalIntervalTimer,\n        _pollIntervalInterval = _options.pollInterval || 1500,\n        _pollThreshold = _options.pollThreshold || 10000,     // default poll threshold to 10 seconds\n        _pollLastReceived,\n        _ttl = 0;\n    // #endregion\n    //----END-PRIVATE---------  \n\n    //----PUBLIC--------------\n    // #region\n    _session.transportType = function () { return _transport ? _transport.type() : ETX.clientAPI.Constants.TransportType.None; };\n    _session.getSessionID = function () { return _transport ? _transport.getSessionID() : ''; };\n    _session.isConnected = function () { return _isConnected; };\n    _session.isAuthenticated = function () { return _isAuthenticated; };\n    _session.logger = _logger;\n    _session.send = send;\n    _session.start = start;\n    _session.stop = stop;\n    _session.destroy = destroy;\n    // #endregion\n    //----END-PUBLIC----------\n\n    _logger.debug('Created ETX.clientAPI.Session', _logSource);\n\n    return _session;\n    // #endregion\n    //-END-CONSTRUCTOR--------\n\n\n    //-METHODS----------------\n    // #region\n    function clearPollIntervalTimer() {\n        if (_pollIntervalIntervalTimer) {\n            clearInterval(_pollIntervalIntervalTimer);\n            _pollIntervalIntervalTimer = undefined;\n            _logger.verbose('Cleared poll timer', _logSource);\n        }\n    }\n\n    function clearReconnectionTimer() {\n        // Cancel any existing reconnect timer\n        if (_reconnectIntervalTimer) {\n            clearInterval(_reconnectIntervalTimer);\n            _reconnectIntervalTimer = undefined;\n            _logger.verbose('Cleared reconnect timer', _logSource);\n        }\n    }\n\n    function connectionClosed(disconnectReason, disconnectData) {\n        // Mark connection as down\n        _isConnected = false;\n        _isAuthenticated = false;\n\n        // Cancel reconnect timer\n        clearReconnectionTimer();\n\n        // Cancel poll timer\n        clearPollIntervalTimer();\n\n        // Trigger QoS callback\n        if (_onQoS) {\n            _onQoS(_session, -1);\n        }\n\n        // Trigger Disconnect callback\n        if (_onDisconnect) {\n            _onDisconnect(_session, (disconnectReason || 'Disconnected from server'), disconnectData);\n        }\n\n        if (_autoConnect === true) {\n            // restart reconnection timer\n            resetReconnectionTimer();\n        }\n    }\n\n    function createAndStartTransport(transportType) {\n        var success = false;\n\n        destroyTransport();\n\n        // have we specified a transport to try\n        if (transportType === ETX.clientAPI.Constants.TransportType.WebSocket) {\n            success = createAndStartTransportWS();\n        } else if (transportType === ETX.clientAPI.Constants.TransportType.LongPoll) {\n            success = createAndStartTransportLP();\n        } else {\n            // no, so try both\n            if (_tryWebSocket === true) {\n                // first try web socket transport\n                success = createAndStartTransportWS();\n            }\n            if (success === false) {\n                if (_tryWebSocket === true) {\n                    // Fallback to long poll transport, as websocket transport failed\n                    _logger.error('WebSocket transport unavailable, falling back to using HTTP long-poll transport instead...', _logSource);\n                }\n                // Try long poll transport\n                success = createAndStartTransportLP();\n            }\n        }\n\n        return success;\n    }\n\n    function createAndStartTransportLP() {\n        _logger.debug('Attempting to connect using HTTP long-poll transport...', _logSource);\n\n        var success = false;\n        if (_helpers.compare.isNullOrEmpty(_webAPIRootURL) === false) {\n            try {\n                // Create a long-poll transport...\n                _transport = _transportFactory.create(ETX.clientAPI.Constants.TransportType.LongPoll, {\n                    jQuery: $,\n                    logger: _logger,\n                    rootURL: _webAPIRootURL + 'stream',\n                    onOpen: onOpen,\n                    onMessage: onMessage,\n                    onError: onError\n                });\n\n                success = _transport.start();\n                if (success) {\n                    _logger.debug('Using HTTP long-poll transport', _logSource);\n                }\n            } catch (ex) {\n                _logger.error('Error creating/starting HTTP long-poll transport | Exception = ' + ex, _logSource, ex);\n                success = false;\n                _transport = undefined;\n                if (_onError) { _onError(_session, ex); }\n            }\n        }\n        return success;\n    }\n\n    function createAndStartTransportWS() {\n        _logger.debug('Attempting to connect using WebSocket transport...', _logSource);\n\n        var success = false;\n        if (\"WebSocket\" in window) {\n            if (_helpers.compare.isNullOrEmpty(_webSocketRootURL) === false) {\n                try {\n                    // We need to create our transportation service...\n                    // Create a WebSocket transport, if supported...\n                    _transport = _transportFactory.create(ETX.clientAPI.Constants.TransportType.WebSocket, {\n                        webSocketFactory: _webSocketFactory,\n                        logger: _logger,\n                        URI: _webSocketRootURL,\n                        onOpen: onOpen,\n                        onMessage: onMessage,\n                        onError: onError,\n                        onClose: onClose\n                    });\n\n                    success = _transport.start();\n                    if (success) {\n                        _logger.debug('Using WebSocket transport', _logSource);\n                    }\n                } catch (ex) {\n                    _logger.error('Error creating/starting WebSocket transport | Exception = ' + ex, _logSource, ex);\n                    success = false;\n                    _transport = undefined;\n                    if (_onError) { _onError(_session, ex); }\n                }\n            }\n        }\n        return success;\n    }\n\n    function destroy() {\n        // Clear all callbacks...\n        _onConnect = undefined;\n        _onMessage = undefined;\n        _onError = undefined;\n        _onDisconnect = undefined;\n        _onQoS = undefined;\n\n        stop();\n\n        if (_transport) {\n            _transport.destroy();\n            _transport = undefined;\n        }\n\n        _logger.debug('Destroyed ETX.clientAPI.Session', _logSource);\n    }\n\n    function destroyTransport() {\n        if (_transport) {\n            _transport.destroy();\n            _transport = undefined;\n        }\n    }\n\n    function onClose(transport, event) {\n        _logger.debug('Connection closed', _logSource);\n\n        connectionClosed('Disconnected from server', event);\n    }\n\n    function onError(transport, errorMessage, errorData) {\n        _logger.debug('Connection error: ' + errorMessage, _logSource, errorData);\n\n        if (_session.transportType() === ETX.clientAPI.Constants.TransportType.WebSocket) {\n            if (_isConnected === false) {\n                // If we get an error before we have even connected, \n                // then we must not be able to connect to the server.\n                // So, disable auto-reconnections for now...\n                _autoConnect = false;\n                _logger.warning('WebSocket connection failed to open, attempting to establish session with server using HTTP long-poll transport instead...', _logSource);\n                var tryWebSocket = _tryWebSocket;\n                _tryWebSocket = false;\n                start();\n                _tryWebSocket = tryWebSocket;\n            }\n            return;\n        }\n\n        if (_onError) {\n            _onError(_session, errorMessage, errorData);\n        }\n\n        if (_session.transportType() === ETX.clientAPI.Constants.TransportType.LongPoll) {\n            onClose(transport, /*event*/undefined);\n        }\n    }\n\n    function onMessage(transport, message) {\n        _logger.debug('Received message | Msg = ' + JSON.stringify(message), _logSource);\n\n        var messageType = message.T;\n        var messageTags = message.t;\n\n        // Switch on message type\n        switch (messageType) {\n            case ETX.clientAPI.Constants.messages.SessionID:\n                _logger.debug('Connection session ID is \"' + _session.getSessionID() + '\"', _logSource);\n                break;\n\n            case ETX.clientAPI.Constants.messages.LogOffResponse.MessageType:\n                _logger.debug('Session : Handling messsage LogOffResponse (\"' + message.T + '\")...', _logSource);\n\n                // TODO: Check this is correct thing to-do...\n                // If we have a reconnect timer, cancel it\n                clearReconnectionTimer();\n\n                _autoConnect = false;\n\n                // Now we're done, allow this message to bubble up to the ClientAPI...\n                if (_onMessage) {\n                    _onMessage(_session, message);\n                }\n                break;\n\n            case ETX.clientAPI.Constants.messages.LogOnResponse.MessageType:\n                _logger.debug('Handling messsage LogOnResponse (\"' + message.T + '\")...', _logSource);\n\n                // If we have a reconnect timer, cancel it\n                clearReconnectionTimer();\n\n                // We are logged on, start the timer to start sending QoS poll messages...\n                _isAuthenticated = true;\n                _pollLastReceived = new Date();\n                onPollTimerElapsed();\n                _pollIntervalIntervalTimer = setInterval(onPollTimerElapsed, _pollIntervalInterval);\n\n                _logger.verbose('Started polling timer', _logSource);\n\n                // Now we're done, allow this message to bubble up to the ClientAPI...\n                if (_onMessage) {\n                    _onMessage(_session, message);\n                }\n                break;\n\n            case ETX.clientAPI.Constants.messages.Poll.MessageType:\n                _logger.debug('Handling messsage Poll (\"' + message.T + '\")...', _logSource);\n\n                // Poll response \n                _pollLastReceived = new Date();\n                // Compare timestamp in request to now, and work out TTL\n                var sentDate = new Date(parseInt(messageTags[ETX.clientAPI.Constants.messages.Poll.ClientTime]));\n                _ttl = _pollLastReceived.getTime() - sentDate.getTime();\n                _logger.debug('Poll latency ' + _ttl + 'ms', _logSource);\n                if (_onQoS) {\n                    _onQoS(_session, _ttl);\n                }\n                break;\n\n            default:\n                // We need to allow messages to bubble up to the ClientAPI...\n                if (_onMessage) {\n                    _onMessage(_session, message);\n                }\n                break;\n        }\n    }\n\n    function onOpen(transport, event) {\n        _logger.debug('Connection opened', _logSource);\n\n        if (_session.getSessionID()) {\n            _logger.debug('Connection session ID is \"' + _session.getSessionID() + '\"', _logSource);\n        }\n\n        // Mark connection as up\n        _isConnected = true;\n        // Trigger Connect callback\n        if (_onConnect) {\n            _onConnect(_session, 'Connected to server', event);\n        }\n\n        // Send any pending messages...\n        var pendingMsgCount = _pendingMessageCache.length;\n        if (pendingMsgCount > 0) {\n            _logger.info('Connection established, sending ' + pendingMsgCount + ' pending message(s)...', _logSource);\n            for (var i in _pendingMessageCache) {\n                if (_pendingMessageCache.hasOwnProperty(i)) {\n                    var message = _pendingMessageCache[i];\n                    send(message);\n                }\n            }\n            _pendingMessageCache = [];\n        }\n    }\n\n    function onPollTimerElapsed() {\n        if (_transport) {\n            // Check if we've received a poll response recently?\n            var lastPollDuration = (new Date() - _pollLastReceived);\n            if (lastPollDuration > _pollThreshold) {\n                _logger.warning('No poll has been received from server for ' + lastPollDuration + 'ms (exceeding threshold of ' + _pollThreshold + 'ms)', _logSource);\n\n                if (_session.transportType() === ETX.clientAPI.Constants.TransportType.LongPoll) {\n                    _logger.warning('Assuming session HTTP long-poll transport connection is down...', _logSource);\n\n                    connectionClosed('Timeout. No poll received for ' + lastPollDuration + 'ms');\n                } else {\n                    // Trigger QoS callback\n                    if (_onQoS) {\n                        _onQoS(_session, -1);\n                    }\n                }\n            } else {\n                send(ETX.clientAPI.Messages.createPollMessage());\n            }\n        }\n    }\n\n    function onReconnectTimerElapsed() {\n        if (_isConnected === false) {\n            if (_autoConnect === true) {\n                if (_transport) {\n                    // Try and connect again using the existing transport or re-create a new one\n                    _logger.warning('Connection is down, attempting to re-establish session with server, using existing transport...', _logSource);\n                    _transport.stop();\n                    var success = _transport.start();\n                    if (success) {\n                        return;\n                    }\n                }\n\n                // no transport so re-create a new one\n                _logger.warning('Connection is down, attempting to re-establish session with server, using new transport...', _logSource);\n                start();\n            }\n        }\n    }\n\n    function resetReconnectionTimer() {\n        // Start a new reconnect timer\n        clearReconnectionTimer();\n        _reconnectIntervalTimer = setInterval(function () { onReconnectTimerElapsed() }, _reconnectIntervalInterval);\n        _logger.verbose('Started reconnect timer', _logSource);\n    }\n\n    function send(message) {\n        message[ETX.clientAPI.Constants.messages.SessionID] = _session.getSessionID();\n\n        if (_transport) {\n            if (_isConnected === true) {\n                _transport.send(message);\n                _logger.debug('Sent message | Msg= ' + JSON.stringify(message), _logSource);\n                return;\n            } else {\n                //// NOTE: Not so sure that this is a good idea anymore, because you may get duplicated (e.g. subscription)\n                ////       messages unless the ClientAPI tracks what was/wasn't sent successfully...\n                //_pendingMessageCache.push(message);\n                //_logger.warning('Message cannot be sent whilst the connection is down and will be sent once the connection is established | Msg = ' + JSON.stringify(message), _logSource);\n\n                _logger.warning('Failed to send message, no connection established | Msg = ' + JSON.stringify(message), _logSource);\n            }\n        }\n\n        _logger.warning('Failed to send message, no transport | Msg = ' + JSON.stringify(message), _logSource);\n    }\n\n    function start() {\n        _logger.debug('Starting session...', _logSource);\n\n        if (createAndStartTransport() === false) {\n            _logger.fatal('ERROR: Failed to create and start transport', _logSource);\n            return false;       // failed to start any transport!\n        }\n\n        var success = false;\n        if (_transport) {\n            success = true;\n\n            // start testing connection every few seconds...\n            _autoConnect = true;\n            _connectLastAttempt = new Date();\n            resetReconnectionTimer();\n\n            _logger.debug('Started session', _logSource);\n        }\n        return success;\n    }\n\n    function stop() {\n        _logger.debug('Stopping session...', _logSource);\n\n        // Disable auto-reconnections\n        _autoConnect = false;\n        _connectLastAttempt = undefined;\n\n        // Stop the transport\n        if (_transport) {\n            _transport.stop();\n        }\n\n        // Mark connection as down\n        connectionClosed('Disconnected from server');\n\n        _logger.debug('Stopped session', _logSource);\n    }\n    // #endregion\n    //-END-METHODS------------\n\n};\n\n/// <reference path=\"../../_references.js\" />\n\nETX.namespace('clientAPI');\n\nETX.clientAPI.SessionFactory = function (options) {\n\n    'use strict';\n\n    //-CONSTRUCTOR-------------\n    // #region\n    //----PRIVATE--------------\n    // #region\n    var _sessionFactory = this,\n        _options = options || {};\n    // #endregion\n    //----END-PRIVATE---------  \n\n    //----PUBLIC--------------\n    // #region\n    _sessionFactory.create = function create(options) {\n        // Create session object\n        return new ETX.clientAPI.Session(options);\n    };\n    // #endregion\n    //----END-PUBLIC----------\n\n    return _sessionFactory;\n    // #endregion\n    //-END-CONSTRUCTOR--------\n\n};\n\n/// <reference path=\"../../_references.js\" />\n\nETX.namespace('clientAPI');\n\nETX.clientAPI.TransportFactory = function (options) {\n\n    'use strict';\n\n    //-CONSTRUCTOR-------------\n    // #region\n    //----PRIVATE--------------\n    // #region\n    var _transportFactory = this,\n        _options = options || {};\n    // #endregion\n    //----END-PRIVATE---------  \n\n    //----PUBLIC--------------\n    // #region\n\n    _transportFactory.create = function create(transportType, options) {\n        switch (transportType) {\n            default:\n            case ETX.clientAPI.Constants.TransportType.WebSocket:\n                // Create web socket transport object\n                return new ETX.clientAPI.TransportWS(options);\n                \n            case ETX.clientAPI.Constants.TransportType.LongPoll:\n                // Create long poll transport object\n                return new ETX.clientAPI.TransportLP(options);\n        }\n    };\n\n    // #endregion\n    //----END-PUBLIC----------\n\n    return _transportFactory;\n    // #endregion\n    //-END-CONSTRUCTOR--------\n\n};\n\n/// <reference path=\"../../_references.js\" />\n\nETX.namespace('clientAPI');\n\nETX.clientAPI.TransportLP = function (options) {\n\n    'use strict';\n\n    //-CONSTRUCTOR------------\n    // #region\n    //----PRIVATE-------------\n    // #region\n    var _transportLP = this,\n        _options = options || {},\n        $ = _options.jQuery || jQuery,\n        _logger = _options.logger || new ETX.logging.Logger(),\n        _logSource = 'TransportLP',\n        _rootURL = _options.rootURL || 'http://localhost:81',\n        _onOpen = _options.onOpen,\n        _onError = _options.onError,\n        _onMessage = _options.onMessage,\n        _helpers = _options.helpers || ETX.clientAPI.Helpers,\n        _requestMessagesTimer,\n        _sessionID,\n        _isConnected = false,\n        _currentRequestAJAX,\n        _messagesSent = 0,\n        _messagesReceived = 0;\n\n    // store the IE version (undefined if IE not detected)\n    var _ieVersion = _helpers.utility.ieVersion();\n\n    // IE9 fix flag for using XDomainRequest for ajax calls\n    var _ieFix = false;\n    if (_ieVersion) {\n        _logger.info('IE version ' + _ieVersion + ' detected');\n\n        _ieFix = ((_ieVersion < 10) && ('XDomainRequest' in window) && (window.XDomainRequest !== null));\n        if (_ieFix) {\n            _logger.info('Registering IE9 AjaxTransport');\n            registerIE9AjaxTransport();\n        }\n    }\n    // #endregion\n    //----END-PRIVATE---------\n\n    //----PUBLIC--------------\n    // #region\n    _transportLP.type = function () { return ETX.clientAPI.Constants.TransportType.LongPoll; }\n    _transportLP.getSessionID = function () { return _sessionID; }\n    _transportLP.isConnected = function () { return _isConnected; }\n    _transportLP.logger = _logger;\n    _transportLP.start = start;\n    _transportLP.send = send;\n    _transportLP.stop = stop;\n    _transportLP.destroy = destroy;\n    // #endregion\n    //----END-PUBLIC----------\n\n    return _transportLP;\n    // #endregion\n    //-END-CONSTRUCTOR--------\n\n\n    //-METHODS----------------\n    // #region\n    function destroy() {\n        // Clear all callbacks...\n        _onOpen = undefined;\n        _onError = undefined;\n        _onMessage = undefined;\n\n        stop();\n\n        _logger.debug('Destroyed ETX.clientAPI.TransportLP', _logSource);\n    }\n\n    function requestMessages() {\n        var url = _rootURL + '/g';\n        var ajaxOptions = {\n            url: url,\n            data: _sessionID,\n            dataType: 'json',\n            type: 'post',\n            cache: 'false'\n        };\n        // IE9 fix - send session ID as data body\n        if (_ieFix) {\n            ajaxOptions.data = _sessionID;\n        } else {\n            ajaxOptions.beforeSend = onBeforeSend;\n        }\n        _currentRequestAJAX = $.ajax(ajaxOptions)\n            .done(onRequestMessageReceived)\n            .fail(onRequestMessageFailed);\n    }\n\n    function onBeforeSend(xhr) {\n        if (_sessionID) {\n            xhr.setRequestHeader('session', _sessionID);\n        }\n    }\n\n    function onRequestMessageReceived(data, textStatus, xhr) {\n        if (!_sessionID) {\n            _sessionID = data['session'];\n            if (_sessionID) {\n                // Only if we now have a session, record it and mark the connection as UP\n                _isConnected = true;\n                _logger.verbose('Connection established | SessionID = ' + _sessionID, _logSource);\n                if (_onOpen) {\n                    _onOpen(_transportLP);\n                }\n            } else {\n                _logger.error('No session ID returned from server | Msg = ' + JSON.stringify(data), _logSource, data);\n            }\n        } else {\n            // We have a session established so handle these messages\n            if (_onMessage) {\n                _logger.verbose('Received | Msg = ' + JSON.stringify(data), _logSource);\n\n                if ($.isArray(data)) {\n                    for (var i = 0, n = data.length; i < n; i++) {\n                        var message = data[i];\n                        _onMessage(_transportLP, message);\n                        _messagesReceived++;\n                    }\n                } else if ($.isPlainObject(data) && $.isEmptyObject(data) === false && data.hasOwnProperty('error') === false) {\n                    _onMessage(_transportLP, data);\n                    _messagesReceived++;\n                } else {\n                    // No JSON data received, SessionID must have expired, mark the connection as DOWN\n                    _logger.error('Invalid message received | SessionID = ' + _sessionID + ' | Msg = ' + JSON.stringify(data), _logSource, data);\n                    _isConnected = false;\n                    _sessionID = undefined;\n                }\n            }\n        }\n        if (_isConnected) {\n            /* Start the next long poll. */\n            requestMessages();\n        }\n    }\n\n    function onRequestMessageFailed(xhr, textStatus, errorThrown) {\n        _logger.error('Error receiving message | SessionID = ' + _sessionID + ' | TextStatus = ' + textStatus + ' |  ErrorThrown = ' + JSON.stringify(errorThrown), _logSource, xhr);\n        // We'll never try to request messages again, mark the connection as DOWN\n        _isConnected = false;\n        if (_onError) {\n            _onError(_transportLP, errorThrown);\n        }\n    }\n\n    function send(message) {\n        if (_isConnected) {\n            var url = _rootURL + '/s';\n            var ajaxOptions = {\n                url: url,\n                dataType: 'json',\n                type: 'post',\n                cache: 'false'\n            };\n            if (_ieFix) {\n                // IE9 fix - send session ID in message\n                if (_sessionID != '') {\n                    message.t[ETX.clientAPI.Constants.messages.SessionID] = _sessionID;\n                }\n            } else {\n                ajaxOptions.beforeSend = onBeforeSend;\n            }\n            var msg = JSON.stringify(message);\n            ajaxOptions.data = msg;\n\n            _logger.verbose('Sent | SessionID = ' + _sessionID + ' | Msg = ' + msg, _logSource);\n\n            $.ajax(ajaxOptions)\n                .done(onSendMessageReceived)\n                .fail(onSendMessageFailed);\n        }\n    }\n\n    function onSendMessageReceived(data, textStatus, xhr) {\n        _messagesSent++;\n    }\n\n    function onSendMessageFailed(xhr, textStatus, errorThrown) {\n        _logger.error('Error sending message | SessionID = ' + _sessionID + ' | TextStatus = ' + textStatus + ' |  ErrorThrown = ' + JSON.stringify(errorThrown) + ' |  Msg = ' + msg, _logSource, xhr);\n        if (_onError) {\n            _onError(_transportLP, textStatus + ' | ' + errorThrown);\n        }\n    }\n\n    function start() {\n        _logger.debug('Starting transport...', _logSource);\n\n        // ensure transport is stopped\n        stop();\n\n        // Start long poll in 20ms\n        _requestMessagesTimer = setTimeout(function () { requestMessages(); }, 20);\n\n        _logger.debug('Started transport', _logSource);\n        return true;\n    }\n\n    function stop() {\n        // Abort pending initial request for messages\n        if (_requestMessagesTimer) {\n            clearTimeout(_requestMessagesTimer);\n        }\n\n        // Abort any pending request for messages\n        if (_currentRequestAJAX) {\n            _logger.debug('Stopping transport...', _logSource);\n\n            // Mark connection as DOWN\n            _isConnected = false;\n            _sessionID = undefined;\n\n            _currentRequestAJAX.abort();\n            _currentRequestAJAX = undefined;\n\n            _logger.debug('Stopped transport', _logSource);\n        }\n    }\n\n    function registerIE9AjaxTransport() {\n        var httpRegEx = /^https?:\\/\\//i;\n        var getOrPostRegEx = /^get|post$/i;\n        var sameSchemeRegEx = new RegExp('^' + location.protocol, 'i');\n\n        // ajaxTransport exists in jQuery 1.5+\n        $.ajaxTransport('* text html xml json', function (options, userOptions, jqXHR) {\n            // Only continue if the request is: asynchronous, uses GET or POST method, has HTTP or HTTPS protocol, and has the same scheme as the calling page\n            if (!options.crossDomain || !options.async || !getOrPostRegEx.test(options.type) || !httpRegEx.test(options.url) || !sameSchemeRegEx.test(options.url)) {\n                return;\n            }\n            var xdr = null;\n\n            return {\n                send: function (headers, complete) {\n                    var postData = '';\n                    var userType = (userOptions.dataType || '').toLowerCase();\n\n                    xdr = new XDomainRequest();\n                    if (/^\\d+$/.test(userOptions.timeout)) {\n                        xdr.timeout = userOptions.timeout;\n                    }\n\n                    xdr.ontimeout = function () {\n                        complete(500, 'timeout');\n                        // clear reference to XDomainRequest object\n                        xdr = undefined;\n                    };\n\n                    xdr.onload = function () {\n                        var allResponseHeaders = 'Content-Length: ' + xdr.responseText.length + '\\r\\nContent-Type: ' + xdr.contentType;\n                        var status = {\n                            code: 200,\n                            message: 'success'\n                        };\n                        var responses = {\n                            text: xdr.responseText\n                        };\n                        try {\n                            if (userType === 'html' || /text\\/html/i.test(xdr.contentType)) {\n                                responses.html = xdr.responseText;\n                            } else if (userType === 'json' || (userType !== 'text' && /\\/json/i.test(xdr.contentType))) {\n                                try {\n                                    responses.json = $.parseJSON(xdr.responseText);\n                                } catch (e) {\n                                    _logger.error('xdr.onload PARSE ERROR');\n                                    status.code = 500;\n                                    status.message = 'JSON parse error';\n                                    //throw 'Invalid JSON: ' + xdr.responseText;\n                                }\n                            } else if (userType === 'xml' || (userType !== 'text' && /\\/xml/i.test(xdr.contentType))) {\n                                var doc = new ActiveXObject('Microsoft.XMLDOM');\n                                doc.async = false;\n                                try {\n                                    doc.loadXML(xdr.responseText);\n                                } catch (e) {\n                                    doc = undefined;\n                                }\n                                if (!doc || !doc.documentElement || doc.getElementsByTagName('parsererror').length) {\n                                    _logger.error('Invalid XML: ' + xdr.responseText);\n                                    status.code = 500;\n                                    status.message = 'XML parse error';\n                                    // throw 'Invalid XML: ' + xdr.responseText;\n                                }\n                                responses.xml = doc;\n                            }\n                        } catch (parseMessage) {\n                            _logger.error('Caught parseMessage exception: ' + parseMessage.message);\n                            // throw parseMessage;\n                        } finally {\n                            complete(status.code, status.message, responses, allResponseHeaders);\n                            // clear reference to XDomainRequest object\n                            xdr = undefined;\n                        }\n                    };\n\n                    // set an empty handler for 'onprogress' so requests don't get aborted\n                    xdr.onprogress = function () { };\n                    xdr.onerror = function () {\n                        complete(500, 'error', {\n                            text: xdr.responseText\n                        });\n                        // clear reference to XDomainRequest object\n                        xdr = undefined;\n                    };\n\n                    if (userOptions.data) {\n                        postData = ($.type(userOptions.data) === 'string') ? userOptions.data : $.param(userOptions.data);\n                    }\n                    xdr.open(options.type, options.url);\n                    xdr.send(postData);\n                },\n                abort: function () {\n                    if (xdr) {\n                        xdr.abort();\n                    }\n                }\n            };\n        });\n    }\n    // #endregion\n    //-END-METHODS------------\n\n};\n\n/// <reference path=\"../../_references.js\" />\n\nETX.namespace('clientAPI');\n\nETX.clientAPI.TransportWS = function (options) {\n\n    'use strict';\n\n    //-CONSTRUCTOR-------------\n    // #region\n    //----PRIVATE--------------\n    // #region\n    var _transportWS = this,\n        _options = options || {},\n        _webSocketFactory = _options.webSocketFactory || new ETX.clientAPI.WebSocketFactory(),\n        _logger = _options.logger || new ETX.logging.Logger(),\n        _logSource = 'TransportWS',\n        _URI = _options.URI || '',\n        _onOpen = _options.onOpen,\n        _onError = _options.onError,\n        _onMessage = _options.onMessage,\n        _onClose = _options.onClose,\n        _websocket,\n        _isConnected = false,\n        _sessionID;\n    // #endregion\n    //----END-PRIVATE---------\n\n    //----PUBLIC--------------\n    // #region\n    _transportWS.type = function () { return ETX.clientAPI.Constants.TransportType.WebSocket; }\n    _transportWS.getSessionID = function () { return _sessionID; }\n    _transportWS.isConnected = function () { return _isConnected; };\n    _transportWS.logger = _logger;\n    _transportWS.start = start;\n    _transportWS.send = send;\n    _transportWS.stop = stop;\n    _transportWS.destroy = destroy;\n    // #endregion\n    //----END-PUBLIC----------\n\n    _logger.debug('Created ETX.clientAPI.TransportWS', _logSource);\n\n    return _transportWS;\n    // #endregion\n    //-END-CONSTRUCTOR--------\n\n\n    //-METHODS----------------\n    // #region\n    function destroy() {\n        // Clear all callbacks...\n        _onOpen = undefined;\n        _onError = undefined;\n        _onMessage = undefined;\n        _onClose = undefined;\n\n        stop();\n\n        _logger.debug('Destroyed ETX.clientAPI.TransportWS', _logSource);\n    }\n\n    function onClose(event) {\n        if (_websocket) {\n            _isConnected = false;\n            _logger.verbose('Websocket closing | State = ' + _websocket.readyState, _logSource, event);\n            if (_onClose) {\n                _onClose(_transportWS, event);\n            }\n        }\n    }\n\n    function onError(event) {\n        if (_websocket) {\n            if (_onError) {\n                _onError(_transportWS, 'Web socket error', event);\n            }\n        }\n    }\n\n    function onMessage(event) {\n        if (_websocket && _onMessage) {\n            var sMessage = event.data;\n            // Is this a valid message?\n            try {\n\n                if (/^[\\],:{}\\s]*$/.test(sMessage.replace(/\\\\[\"\\\\\\/bfnrtu]/g, '@')\n                                                 .replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']')\n                                                 .replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))) {\n                    var oMessage = JSON.parse(sMessage);\n\n                    if (oMessage.T == ETX.clientAPI.Constants.messages.SessionID) {\n                        _logger.debug('Handling messsage SessionID (\"' + oMessage.T + '\"): ' + sMessage, _logSource);\n                        _sessionID = oMessage.t[ETX.clientAPI.Constants.messages.SessionID];\n                    }\n\n                    _onMessage(_transportWS, oMessage);\n                } else {\n                    throw 'Invalid JSON received';\n                }\n            } catch (ex) {\n                _logger.error('Error receiving message | Exception = ' + ex + ' |  Msg = ' + sMessage, _logSource, [ex, event]);\n                if (_onError) {\n                    _onError(_transportWS, 'Error receiving message | Exception = ' + ex + ' |  Msg = ' + sMessage, sMessage);\n                }\n            }\n        }\n    }\n\n    function onOpen(event) {\n        if (_websocket) {\n            // As this event is fired mulitple times, only fire onOpen event once the web socket is actual ready to transmit data...\n            _logger.verbose('Websocket open | State = ' + _websocket.readyState, _logSource, event);\n            if (_websocket.readyState == 1) {\n                _isConnected = true;\n                if (_onOpen) {\n                    _onOpen(_transportWS, event);\n                }\n            }\n        }\n    }\n\n    function send(message) {\n        if (_websocket) {\n            try {\n                var sMsg = JSON.stringify(message);\n                if (_websocket.readyState != 1) {\n                    _logger.warning('Failed to send message, web socket not ready | State = ' + _websocket.readyState + ' | Msg = ' + sMsg, _logSource, _websocket);\n                }\n                if (_websocket.readyState == 1) {\n                    _websocket.send(sMsg);\n                }\n            } catch (ex) {\n                _logger.error('Error sending message | Exception = ' + ex + ' |  Msg = ' + message, _logSource, [ex, _websocket]);\n                if (_onError) {\n                    _onError(_transportWS, 'Error sending message | Exception = ' + ex + ' |  Msg = ' + message, message);\n                }\n            }\n        }\n    }\n\n    function start() {\n        _logger.debug('Starting transport...', _logSource);\n\n        // ensure transport is stopped\n        stop();\n\n        var success = false;\n        _websocket = _webSocketFactory.create(_URI);\n        if (_websocket) {\n            _websocket.onopen = onOpen;\n            _websocket.onclose = onClose;\n            _websocket.onerror = onError;\n            _websocket.onmessage = onMessage;\n            success = true;\n\n            _logger.debug('Started transport', _logSource);\n        }\n        return success;\n    }\n\n    function stop() {\n        if (_websocket) {\n            _logger.debug('Stopping transport...', _logSource);\n\n            _websocket.onopen = undefined;\n            _websocket.onmessage = undefined;\n            _websocket.onerror = undefined;\n            _websocket.onclose = undefined;\n            _websocket.close();\n            _websocket = undefined;\n\n            _isConnected = false;\n            _sessionID = undefined;\n\n            _logger.debug('Stopped transport', _logSource);\n        }\n    }\n    // #endregion\n    //-END-METHODS------------\n\n};\n\n/// <reference path=\"../../_references.js\" />\n\nETX.namespace('clientAPI');\n\nETX.clientAPI.WebSocketFactory = function (options) {\n\n    'use strict';\n\n    //-CONSTRUCTOR-------------\n    // #region\n    //----PRIVATE--------------\n    // #region\n    var _webSocketFactory = this,\n        _options = options || {};\n    // #endregion\n    //----END-PRIVATE---------  \n\n    //----PUBLIC--------------\n    // #region\n    _webSocketFactory.create = function create(url, protocols) {\n        // Create web socket transport object\n        if (protocols) {\n            return new WebSocket(url, protocols);\n        } else {\n            return new WebSocket(url);\n        }\n    };\n    // #endregion\n    //----END-PUBLIC----------\n\n    return _webSocketFactory;\n    // #endregion\n    //-END-CONSTRUCTOR--------\n\n};\n\n/// <reference path=\"../../../_references.js\" />\n\nETX.namespace('clientAPI.requests');\n\n/**\n * @class ETX.clientAPI.requests.OrderRequest\n *\n * @requires ETX\n * @requires ETX.clientAPI.Constants\n * @requires ETX.clientAPI.Helpers\n * @requires ETX.logging.Logger\n * @requires jQuery\n *\n * Creates a new `ETX.clientAPI.requests.OrderRequest`, which can be used to create, amend and cancel \n *    \n * **NOTE:** Requires the following third-party JavaScript libraries:   \n * \n *  +  [jQuery](http://api.jquery.com/)\n *   \n * ###Example:\n *      // Create new primary order with email and SMS alerts...\n *      var api = new ETX.clientAPI.ClientAPI({\n *          webSocketRootURL: 'ws://127.0.0.1:82',\n *          webAPIRootURL: 'http://127.0.0.1:81/',\n *          username: 'test_user',\n *          password: 'change_me',\n *          brokerID: '1'\n *      });\n *      var orderRequest = new ETX.clientAPI.requests.OrderRequest(ETX.clientAPI.requests.OrderRequest.requestTypes.NEW);\n *      orderRequest.marketID = '12345';\n *      orderRequest.subAccountID = '1';\n *      orderRequest.newOrders.primaryOrder.side = ETX.clientAPI.requests.OrderRequest.sides.BUY;\n *      orderRequest.newOrders.primaryOrder.quantity = 1;\n *      orderRequest.newOrders.primaryOrder.level = 123.45;\n *      orderRequest.smsAlertOn = true;\n *      orderRequest.emailAlertOn = true;\n *      orderRequest.alertMessage = 'This is a custom order message for Market \"12345\"!!!';\n *      // NOTE: Returns a jQuery Promise object, as this is an async request\n *      api.sendOrderRequest(orderRequest)\n *          .done(function (api, executionReport) {\n *              // Execution report should contain the created/amended/cancelled order's order status and text describing the details of the operation\n *              var orderStatus = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus];\n *              var text = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.Text];\n *          })\n *          .fail(function (api, executionReport) {\n *              // Execution report should contain the failed order's order status and text describing the failure\n *              var orderStatus = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus];\n *              var text = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.Text];\n *          });\n */\n/**\n * @constructor\n * @param {String} orderRequestType - Defines the type of order request action.\n * @param {Object} [options] - (Optional) Allows certain optional settings to be initialised upon instantiation.\n * @returns {ETX.clientAPI.requests.OrderRequest}\n */\nETX.clientAPI.requests.OrderRequest = function (orderRequestType, options) {\n\n    'use strict';\n\n    //-CONSTRUCTOR------------\n    //----PRIVATE-------------\n    var _orderRequest = this,\n        _options = options || {},\n        _helpers = _options.helpers || ETX.clientAPI.Helpers;\n    //----END-PRIVATE---------  \n\n    //----PUBLIC--------------\n    /** \n     * Gets or sets the type of order request action.\n     * @property {String} orderRequestType\n     */\n    _orderRequest.orderRequestType = orderRequestType;\n    /** \n     * Gets or sets the unique identifier of the market of the orders.\n     * @property {String} marketID\n     */\n    _orderRequest.marketID = undefined;\n    /** \n     * Gets or sets the unique identifier of the account's sub-account of the orders.\n     * @property {String} subAccountID\n     */\n    _orderRequest.subAccountID = undefined;\n    /** \n     * Gets the (read only) section for new orders.\n     *\n     * ###Example:\n     *      // Create new primary/oco order pair, each with stop and limit closing orders and email and SMS alerts...\n     *      var api = new ETX.clientAPI.ClientAPI({\n     *          webSocketRootURL: 'ws://127.0.0.1:82',\n     *          webAPIRootURL: 'http://127.0.0.1:81/',\n     *          username: 'test_user',\n     *          password: 'change_me',\n     *          brokerID: '1'\n     *      });\n     *      var orderRequest = new ETX.clientAPI.requests.OrderRequest(ETX.clientAPI.requests.OrderRequest.requestTypes.NEW);\n     *      orderRequest.marketID = '12345';\n     *      orderRequest.subAccountID = '1';\n     *      orderRequest.newOrders.primaryOrder.side = ETX.clientAPI.requests.OrderRequest.sides.BUY;\n     *      orderRequest.newOrders.primaryOrder.quantity = 1;\n     *      orderRequest.newOrders.primaryOrder.level = 123.45;\n     *      orderRequest.newOrders.primaryOrder.stopOrderOn = true;\n     *      orderRequest.newOrders.primaryOrder.stopOrderLevel = 123.21;\n     *      orderRequest.newOrders.primaryOrder.stopOrderGuaranteedOn = true;\n     *      orderRequest.newOrders.primaryOrder.stopOrderTrailingOn = true;\n     *      orderRequest.newOrders.primaryOrder.stopOrderTrailingIncrementSize = 15;\n     *      orderRequest.newOrders.primaryOrder.limitOrderOn = true;\n     *      orderRequest.newOrders.primaryOrder.limitOrderLevel = 125.21;\n     *      orderRequest.newOrders.ocoOrderOn = true;\n     *      orderRequest.newOrders.ocoOrder.side = ETX.clientAPI.requests.OrderRequest.sides.SELL;\n     *      orderRequest.newOrders.ocoOrder.quantity = 1;\n     *      orderRequest.newOrders.ocoOrder.level = 111.11;\n     *      orderRequest.newOrders.ocoOrder.stopOrderOn = true;\n     *      orderRequest.newOrders.ocoOrder.stopOrderLevel = 112.34;\n     *      orderRequest.newOrders.ocoOrder.stopOrderGuaranteedOn = true;\n     *      orderRequest.newOrders.ocoOrder.stopOrderTrailingOn = true;\n     *      orderRequest.newOrders.ocoOrder.stopOrderTrailingIncrementSize = 15;\n     *      orderRequest.newOrders.ocoOrder.limitOrderOn = true;\n     *      orderRequest.newOrders.ocoOrder.limitOrderLevel = 110.12;\n     *      // NOTE: Returns a jQuery Promise object, as this is an async request\n     *      api.sendOrderRequest(orderRequest)\n     *          .done(function (api, executionReport) {\n     *              // Execution report should contain the created/amended/cancelled order's order status and text describing the details of the operation\n     *              var orderStatus = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus];\n     *              var text = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.Text];\n     *          })\n     *          .fail(function (api, executionReport) {\n     *              // Execution report should contain the failed order's order status and text describing the failure\n     *              var orderStatus = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus];\n     *              var text = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.Text];\n     *          });\n     *\n     * @property {Object} newOrders\n     * @readonly\n     */\n    _orderRequest.newOrders = {\n        /** \n         * Gets or sets the unique identifier of the order group of the new order(s).\n         * @property {String} orderGroupID\n         * @member ETX.clientAPI.requests.OrderRequest.newOrders\n         */\n        orderGroupID: undefined,\n        /** \n         * Gets the (read only) section for the new primary order.\n         * @property {Object} primaryOrder\n         * @member ETX.clientAPI.requests.OrderRequest.newOrders\n         * @readonly\n         */\n        primaryOrder: {\n            /** \n             * Gets or sets the unique identifier of the new primary order.\n             * @property {String} orderID\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.primaryOrder\n             */\n            orderID: undefined,\n            /** \n             * Gets or sets the direction of the new primary order, which should be a value defined in `ETX.clientAPI.requests.OrderRequest.sides`.\n             * @property {String} side\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.primaryOrder\n             */\n            side: undefined,\n            /** \n             * Gets or sets the new primary order quantity.\n             * @property {Number} quantity\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.primaryOrder\n             */\n            quantity: undefined,\n            /** \n             * Gets or sets the new primary order level.\n             * @property {Number} level\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.primaryOrder\n             */\n            level: undefined,\n            /** \n             * Gets or sets whether the new primary order requires a stop order.\n             * @property {Boolean} stopOrderOn\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.primaryOrder\n             */\n            stopOrderOn: false,\n            /** \n             * Gets or sets the new primary order's stop order level.\n             * @property {Number} stopOrderLevel\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.primaryOrder\n             */\n            stopOrderLevel: undefined,\n            /** \n             * Gets or sets whether the new primary order's stop order is guaranteed.\n             * @property {Boolean} stopOrderGuaranteedOn\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.primaryOrder\n             */\n            stopOrderGuaranteedOn: false,\n            /** \n             * Gets or sets whether the new primary order's stop order is trailing.\n             * @property {Boolean} stopOrderTrailingOn\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.primaryOrder\n             */\n            stopOrderTrailingOn: false,\n            /** \n             * Gets or sets the new primary order's stop order trailing increment size.\n             * @property {Number} stopOrderTrailingIncrementSize\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.primaryOrder\n             */\n            stopOrderTrailingIncrementSize: undefined,\n            /** \n             * Gets or sets whether the new primary order requires a limit order.\n             * @property {Boolean} limitOrderOn\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.primaryOrder\n             */\n            limitOrderOn: false,\n            /** \n             * Gets or sets the new primary order's limit order level.\n             * @property {Number} limitOrderLevel\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.primaryOrder\n             */\n            limitOrderLevel: undefined\n        },\n        /** \n         * Gets or sets whether a new OCO order is required.\n         * @property {String} ocoOrderOn\n         * @member ETX.clientAPI.requests.OrderRequest.newOrders\n         */\n        ocoOrderOn: false,\n        /** \n         * Gets the (read only) section for the new OCO order.\n         * @property {Object} ocoOrder\n         * @member ETX.clientAPI.requests.OrderRequest.newOrders\n         * @readonly\n         */\n        ocoOrder: {\n            /** \n             * Gets or sets the unique identifier of the new OCO order.\n             * @property {String} orderID\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.ocoOrder\n             */\n            orderID: undefined,\n            /** \n             * Gets or sets the direction of the new oco order, which should be a value defined in `ETX.clientAPI.requests.OrderRequest.sides`.\n             * @property {String} side\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.ocoOrder\n             */\n            side: undefined,\n            /** \n             * Gets or sets the new oco order quantity.\n             * @property {Number} quantity\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.ocoOrder\n             */\n            quantity: undefined,\n            /** \n             * Gets or sets the new oco order level.\n             * @property {Number} level\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.ocoOrder\n             */\n            level: undefined,\n            /** \n             * Gets or sets whether the new oco order requires a stop order.\n             * @property {Boolean} stopOrderOn\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.ocoOrder\n             */\n            stopOrderOn: false,\n            /** \n             * Gets or sets the new oco order's stop order level.\n             * @property {Number} stopOrderLevel\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.ocoOrder\n             */\n            stopOrderLevel: undefined,\n            /** \n             * Gets or sets whether the new oco order's stop order is guaranteed.\n             * @property {Boolean} stopOrderGuaranteedOn\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.ocoOrder\n             */\n            stopOrderGuaranteedOn: false,\n            /** \n             * Gets or sets whether the new oco order's stop order is trailing.\n             * @property {Boolean} stopOrderTrailingOn\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.ocoOrder\n             */\n            stopOrderTrailingOn: false,\n            /** \n             * Gets or sets the new oco order's stop order trailing increment size.\n             * @property {Number} stopOrderTrailingIncrementSize\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.ocoOrder\n             */\n            stopOrderTrailingIncrementSize: undefined,\n            /** \n             * Gets or sets whether the new oco order requires a limit order.\n             * @property {Boolean} limitOrderOn\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.ocoOrder\n             */\n            limitOrderOn: false,\n            /** \n             * Gets or sets the new oco order's limit order level.\n             * @property {Number} limitOrderLevel\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.ocoOrder\n             */\n            limitOrderLevel: undefined\n        },\n        /** \n         * Gets or sets the new primary/oco order(s) good til type, which should be a value defined in `ETX.clientAPI.requests.OrderRequest.goodTilTypes`.\n         * @property {Number} goodTilType\n         * @member ETX.clientAPI.requests.OrderRequest.newOrders\n         */\n        goodTilType: ETX.clientAPI.requests.OrderRequest.goodTilTypes.CANCELLED,\n        /** \n         * Gets or sets the new primary/oco order(s) \"good until\" date/time.   \n         *    \n         * **NOTE: This is only required, if the `newOrders.goodTilType` value is set to `ETX.clientAPI.requests.OrderRequest.goodTilTypes.DATE`.**\n         * @property {Date} goodTilDate\n         * @member ETX.clientAPI.requests.OrderRequest.newOrders\n         */\n        goodTilDateTime: undefined\n    };\n    /** \n     * Gets the (read only) section for closing orders.\n     *\n     * ###Example:\n     *     // Create new primary/oco order pair, each with stop and limit closing orders and email and SMS alerts...\n     *     var api = new ETX.clientAPI.ClientAPI({\n     *         webSocketRootURL: 'ws://127.0.0.1:82',\n     *         webAPIRootURL: 'http://127.0.0.1:81/',\n     *         username: 'test_user',\n     *         password: 'change_me',\n     *         brokerID: '1'\n     *     });\n     *     var orderRequest = new ETX.clientAPI.requests.OrderRequest(ETX.clientAPI.requests.OrderRequest.requestTypes.NEW);\n     *     orderRequest.marketID = '12345';\n     *     orderRequest.subAccountID = '1';\n     *     orderRequest.closingOrders.tradeID = '54321';\n     *     orderRequest.closingOrders.stopOrderOn = true;\n     *     orderRequest.closingOrders.stopOrderLevel = 123.21;\n     *     orderRequest.closingOrders.stopOrderGuaranteedOn = true;\n     *     orderRequest.closingOrders.stopOrderTrailingOn = true;\n     *     orderRequest.closingOrders.stopOrderTrailingIncrementSize = 15;\n     *     orderRequest.closingOrders.limitOrderOn = true;\n     *     orderRequest.closingOrders.limitOrderLevel = 125.21;\n     *     // NOTE: Returns a jQuery Promise object, as this is an async request\n     *     api.sendOrderRequest(orderRequest)\n     *         .done(function (api, executionReport) {\n     *             // Execution report should contain the created/amended/cancelled order's order status and text describing the details of the operation\n     *             var orderStatus = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus];\n     *             var text = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.Text];\n     *         })\n     *         .fail(function (api, executionReport) {\n     *             // Execution report should contain the failed order's order status and text describing the failure\n     *             var orderStatus = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus];\n     *             var text = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.Text];\n     *         });\n     *\n     * @property {Object} closingOrders\n     * @readonly\n     */\n    _orderRequest.closingOrders = {\n        /** \n         * Gets or sets the unique identifier of the trade of the closing order(s).\n         * @property {String} tradeID\n         * @member ETX.clientAPI.requests.OrderRequest.closingOrders\n         */\n        tradeID: undefined,\n        /** \n         * Gets or sets the unique identifier of the trade's closing stop order.\n         * @property {String} stopOrderID\n         * @member ETX.clientAPI.requests.OrderRequest.closingOrders\n         */\n        stopOrderID: undefined,\n        /** \n         * Gets or sets whether the new oco order requires a stop order.\n         * @property {Boolean} stopOrderOn\n         * @member ETX.clientAPI.requests.OrderRequest.closingOrders\n         */\n        stopOrderOn: false,\n        /** \n         * Gets or sets the new oco order's stop order level.\n         * @property {Number} stopOrderLevel\n         * @member ETX.clientAPI.requests.OrderRequest.closingOrders\n         */\n        stopOrderLevel: undefined,\n        /** \n         * Gets or sets whether the new oco order's stop order is guaranteed.\n         * @property {Boolean} stopOrderGuaranteedOn\n         * @member ETX.clientAPI.requests.OrderRequest.closingOrders\n         */\n        stopOrderGuaranteedOn: false,\n        /** \n         * Gets or sets whether the new oco order's stop order is trailing.\n         * @property {Boolean} stopOrderTrailingOn\n         * @member ETX.clientAPI.requests.OrderRequest.closingOrders\n         */\n        stopOrderTrailingOn: false,\n        /** \n         * Gets or sets the new oco order's stop order trailing increment size.\n         * @property {Number} stopOrderTrailingIncrementSize\n         * @member ETX.clientAPI.requests.OrderRequest.closingOrders\n         */\n        stopOrderTrailingIncrementSize: undefined,\n        /** \n         * Gets or sets the unique identifier of the trade's closing limit order.\n         * @property {String} limitOrderID\n         * @member ETX.clientAPI.requests.OrderRequest.closingOrders\n         */\n        limitOrderID: undefined,\n        /** \n         * Gets or sets whether the new oco order requires a limit order.\n         * @property {Boolean} limitOrderOn\n         * @member ETX.clientAPI.requests.OrderRequest.closingOrders\n         */\n        limitOrderOn: false,\n        /** \n         * Gets or sets the new oco order's limit order level.\n         * @property {Number} limitOrderLevel\n         * @member ETX.clientAPI.requests.OrderRequest.closingOrders\n         */\n        limitOrderLevel: undefined\n    };\n    /** \n     * Gets or sets the unique identifier of the new or closing order to cancel.\n     *\n     * ###Example:\n     *      // Cancel and existing new or closing order...\n     *      var api = new ETX.clientAPI.ClientAPI({\n     *          webSocketRootURL: 'ws://127.0.0.1:82',\n     *          webAPIRootURL: 'http://127.0.0.1:81/',\n     *          username: 'test_user',\n     *          password: 'change_me',\n     *          brokerID: '1'\n     *      });\n     *      var orderRequest = new ETX.clientAPI.requests.OrderRequest(ETX.clientAPI.requests.OrderRequest.requestTypes.CANCEL);\n     *      orderRequest.cancellingOrderID = '98765';\n     *      orderRequest.marketID = '12345';\n     *      // NOTE: Returns a jQuery Promise object, as this is an async request\n     *      api.sendOrderRequest(orderRequest)\n     *          .done(function (api, executionReport) {\n     *              // Execution report should contain the cancelled order's order status and text describing the details of the operation\n     *              var orderStatus = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus];\n     *              var text = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.Text];\n     *          })\n     *          .fail(function (api, executionReport) {\n     *              // Execution report should contain the failed order's order status and text describing the failure\n     *              var orderStatus = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus];\n     *              var text = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.Text];\n     *          });\n     *\n     * @property {String} cancellingOrderID\n     */\n    _orderRequest.cancellingOrderID = undefined;\n    /** \n     * Gets or sets whether the order should send SMS alerts when executed.\n     * @property {Boolean} smsAlertOn\n     */\n    _orderRequest.smsAlertOn = _helpers.convert.toBoolean(_options.smsAlertOn);\n    /** \n     * Gets or sets whether the order should send email alerts when executed.\n     * @property {Boolean} emailAlertOn\n     */\n    _orderRequest.emailAlertOn = _helpers.convert.toBoolean(_options.emailAlertOn);\n    /** \n     * Gets or sets the SMS and/or Email alert message to use if the order executes.\n     * @property {String} alertMessage\n     */\n    _orderRequest.alertMessage = _options.alertMessage;\n\n    /** \n     * Gets or sets the (client generated) unique identifier for a sent order request.\n     * @property {String} uniqueClientIdentifier\n     */\n    _orderRequest.uniqueClientIdentifier = _options.uniqueClientIdentifier;\n    /** \n     * Gets or sets the (client generated) transaction timestamp for a sent order request.\n     * @property {Date} transactionTime\n     */\n    _orderRequest.transactionTime = _options.transactionTime;\n\n    _orderRequest.parseOrder = parseOrder;\n    //----END-PUBLIC----------\n\n    return _orderRequest;\n    //-END-CONSTRUCTOR--------\n\n\n    //----METHODS-------------\n    /** \n     * Parses a working order JSON object and stores the data appropriately within the order request.\n     *\n     * @method parseOrder\n     * @param {Object} workingOrder - Object containing working order data.\n     * @returns {void} \n     */\n    function parseOrder(workingOrder) {\n        if ($.isPlainObject(workingOrder) === false) { workingOrder = JSON.parse(workingOrder || {}); }\n\n        // New Order specific\n        if ((ETX.clientAPI.Constants.messages.WorkingOrder.OrderType_New === workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderType]) ||\n            (ETX.clientAPI.Constants.messages.WorkingOrder.OrderType_OCO === workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderType])) {\n            // Common \n            _orderRequest.marketID = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.MarketID];\n            _orderRequest.subAccountID = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.SubAccountID];\n            _orderRequest.newOrders.orderGroupID = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderGroupID];\n            _orderRequest.newOrders.goodTilType = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.GoodTilType] || ETX.clientAPI.requests.OrderRequest.goodTilTypes.CANCELLED;\n            if (_orderRequest.newOrders.goodTilType === ETX.clientAPI.requests.OrderRequest.goodTilTypes.DATE) {\n                var goodTilDate = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.GoodTilDateTime];\n                _orderRequest.newOrders.goodTilDateTime = _helpers.convert.toDate(goodTilDate);\n            }\n            _orderRequest.emailAlertOn = _helpers.convert.toBoolean(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.EmailAlertOn]);\n            _orderRequest.smsAlertOn = _helpers.convert.toBoolean(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.SMSAlertOn]);\n            _orderRequest.alertMessage = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.AlertMessage];\n\n            // Primary Order specific\n            if (ETX.clientAPI.Constants.messages.WorkingOrder.OrderType_New === workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderType]) {\n                _orderRequest.newOrders.primaryOrder.orderID = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderID];\n                _orderRequest.newOrders.primaryOrder.side = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.Side];\n                _orderRequest.newOrders.primaryOrder.quantity = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.Quantity]);\n                _orderRequest.newOrders.primaryOrder.level = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.Level]);\n                _orderRequest.newOrders.primaryOrder.stopOrderOn = _helpers.compare.isIdentifier(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.StopOrderID]);\n                _orderRequest.newOrders.primaryOrder.stopOrderLevel = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.StopOrderLevel]);\n                _orderRequest.newOrders.primaryOrder.stopOrderGuaranteedOn = _helpers.convert.toBoolean(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.GuaranteedStopsOn]);\n                _orderRequest.newOrders.primaryOrder.stopOrderTrailingOn = _helpers.convert.toBoolean(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.TrailingStopsOn]);\n                _orderRequest.newOrders.primaryOrder.stopOrderTrailingIncrementSize = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.TrailingStopsIncrementSize]);\n                _orderRequest.newOrders.primaryOrder.limitOrderOn = _helpers.compare.isIdentifier(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.LimitOrderID]);\n                _orderRequest.newOrders.primaryOrder.limitOrderLevel = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.LimitOrderLevel]);\n            }\n\n            // OCO Order specific\n            if (ETX.clientAPI.Constants.messages.WorkingOrder.OrderType_OCO === workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderType]) {\n                _orderRequest.newOrders.ocoOrderOn = true;\n                _orderRequest.newOrders.ocoOrder.orderID = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderID];\n                _orderRequest.newOrders.ocoOrder.side = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.Side];\n                _orderRequest.newOrders.ocoOrder.quantity = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.Quantity]);\n                _orderRequest.newOrders.ocoOrder.level = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.Level]);\n                _orderRequest.newOrders.ocoOrder.stopOrderOn = _helpers.compare.isIdentifier(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.StopOrderID]);\n                _orderRequest.newOrders.ocoOrder.stopOrderLevel = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.StopOrderLevel]);\n                _orderRequest.newOrders.ocoOrder.stopOrderGuaranteedOn = _helpers.convert.toBoolean(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.GuaranteedStopsOn]);\n                _orderRequest.newOrders.ocoOrder.stopOrderTrailingOn = _helpers.convert.toBoolean(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.TrailingStopsOn]);\n                _orderRequest.newOrders.ocoOrder.stopOrderTrailingIncrementSize = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.TrailingStopsIncrementSize]);\n                _orderRequest.newOrders.ocoOrder.limitOrderOn = _helpers.compare.isIdentifier(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.LimitOrderID]);\n                _orderRequest.newOrders.ocoOrder.limitOrderLevel = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.LimitOrderLevel]);\n            }\n        }\n\n        // Closing Order(s) specific\n        if ((ETX.clientAPI.Constants.messages.WorkingOrder.OrderType_Stop === workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderType]) ||\n            (ETX.clientAPI.Constants.messages.WorkingOrder.OrderType_Limit === workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderType])) {\n            // Common \n            _orderRequest.marketID = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.MarketID];\n            _orderRequest.subAccountID = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.SubAccountID];\n            _orderRequest.closingOrders.tradeID = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.TradeID];\n            _orderRequest.emailAlertOn = _helpers.convert.toBoolean(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.EmailAlertOn]);\n            _orderRequest.smsAlertOn = _helpers.convert.toBoolean(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.SMSAlertOn]);\n            _orderRequest.alertMessage = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.AlertMessage];\n\n            // Stop Order specific \n            if (ETX.clientAPI.Constants.messages.WorkingOrder.OrderType_Stop === workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderType]) {\n                _orderRequest.closingOrders.stopOrderOn = true;\n                _orderRequest.closingOrders.stopOrderID = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderID];\n                _orderRequest.closingOrders.stopOrderLevel = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.Level]);\n                _orderRequest.closingOrders.stopOrderGuaranteedOn = _helpers.convert.toBoolean(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.GuaranteedStopsOn]);\n                _orderRequest.closingOrders.stopOrderTrailingOn = _helpers.convert.toBoolean(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.TrailingStopsOn]);\n                _orderRequest.closingOrders.stopOrderTrailingIncrementSize = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.TrailingStopsIncrementSize]);\n            }\n\n            // Limit Order specific \n            if (ETX.clientAPI.Constants.messages.WorkingOrder.OrderType_Limit === workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderType]) {\n                _orderRequest.closingOrders.limitOrderOn = true;\n                _orderRequest.closingOrders.limitOrderID = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderID];\n                _orderRequest.closingOrders.limitOrderLevel = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.Level]);\n            }\n        }\n    }\n    //----END-METHODS---------\n\n};\n\n\n//----STATIC--------------\n/** \n * Order request goodTilTypes:   \n * `{ CANCELLED: 'c', END_OF_DAY: 'eod', DATE: 'd' }`\n *\n * @enum {String} ETX.clientAPI.requests.OrderRequest.goodTilTypes\n *\n * @member ETX.clientAPI.requests.OrderRequest\n * @static\n * @readonly\n */\nETX.clientAPI.requests.OrderRequest.goodTilTypes = {\n    /** \n     * Good until cancelled type.\n     * @property {String} CANCELLED\n     */\n    CANCELLED: ETX.clientAPI.Constants.messages.OrderRequest.NewOrders.GoodTilType_Cancelled,\n    /** \n     * Good until specific date type.\n     * @property {String} DATE\n     */\n    DATE: ETX.clientAPI.Constants.messages.OrderRequest.NewOrders.GoodTilType_DateTime,\n    /** \n     * Good until end of day type.\n     * @property {String} END_OF_DAY\n     */\n    END_OF_DAY: ETX.clientAPI.Constants.messages.OrderRequest.NewOrders.GoodTilType_EndOfDay\n};\n\n/** \n * Order request request types:   \n * `{ NEW: 'n', AMEND: 'a', CANCEL: 'c' }`\n *\n * @enum {String} ETX.clientAPI.requests.OrderRequest.requestTypes\n *\n * @member ETX.clientAPI.requests.OrderRequest\n * @static\n * @readonly\n */\nETX.clientAPI.requests.OrderRequest.requestTypes = {\n    /** \n     * Amend request type.\n     * @property {String} AMEND\n     */\n    AMEND: ETX.clientAPI.Constants.messages.OrderRequest.OrderRequestType_Amend,\n    /** \n     * Cancel request type.\n     * @property {String} CANCEL\n     */\n    CANCEL: ETX.clientAPI.Constants.messages.OrderRequest.OrderRequestType_Cancel,\n    /** \n     * New request type.\n     * @property {String} NEW\n     */\n    NEW: ETX.clientAPI.Constants.messages.OrderRequest.OrderRequestType_New\n};\n\n/** \n * Order request sides:   \n * `{ BUY: 'b', SELL: 's' }`\n *\n * @enum {String} ETX.clientAPI.requests.OrderRequest.sides\n *\n * @member ETX.clientAPI.requests.OrderRequest\n * @static\n * @readonly\n */\nETX.clientAPI.requests.OrderRequest.sides = {\n    /** \n     * Buy action.\n     * @property {String} BUY\n     */\n    BUY: ETX.clientAPI.Constants.messages.OrderRequest.NewOrders.Primary.Side_Buy,\n    /** \n     * Sell action.\n     * @property {String} SELL\n     */\n    SELL: ETX.clientAPI.Constants.messages.OrderRequest.NewOrders.Primary.Side_Sell\n};\n//----END-STATIC----------\n\n/// <reference path=\"../../../_references.js\" />\n\nETX.namespace(\"clientAPI.requests\");\n\n/**\n * @class ETX.clientAPI.requests.PriceAlertRequest\n *\n * @requires ETX\n * @requires ETX.clientAPI.Constants\n * @requires ETX.clientAPI.Helpers\n * @requires ETX.logging.Logger\n * @requires jQuery\n *\n * Creates a new `ETX.clientAPI.requests.PriceAlertRequest`, which can be used to create, amend and cancel price alerts..   \n *    \n * **NOTE:** Requires the following third-party JavaScript libraries:   \n *  \n *  + [jQuery](http://api.jquery.com/)\n *   \n * ###Example:\n *      var api = new ETX.clientAPI.ClientAPI({\n *          webSocketRootURL: 'ws://127.0.0.1:82',\n *          webAPIRootURL: 'http://127.0.0.1:81/',\n *          username: 'test_user',\n *          password: 'change_me',\n *          brokerID: '1'\n *      });\n *      \n *      var priceAlertRequest = new ETX.clientAPI.requests.PriceAlertRequest(ETX.clientAPI.requests.PriceAlertRequest.requestTypes.NEW);\n *      priceAlertRequest.marketID = '12345';\n *      priceAlertRequest.side = ETX.clientAPI.requests.PriceAlertRequest.sides.BUY;\n *      priceAlertRequest.triggerPrice = '123.45';\n *      priceAlertRequest.smsAlertOn = true;\n *      priceAlertRequest.emailAlertOn = true;\n *      priceAlertRequest.alertMessage = 'This is a custom price alert message for Market \"12345\"!!!';\n *      \n *      api.sendPriceAlertRequest(priceAlertRequest)\n *          .done(function (api, priceAlertResponse) {\n *              // Price alert request should have executed successfully\n *          })\n *          .fail(function (api, priceAlertResponse) {\n *              // Price alert response should have contain text describing the details of the failed price alert request\n *              var text = priceAlertResponse[ETX.clientAPI.Constants.messages.PriceAlertResponse.Text];\n *          });\n */\n/**\n * @constructor\n * @param {String} priceAlertRequestType - Defines the type of price alert request action.\n * @param {Object} [options] - (Optional) Allows certain optional settings to be initialised upon instantiation.\n * @returns {ETX.clientAPI.requests.TradeQuoteRequest}\n */\nETX.clientAPI.requests.PriceAlertRequest = function (priceAlertRequestType, options) {\n\n    'use strict';\n\n    //-CONSTRUCTOR------------\n    //----PRIVATE-------------\n    var _priceAlertRequest = this,\n        _options = options || {},\n        _helpers = ETX.clientAPI.Helpers;\n    //----END-PRIVATE---------  \n\n    //----PUBLIC--------------\n    /** \n     * Gets or sets the type of price alert request action.\n     * @property {String} priceAlertRequestType\n     */\n    _priceAlertRequest.priceAlertRequestType = priceAlertRequestType;\n    /** \n     * Gets or sets the unique identifier of the price alert.\n     * @property {String} alertID\n     */\n    _priceAlertRequest.alertID = undefined;\n    /** \n     * Gets or sets the unique identifier of the market to place the price alert on.\n     * @property {String} marketID\n     */\n    _priceAlertRequest.marketID = undefined;\n    /** \n     * Gets or sets the direction of the price alert to be placed, which should be a value defined in `ETX.clientAPI.requests.PriceAlertRequest.sides`.\n     * @property {String} side\n     */\n    _priceAlertRequest.side = undefined;\n    /** \n     * Gets or sets the price the price alert should be triggered at. \n     * @property {Number} triggerPrice\n     */\n    _priceAlertRequest.triggerPrice = undefined;\n    /** \n     * Gets or sets whether the price alert should send SMS alerts when triggered.\n     * @property {Boolean} smsAlertOn\n     */\n    _priceAlertRequest.smsAlertOn = false;\n    /** \n     * Gets or sets whether the price alert should send email alerts when triggered.\n     * @property {Boolean} emailAlertOn\n     */\n    _priceAlertRequest.emailAlertOn = false;\n    /** \n     * Gets or sets the SMS and/or Email alert message to use if the price alert triggers.\n     * @property {String} alertMessage\n     */\n    _priceAlertRequest.alertMessage = undefined;\n\n    /** \n     * Gets or sets the (client generated) unique identifier for a sent price alert request.\n     * @property {String} uniqueClientIdentifier\n     */\n    _priceAlertRequest.uniqueClientIdentifier = undefined;\n    /** \n     * Gets or sets the (client generated) transaction timestamp for a sent price alert request.\n     * @property {Date} transactionTime\n     */\n    _priceAlertRequest.transactionTime = undefined;\n\n    _priceAlertRequest.parsePriceAlert = parsePriceAlert;\n    //----END-PUBLIC----------\n    \n    \n    return _priceAlertRequest;\n    //-END-CONSTRUCTOR--------\n\n\n    //----METHODS-------------\n    /** \n     * Parses a price alert JSON object and stores the data appropriately within the price alert request.\n     *\n     * @method parsePriceAlert\n     * @param {Object} priceAlert - Object containing price alert data.\n     * @returns {void}\n     */\n    function parsePriceAlert(priceAlert) {\n        if ($.isPlainObject(priceAlert) === false) { priceAlert = JSON.parse(priceAlert || {}); }\n\n        _priceAlertRequest.alertID = priceAlert[ETX.clientAPI.Constants.messages.PriceAlert.AlertID];\n        _priceAlertRequest.marketID = priceAlert[ETX.clientAPI.Constants.messages.PriceAlert.MarketID];\n        _priceAlertRequest.side = priceAlert[ETX.clientAPI.Constants.messages.PriceAlert.Side];\n        _priceAlertRequest.triggerPrice = (+priceAlert[ETX.clientAPI.Constants.messages.PriceAlert.TriggerPrice]);\n        _priceAlertRequest.smsAlertOn = _helpers.convert.toBoolean(priceAlert[ETX.clientAPI.Constants.messages.PriceAlert.SMSAlertOn]);\n        _priceAlertRequest.emailAlertOn = _helpers.convert.toBoolean(priceAlert[ETX.clientAPI.Constants.messages.PriceAlert.EmailAlertOn]);\n        _priceAlertRequest.alertMessage = priceAlert[ETX.clientAPI.Constants.messages.PriceAlert.AlertMessage];\n        _priceAlertRequest.transactionTime = priceAlert[ETX.clientAPI.Constants.messages.PriceAlert.TransactionTime];\n    }\n    //----END-METHODS---------\n\n};\n\n\n//----STATIC--------------\n/** \n * Price alert request request types:   \n * `{ NEW: 'n', AMEND: 'a', CANCEL: 'c' }`\n *\n * @enum {String} ETX.clientAPI.requests.PriceAlertRequest.requestTypes\n *\n * @member ETX.clientAPI.requests.PriceAlertRequest\n * @static\n * @readonly\n */\nETX.clientAPI.requests.PriceAlertRequest.requestTypes = {\n    /** \n     * Amend request type.\n     * @property {String} AMEND\n     */\n    AMEND: ETX.clientAPI.Constants.messages.PriceAlertRequest.PriceAlertRequestType_Amend,\n    /** \n     * Cancel request type.\n     * @property {String} CANCEL\n     */\n    CANCEL: ETX.clientAPI.Constants.messages.PriceAlertRequest.PriceAlertRequestType_Cancel,\n    /** \n     * New request type.\n     * @property {String} NEW\n     */\n    NEW: ETX.clientAPI.Constants.messages.PriceAlertRequest.PriceAlertRequestType_New\n};\n\n/** \n * Price alert request sides:   \n * `{ BUY: 'b', SELL: 's' }`\n *\n * @enum {String} ETX.clientAPI.requests.PriceAlertRequest.sides\n *\n * @member ETX.clientAPI.requests.PriceAlertRequest\n * @static\n * @readonly\n */\nETX.clientAPI.requests.PriceAlertRequest.sides = {\n    /** \n     * Buy action.\n     * @property {String} BUY\n     */\n    BUY: ETX.clientAPI.Constants.messages.PriceAlertRequest.Side_Buy,\n    /** \n     * Sell action.\n     * @property {String} SELL\n     */\n    SELL: ETX.clientAPI.Constants.messages.PriceAlertRequest.Side_Sell\n};\n//----END-STATIC----------\n\n/// <reference path=\"../../../_references.js\" />\n\nETX.namespace('clientAPI.requests');\n\n/**\n * @class ETX.clientAPI.requests.TradeQuoteRequest\n *\n * @requires ETX\n * @requires ETX.clientAPI.Constants\n * @requires ETX.logging.Logger\n *\n * Creates a new `ETX.clientAPI.requests.TradeQuoteRequest`, which can be used to create request-for-quote (RFQ) message.   \n *   \n * ###Example:\n *      var api = new ETX.clientAPI.ClientAPI({\n *          webSocketRootURL: 'ws://127.0.0.1:82',\n *          webAPIRootURL: 'http://127.0.0.1:81/',\n *          username: 'test_user',\n *          password: 'change_me',\n *          brokerID: '1'\n *      });\n *      \n *      var tradeQuoteRequest = new ETX.clientAPI.requests.TradeQuoteRequest();\n *      tradeQuoteRequest.marketID = '12345';\n *      tradeQuoteRequest.quantity = 1;\n *      \n *      api.sendTradeQuoteRequest(tradeQuoteRequest)\n *          .done(function (api, tradeQuoteResponse) {\n *              // Trade quote response should have contain quoted bid price, quoted ask price and the quote timeout\n *              var quotedBid = tradeQuoteResponse[ETX.clientAPI.Constants.messages.TradeQuoteResponse.QuotedBid];\n *              var quotedAsk = tradeQuoteResponse[ETX.clientAPI.Constants.messages.TradeQuoteResponse.QuotedAsk];\n *              var quoteTimeout = tradeQuoteResponse[ETX.clientAPI.Constants.messages.TradeQuoteResponse.QuoteTimeout];\n *          })\n *          .fail(function (api, tradeQuoteResponse) {\n *              // Trade quote response should contain the failed trade quote request's order status and text describing the failure\n *              var quoteStatus = tradeQuoteResponse[ETX.clientAPI.Constants.messages.TradeQuoteResponse.QuoteStatus];\n *              var text = tradeQuoteResponse[ETX.clientAPI.Constants.messages.TradeQuoteResponse.Text];\n *          });\n */\n/**\n * @constructor\n * @param {String} marketID - Unique identifier of the market to request the quote for.\n * @param {String} quantity - Trade quote quantity.\n * @param {String} [side] - (Optional) Indicates a preference in direction of the trade quote to be placed, which should be a value defined in `ETX.clientAPI.requests.TradeQuoteRequest.sides`.\n * @returns {ETX.clientAPI.requests.TradeQuoteRequest}\n */\nETX.clientAPI.requests.TradeQuoteRequest = function (marketID, quantity, side) {\n\n    'use strict';\n\n    //-CONSTRUCTOR------------\n    //----PRIVATE-------------\n    var _tradeQuoteRequest = this;\n    //----END-PRIVATE---------  \n\n    //----PUBLIC--------------\n    /** \n     * Gets or sets the (client generated) transaction timestamp for a sent trade quote request.\n     * @property {Date} transactionTime\n     */\n    _tradeQuoteRequest.transactionTime = new Date().toISOString();\n    /** \n     * Gets or sets the (client generated) unique identifier for a sent trade quote request.\n     * @property {String} uniqueClientIdentifier\n     */\n    _tradeQuoteRequest.uniqueClientIdentifier = ETX.clientAPI.Messages.buildUniqueClientIdentifier(ETX.clientAPI.Constants.messages.TradeQuoteRequest.MessageType, _tradeQuoteRequest.transactionTime);\n    /** \n     * Gets or sets the unique identifier of the market to request the quote for.\n     * @property {String} marketID\n     */\n    _tradeQuoteRequest.marketID = marketID;\n    /** \n     * Gets or sets the trade quote quantity.\n     * @property {Number} quantity\n     */\n    _tradeQuoteRequest.quantity = quantity;\n    /** \n     * Gets or sets the (optional) indication of a preference in direction of the trade quote to be placed, which should be a value defined in `ETX.clientAPI.requests.TradeQuoteRequest.sides`.\n     * @property {String} side\n     */\n    _tradeQuoteRequest.side = side;\n    //----END-PUBLIC----------\n    \n    \n    return _tradeQuoteRequest;\n    //-END-CONSTRUCTOR--------\n\n\n    //----METHODS-------------\n    //----END-METHODS---------\n\n};\n\n\n//----STATIC--------------\n/** \n * Trade quote request sides:   \n * `{ BUY: 'b', SELL: 's' }`\n *\n * @enum {String} ETX.clientAPI.requests.TradeQuoteRequest.sides\n *\n * @member ETX.clientAPI.requests.TradeQuoteRequest\n * @static\n * @readonly\n */\nETX.clientAPI.requests.TradeQuoteRequest.sides = {\n    /** \n     * Buy action.\n     * @property {String} BUY\n     */\n    BUY: ETX.clientAPI.Constants.messages.TradeQuoteRequest.Side_Buy,\n    /** \n     * Sell action.\n     * @property {String} SELL\n     */\n    SELL: ETX.clientAPI.Constants.messages.TradeQuoteRequest.Side_Sell\n};\n//----END-STATIC----------\n\n/// <reference path=\"../../../_references.js\" />\n\nETX.namespace('clientAPI.requests');\n\n/**\n * @class ETX.clientAPI.requests.TradeRequest\n *\n * @requires ETX\n * @requires ETX.clientAPI.Constants\n * @requires ETX.clientAPI.Helpers\n * @requires ETX.logging.Logger\n *\n * Creates a new `ETX.clientAPI.requests.TradeRequest`, which can be used to create new trades.   \n *    \n * ###Example:\n *      var api = new ETX.clientAPI.ClientAPI({\n *          webSocketRootURL: 'ws://127.0.0.1:82',\n *          webAPIRootURL: 'http://127.0.0.1:81/',\n *          username: 'test_user',\n *          password: 'change_me',\n *          brokerID: '1'\n *      });\n *      \n *      var tradeRequest = new ETX.clientAPI.requests.TradeRequest();\n *      tradeRequest.marketID = '12345';\n *      tradeRequest.side = ETX.clientAPI.requests.TradeRequest.sides.BUY;\n *      tradeRequest.quantity = 1;\n *      tradeRequest.price = '';        // NOTE: Omit to use market live price (i.e. market order)\n *      \n *      api.sendTradeRequest(tradeRequest)\n *          .progress(function (api, executionReport) {\n *              // NOTE: There may be several intermediate execution reports (i.e. dealer claiming ticket, re-quoting the price etc.)\n *              // Execution report should contain the pending trade's order status\n *              var orderStatus = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus];\n *          })\n *          .done(function (api, executionReport) {\n *              // Execution report should contain the created trade's order status and text describing the details of the created trade\n *              var orderStatus = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus];\n *              var text = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.Text];\n *          })\n *          .fail(function onTradeRequestDone(api, executionReport) {\n *              // Execution report should contain the failed trade's order status and text describing the failure\n *              var orderStatus = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus];\n *              var text = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.Text];\n *          });\n */\n/**\n * @constructor\n * @param {String} marketID - Unique identifier of the market to place the trade on.\n * @param {String} side - Direction of the trade to be placed, which should be a value defined in `ETX.clientAPI.requests.TradeRequest.sides`.\n * @param {String} quantity - Trade quantity.\n * @param {String} [price] - (Optional) Price the trade should be placed at. NOTE: If a price is omitted, then a market order at the market's current live price will be placed.\n * @param {Object} [options] - (Optional) Allows certain optional settings to be initialised upon instantiation.\n */\nETX.clientAPI.requests.TradeRequest = function (marketID, side, quantity, price, options) {\n\n    'use strict';\n\n    //-CONSTRUCTOR------------\n    //----PRIVATE-------------\n    var _tradeRequest = this,\n        _options = options || {},\n        _helpers = ETX.clientAPI.Helpers;\n    //----END-PRIVATE---------  \n\n    //----PUBLIC--------------\n    /** \n     * Gets or sets the unique identifier of a trade to fully or partially close.\n     * @property {String} closingTradeID\n     */\n    _tradeRequest.closingTradeID = _options.closingTradeID;\n    /** \n     * Gets or sets the unique identifier of the market to place the trade on.\n     * @property {String} marketID\n     */\n    _tradeRequest.marketID = marketID;\n    /** \n     * Gets or sets the (optional) currency to use when placing the trade.   \n     *    \n     * **NOTE:** If not provided, then the account's default currency will be used.\n     * @property {String} currencyName\n     */\n    _tradeRequest.currencyName = _options.currencyName;\n    /** \n     * Gets or sets the (optional) unique identifier of the sub-account that will determine the currency to use when placing the trade.   \n     *    \n     * **NOTE:** If not provided, then the account's default currency will be used.\n     * @property {String} subAccountID\n     */\n    _tradeRequest.subAccountID = _options.subAccountID;\n    /** \n     * Gets or sets the direction of the trade to be placed, which should be a value defined in `ETX.clientAPI.requests.TradeRequest.sides`.\n     * @property {String} side\n     */\n    _tradeRequest.side = side;\n    /** \n     * Gets or sets the trade quantity.\n     * @property {Number} quantity\n     */\n    _tradeRequest.quantity = (+quantity);\n    /** \n     * Gets or sets the price the trade should be placed at.   \n     *    \n     * **NOTE:** If a price is omitted, then a market order will be placed (i.e. trade request at the market's current live price).\n     * @property {Number} price\n     */\n    _tradeRequest.price = (+price);\n    /** \n     * Indicates whether the trade request is for a market order (placed at the market's current live price).\n     * @method isMarketOrder\n     * @returns {Boolean} - If true, then a price has not been stated, else a price has been stated.\n     */\n    _tradeRequest.isMarketOrder = function () { return (+_tradeRequest.price || 0) <= 0; };\n    /** \n     * Gets or sets the unique identifier of a trade quote.\n     * @property {String} quoteID\n     */\n    _tradeRequest.quoteID = _options.quoteID;\n    /** \n     * Gets or sets the trade stop order level.\n     * @property {Number} stopOrderLevel\n     */\n    _tradeRequest.stopOrderLevel = (+_options.stopOrderLevel);\n    /** \n     * Gets or sets whether the trade stop order is guaranteed.\n     * @property {Boolean} stopOrderGuaranteedOn\n     */\n    _tradeRequest.stopOrderGuaranteedOn = _options.stopOrderGuaranteedOn;\n    /** \n     * Gets or sets whether the trade stop order is trailing.\n     * @property {Boolean} stopOrderTrailingOn\n     */\n    _tradeRequest.stopOrderTrailingOn = _options.stopOrderTrailingOn;\n    /** \n     * Gets or sets the trade's stop order trailing increment size.\n     * @property {Number} stopOrderTrailingIncrementSize\n     */\n    _tradeRequest.stopOrderTrailingIncrementSize = (+_options.stopOrderTrailingIncrementSize);\n    /** \n     * Gets or sets the trade limit order level.\n     * @property {Number} limitOrderLevel\n     */\n    _tradeRequest.limitOrderLevel = (+_options.limitOrderLevel);\n    /** \n     * Gets or sets whether the trade's stop and/or limit order(s) should send SMS alerts.\n     * @property {Boolean} smsAlertOn\n     */\n    _tradeRequest.smsAlertOn = _helpers.convert.toBoolean(_options.smsAlertOn);\n    /** \n     * Gets or sets whether the trade's stop and/or limit order(s) should send email alerts.\n     * @property {Boolean} emailAlertOn\n     */\n    _tradeRequest.emailAlertOn = _helpers.convert.toBoolean(_options.emailAlertOn);\n    /** \n     * Gets or sets the SMS and/or Email alert message to use if the trade's stop or limit order executes.\n     * @property {String} alertMessage\n     */\n    _tradeRequest.alertMessage = _options.alertMessage;\n\n    /** \n     * Gets or sets the (client generated) unique identifier for a sent trade request.\n     * @property {String} uniqueClientIdentifier\n     */\n    _tradeRequest.uniqueClientIdentifier = _options.uniqueClientIdentifier;\n    /** \n     * Gets or sets the (client generated) transaction timestamp for a sent trade request.\n     * @property {Date} transactionTime\n     */\n    _tradeRequest.transactionTime = _options.transactionTime;\n    //----END-PUBLIC----------\n    \n    \n    return _tradeRequest;\n    //-END-CONSTRUCTOR--------\n\n\n    //----METHODS-------------\n    //----END-METHODS---------\n\n};\n\n//----STATIC--------------\n/** \n * Trade request sides:   \n * `{ BUY: 'b', SELL: 's' }`\n *\n * @enum {String} ETX.clientAPI.requests.TradeRequest.sides\n *\n * @member ETX.clientAPI.requests.TradeRequest\n * @static\n * @readonly\n */\nETX.clientAPI.requests.TradeRequest.sides = {\n    /** \n     * Buy action.\n     * @property {String} BUY\n     */\n    BUY: ETX.clientAPI.Constants.messages.TradeRequest.Side_Buy,\n    /** \n     * Sell action.\n     * @property {String} SELL\n     */\n    SELL: ETX.clientAPI.Constants.messages.TradeRequest.Side_Sell\n};\n//----END-STATIC----------\n</script><script type=\"text/javascript\">            // create the ClientAPI object passing in connection details \n            var api = new ETX.clientAPI.ClientAPI({\n                tryWebSocket: false,\n                webSocketRootURL: \"wss://widget.etxcapital.com:843\", // UAT\n                webAPIRootURL: \"https://widget.etxcapital.com:443/\", // UAT  \n                chartDataURL: 'https://trade.etxcapital.com/common/frontend/member/httpdata/getJSChartWidgetData.aspx'\n            });\n\n            // add listeners to API\n            api.registerForLogOnLogOff(function (api, loggedon, tags) {\n                if (window.console) {\n                    console.log(\"ClientAPI v\" + api.version + \" - loggedOn: \" + loggedon);\n                }\n\n                // once we are logged on subscribe to a single market (EURGBP Rolling Daily)\n                if (loggedon) {\n                    /* var marketList = ['150864', '150852']; */\n                    //tab 1 - POPULAR\n                    api.subscribeToMarkets('150853', onMarketUpdate1); //EURUSD\n                    api.subscribeToMarkets('150852', onMarketUpdate2); //GBPUSD\n                    api.subscribeToMarkets('154229', onMarketUpdate3); //UK100\n                    api.subscribeToMarkets('154228', onMarketUpdate4); //Wall Street\n                    api.subscribeToMarkets('154256', onMarketUpdate5); //Germany 30\n                    api.subscribeToMarkets('375182', onMarketUpdate6); //Brent Future\n                     } else {\n                    $('#market-name1').html(\"Disconnected from ClientAPI\");\n                    $('#bid-price1').html(\"\");\n                    $('#ask-price1').html(\"\");\n                }\n            });\n            api.registerForErrors(function (api, errorMessage, errorData) {\n                if (window.console) {\n                    console.log(\"ClientAPI ERROR: \" + errorMessage);\n                }\n\n                $('#market-name1').html(\"ClientAPI ERROR: \" + errorMessage);\n                $('#bid-price1').html(\"\");\n                $('#ask-price1').html(\"\");\n            });\n\n            // connect to API anonymously (passing in anonymous token string 'widgets')\n            $('#market-name1').html(\"Connecting to ClientAPI...\");\n            api.logOnAnonymously('widgets');\n\n\n            // market update callback handler\n            function onMarketUpdate1(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name1').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price1').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price1').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change1').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor1').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change1').addClass('changeprice-up') : $('#change1').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor1').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price1').removeClass('price-unchanged price-up price-down').addClass('price-up') : $('#bid-price1').removeClass('price-unchanged price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor1').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price1').removeClass('price-unchanged price-up price-down').addClass('price-up') : $('#ask-price1').removeClass('price-unchanged price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate2(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name2').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price2').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price2').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change2').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor2').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change2').addClass('changeprice-up') : $('#change2').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor2').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price2').removeClass('price-up price-down').addClass('price-up') : $('#bid-price2').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor2').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price2').removeClass('price-up price-down').addClass('price-up') : $('#ask-price2').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate3(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                // all market update messages should have a market ID\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name3').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price3').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price3').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change3').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor3').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change3').addClass('changeprice-up') : $('#change3').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction3').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor3').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price3').removeClass('price-up price-down').addClass('price-up') : $('#bid-price3').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor3').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price3').removeClass('price-up price-down').addClass('price-up') : $('#ask-price3').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate4(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name4').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price4').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price4').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change4').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor4').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change4').addClass('changeprice-up') : $('#change4').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction4').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor4').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price4').removeClass('price-up price-down').addClass('price-up') : $('#bid-price4').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor4').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price4').removeClass('price-up price-down').addClass('price-up') : $('#ask-price4').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate5(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name5').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price5').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price5').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change5').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor5').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change5').addClass('changeprice-up') : $('#change5').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction5').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor5').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price5').removeClass('price-up price-down').addClass('price-up') : $('#bid-price5').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor5').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price5').removeClass('price-up price-down').addClass('price-up') : $('#ask-price5').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate6(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name6').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price6').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price6').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change6').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor6').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change6').addClass('changeprice-up') : $('#change6').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction6').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor6').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price6').removeClass('price-up price-down').addClass('price-up') : $('#bid-price6').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor6').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price6').removeClass('price-up price-down').addClass('price-up') : $('#ask-price6').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate7(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name7').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price7').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price7').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change7').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor7').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change7').addClass('changeprice-up') : $('#change7').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction7').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor7').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price7').removeClass('price-up price-down').addClass('price-up') : $('#bid-price7').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor7').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price7').removeClass('price-up price-down').addClass('price-up') : $('#ask-price7').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate8(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name8').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price8').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price8').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change8').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor8').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change8').addClass('changeprice-up') : $('#change8').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction8').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor8').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price8').removeClass('price-up price-down').addClass('price-up') : $('#bid-price8').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor8').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price8').removeClass('price-up price-down').addClass('price-up') : $('#ask-price8').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate9(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name9').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price9').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price9').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change9').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor9').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change9').addClass('changeprice-up') : $('#change9').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction9').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor9').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price9').removeClass('price-up price-down').addClass('price-up') : $('#bid-price9').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor9').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price9').removeClass('price-up price-down').addClass('price-up') : $('#ask-price9').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate10(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name10').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price10').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price10').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change10').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor10').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change10').addClass('changeprice-up') : $('#change10').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction10').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor10').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price10').removeClass('price-up price-down').addClass('price-up') : $('#bid-price10').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor10').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price10').removeClass('price-up price-down').addClass('price-up') : $('#ask-price10').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate11(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name11').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price11').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price11').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change11').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor11').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change11').addClass('changeprice-up') : $('#change11').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction11').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor11').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price11').removeClass('price-up price-down').addClass('price-up') : $('#bid-price11').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor11').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price11').removeClass('price-up price-down').addClass('price-up') : $('#ask-price11').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate12(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name12').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price12').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price12').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change12').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor12').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change12').addClass('changeprice-up') : $('#change12').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction12').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor12').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price12').removeClass('price-up price-down').addClass('price-up') : $('#bid-price12').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor12').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price12').removeClass('price-up price-down').addClass('price-up') : $('#ask-price12').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate13(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name13').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price13').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price13').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change13').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor13').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change13').addClass('changeprice-up') : $('#change13').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction13').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor13').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price13').removeClass('price-up price-down').addClass('price-up') : $('#bid-price13').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor13').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price13').removeClass('price-up price-down').addClass('price-up') : $('#ask-price13').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate14(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name14').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price14').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price14').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change14').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor14').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change14').addClass('changeprice-up') : $('#change14').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction14').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor14').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price14').removeClass('price-up price-down').addClass('price-up') : $('#bid-price14').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor14').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price14').removeClass('price-up price-down').addClass('price-up') : $('#ask-price14').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate15(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name15').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price15').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price15').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change15').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor15').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change15').addClass('changeprice-up') : $('#change15').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction15').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor15').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price15').removeClass('price-up price-down').addClass('price-up') : $('#bid-price15').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor15').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price15').removeClass('price-up price-down').addClass('price-up') : $('#ask-price15').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate16(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name16').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price16').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price16').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change16').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor16').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change16').addClass('changeprice-up') : $('#change16').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction16').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor16').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price16').removeClass('price-up price-down').addClass('price-up') : $('#bid-price16').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor16').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price16').removeClass('price-up price-down').addClass('price-up') : $('#ask-price16').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate17(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name17').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price17').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price17').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change17').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor17').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change17').addClass('changeprice-up') : $('#change17').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction17').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor17').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price17').removeClass('price-up price-down').addClass('price-up') : $('#bid-price17').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor17').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price17').removeClass('price-up price-down').addClass('price-up') : $('#ask-price17').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate18(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name18').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price18').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price18').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change18').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor18').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change18').addClass('changeprice-up') : $('#change18').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction18').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor18').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price18').removeClass('price-up price-down').addClass('price-up') : $('#bid-price18').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor18').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price18').removeClass('price-up price-down').addClass('price-up') : $('#ask-price18').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate19(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name19').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price19').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price19').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change19').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor19').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change19').addClass('changeprice-up') : $('#change19').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction19').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor19').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price19').removeClass('price-up price-down').addClass('price-up') : $('#bid-price19').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor19').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price19').removeClass('price-up price-down').addClass('price-up') : $('#ask-price19').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate20(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name20').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price20').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price20').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change20').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor20').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change20').addClass('changeprice-up') : $('#change20').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction20').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor20').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price20').removeClass('price-up price-down').addClass('price-up') : $('#bid-price20').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor20').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price20').removeClass('price-up price-down').addClass('price-up') : $('#ask-price20').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate21(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name21').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price21').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price21').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change21').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor21').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change21').addClass('changeprice-up') : $('#change21').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction21').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor21').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price21').removeClass('price-up price-down').addClass('price-up') : $('#bid-price21').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor21').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price21').removeClass('price-up price-down').addClass('price-up') : $('#ask-price21').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate22(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name22').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price22').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price22').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change22').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor22').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change22').addClass('changeprice-up') : $('#change22').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction22').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor22').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price22').removeClass('price-up price-down').addClass('price-up') : $('#bid-price22').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor22').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price22').removeClass('price-up price-down').addClass('price-up') : $('#ask-price22').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate23(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name23').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price23').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price23').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change23').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor23').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change23').addClass('changeprice-up') : $('#change23').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction23').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor23').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price23').removeClass('price-up price-down').addClass('price-up') : $('#bid-price23').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor23').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price23').removeClass('price-up price-down').addClass('price-up') : $('#ask-price23').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate24(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name24').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price24').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price24').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change24').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor24').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change24').addClass('changeprice-up') : $('#change24').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction24').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor24').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price24').removeClass('price-up price-down').addClass('price-up') : $('#bid-price24').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor24').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price24').removeClass('price-up price-down').addClass('price-up') : $('#ask-price24').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate25(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name25').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price25').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price25').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change25').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor25').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change25').addClass('changeprice-up') : $('#change25').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction25').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor25').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price25').removeClass('price-up price-down').addClass('price-up') : $('#bid-price25').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor25').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price25').removeClass('price-up price-down').addClass('price-up') : $('#ask-price25').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate26(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name26').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price26').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price26').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change26').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor26').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change26').addClass('changeprice-up') : $('#change26').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction26').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor26').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price26').removeClass('price-up price-down').addClass('price-up') : $('#bid-price26').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor26').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price26').removeClass('price-up price-down').addClass('price-up') : $('#ask-price26').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate27(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name27').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price27').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price27').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change27').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor27').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change27').addClass('changeprice-up') : $('#change27').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction27').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor27').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price27').removeClass('price-up price-down').addClass('price-up') : $('#bid-price27').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor27').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price27').removeClass('price-up price-down').addClass('price-up') : $('#ask-price27').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate28(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name28').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price28').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price28').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change28').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor28').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change28').addClass('changeprice-up') : $('#change28').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction28').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor28').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price28').removeClass('price-up price-down').addClass('price-up') : $('#bid-price28').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor28').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price28').removeClass('price-up price-down').addClass('price-up') : $('#ask-price28').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate29(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name29').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price29').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price29').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change29').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor29').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change29').addClass('changeprice-up') : $('#change29').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction29').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor29').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price29').removeClass('price-up price-down').addClass('price-up') : $('#bid-price29').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor29').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price29').removeClass('price-up price-down').addClass('price-up') : $('#ask-price29').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate30(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name30').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price30').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price30').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change30').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor30').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change30').addClass('changeprice-up') : $('#change30').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction30').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor30').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price30').removeClass('price-up price-down').addClass('price-up') : $('#bid-price30').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor30').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price30').removeClass('price-up price-down').addClass('price-up') : $('#ask-price30').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n</script><div class=\"sf_cols\">\n    <div class=\"sf_colsOut sf_1col_1_100\">\n        <div id=\"headerPlaceholder_TA1D12251054_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sfContentBlock\"><div class=\"visible-desktop\" style=\"float: left;\"><a href=\"https://www.etxcapital.co.uk/home\" class=\"logo\"><img src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/logo.png?sfvrsn=4\" alt=\"logo\" title=\"logo\"></a></div>\n<div class=\"visible-tablet\" style=\"float: left;\"><a href=\"https://www.etxcapital.co.uk/home\" class=\"logo\" style=\"margin-left:5px;\"><img src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/logo.png?sfvrsn=4\" alt=\"logo\" title=\"logo\"></a></div>\n<div class=\"visible-desktop underlinelinks\">\n<span style=\"float: right; margin: 14px 50px 0px 0px; font-size: 13px; color: rgb(255, 255, 255);\"><a target=\"_self\" class=\"\" title=\"\" href=\"/about-us/legal/client-money-protection\" style=\"color:#FFFFFF; margin: 0 15px; font-weight: 500;\">FCA Regulation</a> | <a href=\"https://www.etxcapital.co.uk/support\" style=\"color:#FFFFFF; margin: 0 15px; font-weight: 500;\">FAQ</a> | <a href=\"https://www.etxcapital.co.uk/contact-us\" style=\"color:#FFFFFF; margin: 0 15px; font-weight: 500;\">Contact Us</a> <a href=\"/account/sign-in\" target=\"_self\" style=\"color:#baa96f; font-weight:bold; text-decoration:none;\"><span style=\"margin: 5px 0px 0px 15px; padding: 10px 26px; background-color: rgb(255, 255, 255);\">LOGIN</span></a>&nbsp; <span style=\"font-style: italic;\"> </span> &nbsp;&nbsp;<a href=\"/account/sign-up/?v=3&amp;Platform=TraderPro\" target=\"_self\" style=\"color:#FFFFFF; font-weight:bold; text-decoration:none;\"><span style=\"margin: 5px 0px 0px; padding: 10px 26px; background-color: rgb(0, 0, 0);\">CREATE ACCOUNT</span></a></span></div>\n<div class=\"visible-tablet underlinelinks\">\n<span style=\"float: right; margin: 14px 9px 0px 0px; font-size: 13px; color: rgb(255, 255, 255);\"><a target=\"_self\" class=\"\" title=\"\" href=\"/about-us/legal/client-money-protection\" style=\"color:#FFFFFF; margin: 0 10px; font-weight: 500;\">FCA Regulation</a> | <a href=\"https://www.etxcapital.co.uk/support\" style=\"color:#FFFFFF; margin: 0 10px; font-weight: 500;\">FAQ</a> | <a href=\"https://www.etxcapital.co.uk/contact-us\" style=\"color:#FFFFFF; margin: 0 10px; font-weight: 500;\">Contact Us</a> <a href=\"/account/sign-in\" target=\"_self\" style=\"color:#baa96f; font-weight:bold; text-decoration:none;\"><span style=\"margin: 5px 0px 0px 15px; padding: 10px 26px; background-color: rgb(255, 255, 255);\">LOGIN</span></a>&nbsp; <span style=\"font-style: italic;\"> </span> &nbsp;&nbsp;<a href=\"/account/sign-up/?v=3&amp;Platform=TraderPro\" target=\"_self\" style=\"color:#FFFFFF; font-weight:bold; text-decoration:none;\"><span style=\"margin: 5px 0px 0px; padding: 10px 26px; background-color: rgb(0, 0, 0);\">CREATE ACCOUNT</span></a>\n</span></div>\n<div class=\"visible-smartphone\" style=\"float: right; margin: 0px 140px 0px 0px;\"><a href=\"https://www.etxcapital.co.uk/home\" class=\"logo\" style=\"margin-left:5px;\"><img src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/logo.png?sfvrsn=4\" alt=\"logo\" title=\"logo\"></a></div>\n\n\n</div>\n            \n        </div>\n    </div>\n</div><script type=\"text/javascript\">/// <reference path=\"../_references.js\" />\n\n/**\n * @ignore @license\n * \n * Client API JavaScript library (version 1.1.4)   \n * \n * Copyright:   \n * ETX Capital (c) 2015. All rights reserved.   \n * The copyright and intellectual property rights in this work vest in ETX Capital (The company).  The information \n * contained herein is the property of The Company and is supplied without any liability for error or omission. No \n * part may be reproduced, disclosed, or used without written permission.  The copyright and the restrictions on \n * reproduction and use are extended to all media in which the information may be embodied.   \n * \n *\n */\n\n/**\n * @class ETX \n *\n * `ETX` singleton contains high level configuration and functionality for the `ETX` modules.\n *\n * @static\n * @singleton\n * @readonly\n *\n */\nvar ETX = ETX || {};\n(function () {\n\n    'use strict';\n\n    /** \n     * Gets the (read only) section for global configurations.\n     * @property {Object} config\n     * @static\n     * @readonly\n     */\n    ETX.config = ETX.config || {};\n    /**\n     * Gets or sets whether debug mode is enabled. \n     * @property {Boolean} debug\n     * @member ETX.config\n     * @static\n     */\n    ETX.config.debug = false;\n    /**\n     * Gets or sets the default broker unique identifier to use if one is not provided. \n     * @property {Number} defaultBrokerID\n     * @member ETX.config\n     * @static\n     */\n    ETX.config.defaultBrokerID = '1';\n\n\n    if (ETX.hasOwnProperty('extend') === false) {\n        /**\n         * Extends a derived class with the functionality of a base class. \n         * \n         * @method extend\n         * @param {Function} subClass - Derived class constructor.\n         * @param {Function} baseClass - Base class constructor.\n         * @returns {void}\n         * \n         * @static\n         */\n        ETX.extend = function (subClass, baseClass) {\n            function inheritance() { }\n            inheritance.prototype = baseClass.prototype;\n            subClass.prototype = new inheritance();\n            subClass.prototype.constructor = subClass;\n            subClass.baseConstructor = baseClass;\n            subClass.superClass = baseClass.prototype;\n        };\n    }\n\n    if (ETX.hasOwnProperty('namespace') === false) {\n        /**\n         * Ensures the creation of a namespace. \n         * \n         * @method namespace\n         * @param {...String} namespaceSegment - One or more (segment) names used to build the namespace objects.\n         * @returns {void}\n         * \n         * @static\n         */\n        ETX.namespace = function () {\n            var a = arguments, o, i = 0, j, d, arg;\n            for (; i < a.length; i++) {\n                o = this; // Reset base object per argument or it will get reused from the last\n                arg = a[i];\n                if (arg.indexOf(\".\") > -1) { //Skip this if no \".\" is present\n                    d = arg.split(\".\");\n                    for (j = 0; j < d.length; j++) {\n                        o[d[j]] = o[d[j]] || {};\n                        o = o[d[j]];\n                    }\n                } else {\n                    o[arg] = o[arg] || {};\n                    o = o[arg]; // Reset base object to the new object so it's returned\n                }\n            }\n            return o;\n        };\n    }\n\n})();\n\n/// <reference path=\"../../_references.js\" />\n\nETX.namespace('logging');\n\n/**\n * @class ETX.logging.Logger\n *\n * @requires ETX\n *\n * Creates a new `ETX.logging.Logger`, which contains functionality to log messages (to the console by default) based on log levels.   \n *\n * ###Example:\n *      var logger = new ETX.logging.Logger({\n *          isEnabled: true,\n *          logLevel: ETX.logging.Logger.logLevels.INFO,\n *          prefixTimestamp: false,\n *          onLog: function fnToOverrideLogImpl(logLevel, message, source, optionalParams) { }\n *      });\n *      logger.fatal('A fatal msg', 'SRC_F');        // Prints 'FATAL | SRC_F | A fatal msg'\n *      logger.error('An error msg', 'SRC_E');       // Prints 'ERROR | SRC_E | An error msg'\n *      logger.warning('A warning msg', 'SRC_W');    // Prints 'WARNING | SRC_W | A warning msg'\n *      logger.info('An info msg', 'SRC_I');         // Prints 'INFO | SRC_I | An info msg'\n *      logger.debug('A debug msg', 'SRC_D');        // Does NOT print - DEBUG has lower priority over INFO...\n *      logger.versbose('A versbose msg', 'SRC_V');  // Does NOT print - VERBOSE has lower priority over INFO...\n */\n/**\n * @constructor\n * @param {Object} [options] - (Optional) Allows certain optional settings to be initialised upon instantiation.\n * @param {Boolean} [options.isEnabled=true] - (Optional) If true, message logging is enabled, otherwise it will disabled.\n * @param {String} [options.logLevel=ETX.logging.Logger.logLevels.INFO] - (Optional) Sets the current log level value defined in `ETX.logging.Logger.logLevels`.\n * @param {Boolean} [options.prefixTimestamp=false] - (Optional) If true, prefixes the current timestamp to all messages logged.\n * @param {Function} [options.onLog] - (Optional) Automatically registers a log override callback handler, used to re-define the logging implementaton.\n * @returns {ETX.logging.Logger}\n */\nETX.logging.Logger = function (options) {\n\n    'use strict';\n\n    //-CONSTRUCTOR-------------\n    //----PRIVATE--------------\n    var _logger = this,\n        _options = options || {},\n        _onLog = _options.onLog,\n        _onLogLevelText = _options.onLogLevelText,\n        _treatAsIE8 = false;\n    //----END-PRIVATE---------\n\n    //----PUBLIC--------------\n    _logger.debug = debug;\n    _logger.info = info;\n    /** \n     * Gets and set whether message logging is enabled.\n     * @property {Boolean} isEnabled\n     */\n    _logger.isEnabled = (_options.isEnabled === false ? false : true);\n    _logger.error = error;\n    _logger.fatal = fatal;\n    _logger.log = log;\n    /** \n     * Gets and set the current log level value defined in `ETX.logging.Logger.logLevels`.\n     * @property {Number} logLevel\n     */\n    _logger.logLevel = (_options.logLevel !== undefined ? _options.logLevel : (ETX.logging.Logger.logLevels.INFO || 0));\n    /** \n     * Gets and set whether to prefix the current timestamp to all messages logged.\n     * @property {Boolean} prefixTimestamp\n     */\n    _logger.prefixTimestamp = (_options.prefixTimestamp == true ? true : false);\n    _logger.verbose = verbose;\n    _logger.warning = warning;\n    //----END-PUBLIC----------\n\n\n    ////see http://patik.com/blog/complete-cross-browser-console-log/\n    //// Tell IE9 to use its built-in console\n    //if (Function.prototype.bind && (typeof console === 'object' || typeof console === 'function') && typeof console.log == 'object') {\n    //    try {\n    //        ['log', 'info', 'warn', 'error', 'assert', 'dir', 'clear', 'profile', 'profileEnd']\n    //            .forEach(function (method) {\n    //                console[method] = this.call(console[method], console);\n    //            }, Function.prototype.bind);\n    //    } catch (ex) {\n    //        _treatAsIE8 = true;\n    //    }\n    //}\n\n\n    return _logger;\n    //-END-CONSTRUCTOR--------\n\n\n    //-METHODS----------------\n    function consoleLog(message, optionalParams, logLevel) {\n        try {\n            if (console) {\n                switch (+logLevel) {\n                    case ETX.logging.Logger.logLevels.ERROR:\n                    case ETX.logging.Logger.logLevels.FATAL:\n                        if (console.error) {\n                            if (optionalParams === undefined) {\n                                console.error(message);\n                            } else {\n                                console.error(message, optionalParams);\n                            }\n                        }\n                        return;\n\n                    case ETX.logging.Logger.logLevels.WARNING:\n                        if (console.warn) {\n                            if (optionalParams === undefined) {\n                                console.warn(message);\n                            } else {\n                                console.warn(message, optionalParams);\n                            }\n                        }\n                        return;\n                }\n                if (console.log) {\n                    if (optionalParams === undefined) {\n                        console.log(message);\n                    } else {\n                        console.log(message, optionalParams);\n                    }\n                }\n            }\n        } catch (ignore) {\n            //try {\n            //    // Modern browsers\n            //    if (typeof console != 'undefined' && typeof console.log == 'function') {\n            //        // Opera 11\n            //        if (window.opera) {\n            //            var i = 0;\n            //            while (i < arguments.length) {\n            //                console.log('Item ' + (i + 1) + ': ' + arguments[i]);\n            //                i++;\n            //            }\n            //        }\n            //            // All other modern browsers\n            //        else if ((slice.call(arguments)).length == 1 && typeof slice.call(arguments)[0] == 'string') {\n            //            console.log((slice.call(arguments)).toString());\n            //        } else {\n            //            console.log.apply(console, slice.call(arguments));\n            //        }\n            //    }\n            //        // IE8\n            //    else if ((!Function.prototype.bind || _treatAsIE8) && typeof console != 'undefined' && typeof console.log == 'object') {\n            //        Function.prototype.call.call(console.log, console, slice.call(arguments));\n            //    }\n\n            //    // IE7 and lower, and other old browsers\n            //} catch (ignore) { }\n        }\n    }\n\n    /**\n     * Attempts to log the message details provided at a DEBUG priority log level, which may be not occur depending \n     * upon the current `logLevel`.\n     *\n     * @method debug\n     * @param {String} message - Message to log.\n     * @param {String} [source] - (Optional) Source of the message.\n     * @param {Object|Array} [optionalParams] - (Optional) Additional data to accompany the message (if supported).\n     * @returns {void}\n     */\n    function debug(message, source, optionalParams) {\n        log(ETX.logging.Logger.logLevels.DEBUG, message, source, optionalParams);\n    }\n\n    /**\n     * Attempts to log the message details provided at a ERROR priority log level, which may be not occur depending \n     * upon the current `logLevel`.\n     *\n     * @method error\n     * @param {String} message - Message to log.\n     * @param {String} [source] - (Optional) Source of the message.\n     * @param {Object|Array} [optionalParams] - (Optional) Optional additional data to accompany the message (if supported).\n     * @returns {void}\n     */\n    function error(message, source, optionalParams) {\n        log(ETX.logging.Logger.logLevels.ERROR, message, source, optionalParams);\n    }\n\n    /**\n     * Attempts to log the message details provided at a FATAL priority log level, which may be not occur depending \n     * upon the current `logLevel`.\n     *\n     * @method fatal\n     * @param {String} message - Message to log.\n     * @param {String} [source] - (Optional) Source of the message.\n     * @param {Object|Array} [optionalParams] - (Optional) Optional additional data to accompany the message (if supported).\n     * @returns {void}\n     */\n    function fatal(message, source, optionalParams) {\n        log(ETX.logging.Logger.logLevels.FATAL, message, source, optionalParams);\n    }\n\n    /**\n     * Attempts to log the message details provided at a INFO priority log level, which may be not occur depending \n     * upon the current `logLevel`.\n     *\n     * @method info\n     * @param {String} message - Message to log.\n     * @param {String} [source] - (Optional) Source of the message.\n     * @param {Object|Array} [optionalParams] - (Optional) Optional additional data to accompany the message (if supported).\n     * @returns {void}\n     */\n    function info(message, source, optionalParams) {\n        log(ETX.logging.Logger.logLevels.INFO, message, source, optionalParams);\n    }\n\n    /**\n     * Attempts to log the message details provided at a log level specified, which may be not occur depending \n     * upon the current `logLevel`.\n     *\n     * @method log\n     * @param {Number} logLevel - Log level value defined in `ETX.logging.Logger.logLevels`.\n     * @param {String} message - Message to log.\n     * @param {String} [source] - (Optional) Source of the message.\n     * @param {Object|Array} [optionalParams] - (Optional) Optional additional data to accompany the message (if supported).\n     * @returns {void}\n     */\n    function log(logLevel, message, source, optionalParams) {\n        // Only log messages when enabled...\n        if (_logger.isEnabled !== true) {\n            return;\n        }\n\n        // Only log messages with a lower logLevel (i.e. higher priority)...\n        if ((+_logger.logLevel) < (+logLevel)) {\n            return;\n        }\n\n        // If it's NOT debug mode, then only log messages with a logLevel of INFO (0) or lower (i.e. very high priority)...\n        if (ETX.config.debug !== true) {\n            if ((+ETX.logging.Logger.logLevels.INFO) < (+logLevel)) {\n                return;\n            }\n        }\n\n        if (_onLog) {\n            // Allow logging the message to be overridden...\n            _onLog(logLevel, message, source, optionalParams);\n        } else {\n            // Else log to the console by default...\n            var logText = message;\n\n            if (source) {\n                // Include the source...\n                logText = source + ' | ' + logText;\n            }\n\n            // Include the logLevel text...\n            logText = (ETX.logging.Logger.getLogLevelText(logLevel) || logLevel) + ' | ' + logText;\n\n            if (_logger.prefixTimestamp) {\n                // Include the current timestamp...\n                //logText = new Date().toISOString() + ' | ' + logText;\n                var now = new Date();\n                logText = now.toDateString() + ' ' + now.toLocaleTimeString() + ' | ' + logText;\n            }\n\n            // Print to console => '<YYYY-MM-DDTHH:mm:ss.sssZ> | <LOGLEVEL> | <SOURCE> | <MESSAGE>'...\n            consoleLog(logText, optionalParams, logLevel);\n        }\n    }\n\n    /**\n     * Attempts to log the message details provided at a VERBOSE priority log level, which may be not occur depending \n     * upon the current `logLevel`.\n     *\n     * @method verbose\n     * @param {String} message - Message to log.\n     * @param {String} [source] - (Optional) Source of the message.\n     * @param {Object|Array} [optionalParams] - (Optional) Optional additional data to accompany the message (if supported).\n     * @returns {void}\n     */\n    function verbose(message, source, optionalParams) {\n        log(ETX.logging.Logger.logLevels.VERBOSE, message, source, optionalParams);\n    }\n\n    /**\n     * Attempts to log the message details provided at a WARNING priority log level, which may be not occur depending \n     * upon the current `logLevel`.\n     *\n     * @method warning\n     * @param {String} message - Message to log.\n     * @param {String} [source] - (Optional) Source of the message.\n     * @param {Object|Array} [optionalParams] - (Optional) Optional additional data to accompany the message (if supported).\n     * @returns {void}\n     */\n    function warning(message, source, optionalParams) {\n        log(ETX.logging.Logger.logLevels.WARNING, message, source, optionalParams);\n    }\n    //----END-METHODS---------\n\n};\n\n\n//----STATIC--------------\n/** \n * Filter out log attempts based on log level priorities:   \n * `{ FATAL: -3, ERROR: -2, WARNING: -1, INFO: 0, DEBUG: 1, VERBOSE: 2 }`\n *\n * @enum {Number} ETX.logging.Logger.logLevels\n * \n * @member ETX.logging.Logger\n * @static\n * @readonly\n */\nETX.logging.Logger.logLevels = {\n    /** \n     * (-3) Highest priority level of logging, used to highlight unrecoverable errors.\n     * @property {Number} FATAL\n     */\n    FATAL: -3,\n    /** \n     * (-2) Very high priority level of logging, used to highlight errors.\n     * @property {Number} ERROR\n     */\n    ERROR: -2,\n    /** \n     * (-1) High priority level of logging, used to highlight warnings.\n     * @property {Number} WARNING\n     */\n    WARNING: -1,\n    /** \n     * (0) The default level of logging, used to highlight useful general information.\n     * @property {Number} INFO\n     */\n    INFO: 0,\n    /** \n     * (1) Low priority level of logging, used to by developers to highlight traceable debug information.\n     * @property {Number} DEBUG\n     */\n    DEBUG: 1,\n    /** \n     * (2) Lowest priority level of logging, used to by developers to highlight very detailed traceable debug information. \n     * @property {Number} VERBOSE\n     */\n    VERBOSE: 2\n};\n\n/** \n * Returns the user friendly display text for a log level value defined in `ETX.logging.Logger.logLevels`.\n *\n * @method getLogLevelText\n * @param {Number} logLevel - Log level value defined in `ETX.logging.Logger.logLevels`.\n * @returns {String} - User friendly display text for log level.\n * \n * @member ETX.logging.Logger\n * @static\n */\nETX.logging.Logger.getLogLevelText = function (logLevel) {\n    // Return a text representation of the log level provided...\n    switch (+logLevel) {\n        case ETX.logging.Logger.logLevels.DEBUG: { return 'DEBUG'; }\n        case ETX.logging.Logger.logLevels.ERROR: { return 'ERROR'; }\n        case ETX.logging.Logger.logLevels.FATAL: { return 'FATAL'; }\n        case ETX.logging.Logger.logLevels.INFO: { return 'INFO'; }\n        case ETX.logging.Logger.logLevels.VERBOSE: { return 'VERBOSE'; }\n        case ETX.logging.Logger.logLevels.WARNING: { return 'WARNING'; }\n        default: { return ''; }\n    }\n}\n//----END-STATIC----------\n\n/// <reference path=\"../../_references.js\" />\n/// <reference path=\"../../../../lib/_references.js\" />\n\nETX.namespace('clientAPI');\n\n/**\n * @class ETX.clientAPI.ClientAPI\n *\n * @requires ETX\n * @requires ETX.clientAPI.Constants\n * @requires ETX.clientAPI.Helpers\n * @requires ETX.clientAPI.Messages\n * @requires ETX.clientAPI.SessionFactory\n * @requires ETX.clientAPI.TransportFactory\n * @requires ETX.logging.Logger\n * @requires jQuery\n *\n * Creates a new `ETX.clientAPI.ClientAPI`, which contains all the API functionality to interface with an iTrade Client API server.   \n *    \n * **NOTE:** Requires the following third-party JavaScript libraries:   \n *\n *  +  [jQuery](http://api.jquery.com/)\n *   \n * ###Example:\n *      // Create a new ETX.clientAPI.ClientAPI instance, setting options (inline) during construction...\n *      // NOTE: As the log on credentials have been provided, an automatic log on will be attempted...\n *      var api = new ETX.clientAPI.ClientAPI({\n *          webSocketRootURL: 'ws://127.0.0.1:82',\n *          webAPIRootURL: 'http://127.0.0.1:81/',\n *          tryWebSocket: true,\n *          username: 'test_user',\n *          password: 'change_me',\n *          brokerID: '1',\n *          anonymityToken: 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855',\n *          onError: function autoRegisteredErrorsCallback(api, errorMessage, errorData) { },\n *          onLogOff: function autoRegisteredLogOffCallback(api, logOffResponse) { },\n *          onLogOn: function autoRegisteredLogOnCallback(api, logOnResponse) { },\n *          onLogOnLogOff: function autoRegisteredLogOnLogOffCallback(api, success, logOnLogOffResponse) { },\n *          onQoS: function autoRegisteredQoSCallback(api, ttl) { },\n *          logger: new ETX.logging.Logger({\n *              logLevel: ETX.logging.Logger.logLevels.DEBUG\n *          })\n *      });\n *      // Now use it...\n */\n/**\n * @constructor\n * @param {Object} [options] - (Optional) Allows certain optional settings to be initialised upon instantiation.\n * @param {String} [options.webSocketRootURL] - (Optional) Sets the URL the Client API server is using to listen to web socket requests (e.g. 'ws://127.0.0.1:82').\n * @param {Boolean} [options.tryWebSocket=true] - (Optional) If true, will attempt to communicate with the Client API server using web socket requests, otherwise it will use standard HTTP requests.\n * @param {String} [options.webAPIRootURL] - (Optional) Sets the URL the Client API server is using to listen to HTTP requests (e.g. 'http://127.0.0.1:81/').\n * @param {String} [options.username] - (Optional) Sets the client account username.\n * @param {String} [options.password] - (Optional) Sets the client account password.\n * @param {String} [options.brokerID] - (Optional) Sets the broker unique identifier for client account.\n * @param {String} [options.anonymityToken] - (Optional) Sets the unique client generated anonymity token.\n * @param {Function} [options.onLogOnLogOff] - (Optional) Automatically registers a log on/off callback handler.\n * @param {Function} [options.onLogOn] - (Optional) Automatically registers a log on/off callback handler.\n * @param {Function} [options.onLogOff] - (Optional) Automatically registers a log on callback handler.\n * @param {Function} [options.onError] - (Optional) Automatically registers a log off callback handler.\n * @param {Function} [options.onQoS] - (Optional) Automatically registers an error callback handler.\n * @param {Function} [options.onConnect] - (Optional) Automatically registers a connect callback handler.\n * @param {Function} [options.onDisconnect] - (Optional) Automatically registers a disconnect callback handler.\n * @param {ETX.logging.Logger} [options.logger] - (Optional) Sets the `ETX.logging.Logger` to use to provide message logging functionality.\n * @returns {ETX.clientAPI.ClientAPI}\n */\nETX.clientAPI.ClientAPI = function (options) {\n\n    'use strict';\n\n    //-CONSTRUCTOR-------------\n    // #region\n    //----PRIVATE--------------\n    // #region\n    var _api = this,\n        _options = options || {},\n        $ = _options.jQuery || jQuery,\n        _sessionFactory = _options.sessionFactory || new ETX.clientAPI.SessionFactory(),\n        _transportFactory = _options.transportFactory || new ETX.clientAPI.TransportFactory(),\n        _webSocketFactory = _options.webSocketFactory || new ETX.clientAPI.WebSocketFactory(),\n        _helpers = _options.helpers || ETX.clientAPI.Helpers,\n        _logger = _options.logger || new ETX.logging.Logger(),\n        _logSource = 'ClientAPI',\n        _webSocketRootURL = _options.webSocketRootURL || '',\n        _tryWebSocket = _options.tryWebSocket === false ? false : true,\n        _webAPIRootURL = _options.webAPIRootURL || '',\n        _username = _options.username,\n        _authenticationKey = _options.authenticationKey,\n        _passwordHash = _options.password,\n        _brokerID = _options.brokerID || ETX.config.defaultBrokerID,\n        _anonymityToken = _options.anonymityToken,\n        _session,\n        _logOnTimeoutTimer,\n        _logonTimeoutInterval = 5000,\n        _forceLogOnOffEvent = (_options.forceLogOnOffEvent === true),\n        // Callbacks\n        _callbacks = {\n            connect: $.Callbacks('unique'),\n            disconnect: $.Callbacks('unique'),\n            errors: $.Callbacks('unique'),\n            logOff: $.Callbacks('unique'),\n            logOn: $.Callbacks('unique'),\n            logOnLogOff: $.Callbacks('unique'),\n            QoS: $.Callbacks('unique')\n        },\n        // Callbacks mapped by unique key\n        _mappedCallbacks = {\n            executionReport: {},\n            marketSearch: {}\n        },\n        // Subscription callbacks\n        _subscriptions = {\n            account: {\n                subscribed: false,\n                subscriptionCount: 0,\n                callbacks: $.Callbacks('unique'),\n                cache: {},\n                subscriptionMessageBuilder: function () {\n                    return ETX.clientAPI.Messages.createAccountSubscribeMessage();\n                }\n            },\n            accountTransactions: {\n                subscribed: false,\n                subscriptionCount: 0,\n                callbacks: $.Callbacks('unique'),\n                cache: {},\n                subscriptionMessageBuilder: function () {\n                    return ETX.clientAPI.Messages.createAccountTransactionSubscribeMessage();\n                }\n            },\n            closedTrades: {\n                subscribed: false,\n                subscriptionCount: 0,\n                callbacks: $.Callbacks('unique'),\n                cache: {},\n                subscriptionMessageBuilder: function () {\n                    return ETX.clientAPI.Messages.createClosedTradesSubscribeMessage();\n                }\n            },\n            historicTrades: {\n                subscribed: false,\n                subscriptionCount: 0,\n                callbacks: $.Callbacks('unique'),\n                cache: {},\n                subscriptionMessageBuilder: function () {\n                    return ETX.clientAPI.Messages.createHistoricTradesSubscribeMessage();\n                }\n            },\n            openTrades: {\n                subscribed: false,\n                subscriptionCount: 0,\n                callbacks: $.Callbacks('unique'),\n                cache: {},\n                subscriptionMessageBuilder: function () {\n                    return ETX.clientAPI.Messages.createOpenTradesSubscribeMessage();\n                }\n            },\n            priceAlerts: {\n                subscribed: false,\n                subscriptionCount: 0,\n                callbacks: $.Callbacks('unique'),\n                cache: {},\n                subscriptionMessageBuilder: function () {\n                    return ETX.clientAPI.Messages.createPriceAlertsSubscribeMessage();\n                }\n            },\n            processedOrders: {\n                subscribed: false,\n                subscriptionCount: 0,\n                callbacks: $.Callbacks('unique'),\n                cache: {},\n                subscriptionMessageBuilder: function () {\n                    return ETX.clientAPI.Messages.createProcessedOrdersSubscribeMessage();\n                }\n            },\n            workingOrders: {\n                subscribed: false,\n                subscriptionCount: 0,\n                callbacks: $.Callbacks('unique'),\n                cache: {},\n                subscriptionMessageBuilder: function () {\n                    return ETX.clientAPI.Messages.createWorkingOrdersSubscribeMessage();\n                }\n            }\n        },\n        // Subscription callbacks mapped by unique key\n        _mappedSubscriptions = {\n            aggregateAccounts: {\n                subscriptionCounts: {},             // NOTE: Map of SubAccountID to SubscriptionCount...\n                callbacks: {\n                    $any: $.Callbacks('unique')     // NOTE: Map of SubAccountID to callback, where callbacks mapped to $any get fired for each and every update\n                },\n                cache: {},\n                subscriptionMessageBuilder: function (subAccountIDs) {\n                    return ETX.clientAPI.Messages.createAggregateAccountSubscribeMessage(subAccountIDs);\n                }\n            },\n            exchangeRates: {\n                subscriptionCounts: {},             // NOTE: Map of Currency Pair to SubscriptionCount...\n                callbacks: {\n                    $any: $.Callbacks('unique')     // NOTE: Map of Currency Pair to callback, where callbacks mapped to $any get fired for each and every update\n                },\n                cache: {},\n                subscriptionMessageBuilder: function (currencyPairs) {\n                    return ETX.clientAPI.Messages.createExchangeRateSubscribeMessage(currencyPairs);\n                }\n            },\n            groupMarkets: {\n                subscriptionCounts: {},             // NOTE: Map of GroupID to SubscriptionCount...\n                callbacks: {\n                    $any: $.Callbacks('unique')     // NOTE: Map of GroupID to callback, where callbacks mapped to $any get fired for each and every update\n                },\n                cache: {},\n                subscriptionMessageBuilder: function (groupMarketsIDs) {\n                    return ETX.clientAPI.Messages.createGroupMarketSubscribeMessage(groupMarketsIDs);\n                }\n            },\n            markets: {\n                subscriptionCounts: {},             // NOTE: Map of MarketID to SubscriptionCount...\n                callbacks: {\n                    $any: $.Callbacks('unique')     // NOTE: Map of MarketID to callback, where callbacks mapped to $any get fired for each and every update\n                },\n                cache: {},\n                subscriptionMessageBuilder: function (marketsIDs) {\n                    return ETX.clientAPI.Messages.createMarketSubscribeMessage(marketsIDs);\n                }\n            },\n            portfolios: {\n                subscriptionCounts: {},             // NOTE: Map of PortfolioID to SubscriptionCount...\n                callbacks: {\n                    $any: $.Callbacks('unique')     // NOTE: Map of PortfolioID to callback, where callbacks mapped to $any get fired for each and every update\n                },\n                cache: {},\n                subscriptionMessageBuilder: function (portfolioIDs) {\n                    return ETX.clientAPI.Messages.createPortfolioSubscribeMessage(portfolioIDs);\n                }\n            }\n        },\n        // Deferred Objects mapped by unique key\n        _mappedDeferredObjs = {\n            groupSearch: {},\n            marketSearch: {},\n            orderRequest: {},\n            portfolioRequest: {},\n            priceAlertRequest: {},\n            tradeQuoteRequest: {},\n            tradeRequest: {},\n            userSettingsRequest: {}\n        };\n    // #endregion\n    //----END-PRIVATE---------  \n\n    //----PUBLIC--------------\n    // #region\n    _api.addMarketToPortfolio = addMarketToPortfolio;\n    _api.declineTradeQuote = declineTradeQuote;\n    _api.destroy = destroy;\n    _api.findWorkingOrders = findWorkingOrders;\n    _api.findWorkingOrdersBy = findWorkingOrdersBy;\n    _api.findWorkingOrdersForOrderGroupID = findWorkingOrdersForOrderGroupID;\n    _api.getLoginCredentials = getLoginCredentials;\n    _api.getUserSettings = getUserSettings;\n    _api.isConnected = isConnected;\n    /** \n     * Gets or sets the `ETX.logging.Logger` used to provide message logging functionality.\n     * @property {ETX.logging.Logger} logger\n     */\n    _api.logger = _logger;\n    _api.logOff = logOff;\n    _api.logOn = logOn;\n    _api.logOnWithAuthKey = logOnWithAuthKey;\n    _api.logOnAnonymously = logOnAnonymously;\n    _api.overwriteUserSettings = overwriteUserSettings;\n    _api.registerForConnect = registerForConnect;\n    _api.registerForDisconnect = registerForDisconnect;\n    _api.registerForErrors = registerForErrors;\n    _api.registerForLogOff = registerForLogOff;\n    _api.registerForLogOn = registerForLogOn;\n    _api.registerForLogOnLogOff = registerForLogOnLogOff;\n    _api.registerForMarketUpdates = registerForMarketUpdates;\n    _api.registerForQoS = registerForQoS;\n    _api.removeMarketFromPortfolio = removeMarketFromPortfolio;\n    _api.respondToTradeRequote = respondToTradeRequote;\n    _api.searchGroups = searchGroups;\n    _api.searchMarkets = searchMarkets;\n    _api.send = send;\n    _api.sendOrderRequest = sendOrderRequest;\n    _api.sendPriceAlertRequest = sendPriceAlertRequest;\n    _api.sendTradeQuoteRequest = sendTradeQuoteRequest;\n    _api.sendTradeRequest = sendTradeRequest;\n    _api.setWebAPIRootURL = setWebAPIRootURL;\n    _api.setWebSocketRootURL = setWebSocketRootURL;\n    _api.subscribeToAccount = subscribeToAccount;\n    _api.subscribeToAccountTransactions = subscribeToAccountTransactions;\n    _api.subscribeToAggregateAccounts = subscribeToAggregateAccounts;\n    _api.subscribeToClosedTrades = subscribeToClosedTrades;\n    _api.subscribeToExchangeRates = subscribeToExchangeRates;\n    _api.subscribeToGroupMarkets = subscribeToGroupMarkets;\n    _api.subscribeToHistoricTrades = subscribeToHistoricTrades;\n    _api.subscribeToMarkets = subscribeToMarkets;\n    _api.subscribeToOpenTrades = subscribeToOpenTrades;\n    _api.subscribeToPortfolios = subscribeToPortfolios;\n    _api.subscribeToPriceAlerts = subscribeToPriceAlerts;\n    _api.subscribeToProcessedOrders = subscribeToProcessedOrders;\n    _api.subscribeToWorkingOrders = subscribeToWorkingOrders;\n    _api.unregisterForErrors = unregisterForErrors;\n    _api.unregisterForLogOff = unregisterForLogOff;\n    _api.unregisterForLogOn = unregisterForLogOn;\n    _api.unregisterForLogOnLogOff = unregisterForLogOnLogOff;\n    _api.unregisterForMarketUpdates = unregisterForMarketUpdates;\n    _api.unregisterForQoS = unregisterForQoS;\n    _api.unregisterForConnect = unregisterForConnect;\n    _api.unregisterForDisconnect = unregisterForDisconnect;\n    _api.unsubscribeToAccount = unsubscribeToAccount;\n    _api.unsubscribeToAccountTransactions = unsubscribeToAccountTransactions;\n    _api.unsubscribeToAggregateAccounts = unsubscribeToAggregateAccounts;\n    _api.unsubscribeToClosedTrades = unsubscribeToClosedTrades;\n    _api.unsubscribeToExchangeRates = unsubscribeToExchangeRates;\n    _api.unsubscribeToGroupMarkets = unsubscribeToGroupMarkets;\n    _api.unsubscribeToHistoricTrades = unsubscribeToHistoricTrades;\n    _api.unsubscribeToMarkets = unsubscribeToMarkets;\n    _api.unsubscribeToOpenTrades = unsubscribeToOpenTrades;\n    _api.unsubscribeToPortfolios = unsubscribeToPortfolios;\n    _api.unsubscribeToPriceAlerts = unsubscribeToPriceAlerts;\n    _api.unsubscribeToProcessedOrders = unsubscribeToProcessedOrders;\n    _api.unsubscribeToWorkingOrders = unsubscribeToWorkingOrders;\n    _api.updateUserSettings = updateUserSettings;\n    /** \n     * Gets or sets the version of the `ETX.clientAPI.ClientAPI`.\n     * @property {String} version\n     */\n    _api.version = '1.1.6';\n    // #endregion\n    //----END-PUBLIC----------\n\n    // Automatically register callbacks provided in options, if any...\n    if (_options.onConnect) { registerForConnect(_options.onConnect); }\n    if (_options.onDisconnect) { registerForDisconnect(_options.onDisconnect); }\n    if (_options.onError) { registerForErrors(_options.onError); }\n    if (_options.onLogOff) { registerForLogOff(_options.onLogOff); }\n    if (_options.onLogOn) { registerForLogOn(_options.onLogOn); }\n    if (_options.onLogOnLogOff) { registerForLogOnLogOff(_options.onLogOnLogOff); }\n    if (_options.onQoS) { registerForQoS(_options.onQoS); }\n\n    _logger.debug('Created ETX.clientAPI.ClientAPI', _logSource);\n\n    // Automatically start API, if valid credentials have been provided...\n    start();\n\n    return _api;\n    // #endregion\n    //-END-CONSTRUCTOR--------\n\n\n    //-METHODS----------------\n    // #region\n    /**\n     * Adds market to the given porfolio\n     *\n     * @method addMarketToPortfolio\n     * @param {String} [portfolioID] - Unique identifier of the portfolio.\n     * @param {String} [marketID] - Unique identifier of the market.\n     * @returns {void}\n     */\n    function addMarketToPortfolio(portfolioID, marketID) {\n        if (_session) {\n            _logger.debug('Sending PortfolioAddMarket request...', _logSource);\n\n            var msg = ETX.clientAPI.Messages.createPortfolioAddMarketMessage(portfolioID, marketID);\n            send(msg);\n        }\n    }\n\n    function clearLogOnTimeout() {\n        if (_logOnTimeoutTimer) {\n            clearTimeout(_logOnTimeoutTimer);\n            _logOnTimeoutTimer = undefined;\n            _logger.verbose('Cleared log on timeout timer', _logSource);\n        }\n    }\n\n    function createSession() {\n        // Create session and connect it\n        _session = _sessionFactory.create({\n            transportFactory: _transportFactory,\n            webSocketFactory: _webSocketFactory,\n            logger: _logger,\n            tryWebSocket: _tryWebSocket,\n            webSocketRootURL: _webSocketRootURL,\n            webAPIRootURL: _webAPIRootURL,\n            onConnect: onConnect,\n            onMessage: onMessage,\n            onError: onError,\n            onDisconnect: onDisconnect,\n            onQoS: onQoS\n        });\n    }\n\n    /**\n     * Declines an existing quoted trade price.\n     *\n     * @method declineTradeQuote\n     * @param {String} quoteID - Unique identifier of the trade quote to be declined.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function declineTradeQuote(quoteID) {\n        // Generate unique client identifier...\n        var uid = ETX.clientAPI.Messages.generateUniqueClientIdentifier(ETX.clientAPI.Constants.messages.TradeQuoteDecline.MessageType),\n            defer = new $.Deferred(),\n            promise = defer.promise();\n\n        if (_session) {\n            _logger.debug('Sending TradeQuoteDecline request (\"' +uid + '\")...', _logSource);\n\n            // Fire and forget...\n            var msg = ETX.clientAPI.Messages.createTradeQuoteDeclineMessage(uid, quoteID);\n            send(msg);\n            defer.resolve(_api, uid);\n        } else {\n            defer.reject(_api, 'No session');\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n\n    /**\n     * Stops any session currently established with the server, unregisters all callback handlers and cleans\n     * up all resources.\n     *\n     * @method destroy\n     * @returns {void}\n     */\n    function destroy() {\n        // Clear all callbacks...\n        for (var msgType in _callbacks) {\n            var msgTypeCallbacks = _callbacks[msgType];\n            if (msgTypeCallbacks) {\n                msgTypeCallbacks.empty();\n            }\n        }\n        // Clear all mapped callbacks...\n        for (var msgType in _mappedCallbacks) {\n            _mappedCallbacks[msgType] = {};\n        }\n        // Clear all subscriptions...\n        for (var msgType in _subscriptions) {\n            var msgTypeSubscriptions = _subscriptions[msgType];\n            if (msgTypeSubscriptions) {\n                msgTypeSubscriptions.subscribed = false;\n                msgTypeSubscriptions.subscriptionCount = 0;\n                msgTypeSubscriptions.callbacks.empty();\n                msgTypeSubscriptions.cache = {};\n            }\n        }\n        // Clear all mapped subscriptions...\n        for (var msgType in _mappedSubscriptions) {\n            _mappedSubscriptions[msgType] = {};\n        }\n\n        logOff();\n\n        _logger.debug('Destroyed ETX.clientAPI.ClientAPI', _logSource);\n    }\n\n    function destroySession() {\n        if (_session) {\n            // Clear Timeouts/Intervals...\n            clearLogOnTimeout();\n\n            _session.destroy();\n            _session = undefined;\n        }\n    }\n\n    /**\n     * Searches the internal cache for working orders matching the one of the working order\n     * IDs provided.\n     *\n     * @method findWorkingOrders\n     * @param {Array|String} workingOrderIDs - Array of (or an individual) working order IDs.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function findWorkingOrders(workingOrderIDs) {\n        var criteria = [];\n        if ($.isArray(workingOrderIDs) === false) {\n            workingOrderIDs = [workingOrderIDs];\n        }\n        for (var i in workingOrderIDs) {\n            var criterion = {},\n                workingOrderID = workingOrderIDs[i];\n            criterion[ETX.clientAPI.Constants.messages.WorkingOrder.OrderID] = workingOrderID;\n            criteria.push(criterion);\n        }\n        return findWorkingOrdersBy(criteria);\n    }\n\n    /**\n     * Searches the internal cache for working orders matching all the property values of at \n     * least one (criterion) Object within the criteria array provided.\n     *\n     * @method findWorkingOrdersBy\n     * @param {Array|Object} criteria - Array of (or an individual) (criterion) Object.\n     * @param {Boolean} autoSubscribe - If true, will automatically subscribe to working orders.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     *\n     *\n     * ###Example:\n     *      // Find any workings orders for Markets '10001', '10002', '10003' (auto-subscribing if required)\n     *      var api = new ETX.clientAPI.ClientAPI({\n     *          webSocketRootURL: 'ws://127.0.0.1:82',\n     *          webAPIRootURL: 'http://127.0.0.1:81/',\n     *          username: 'test_user',\n     *          password: 'change_me',\n     *          brokerID: '1'\n     *      });\n     *      var criteria = [], \n     *          marketIDs = ['10001', '10002', '10003'];\n     *      for (var i in marketIDs) {\n     *          var marketID = marketIDs[i],\n     *              criterion = {};\n     *          criterion[ETX.clientAPI.Constants.messages.WorkingOrder.MarketID] = marketID;\n     *          criteria.push(criterion);\n     *      }\n     *      // NOTE: Returns a jQuery Promise object, as this may be an async request\n     *      api.findWorkingOrdersBy(criteria, true)\n     *          .done(function (api, workingOrders) {\n     *              // workingOrders array should contain your search results\n     *          })\n     *          .fail(function (api, workingOrders) {\n     *              // An error must have occurred, which prevented the search operation from\n     *              // executing, so workingOrders array should be empty\n     *          })\n     *          .always(function (api, workingOrders) {\n     *              // If you don't care about whether there was an error and are more interested in the results\n     *          });\n     */\n    function findWorkingOrdersBy(criteria, autoSubscribe) {\n        var defer = new $.Deferred(),\n            unsubscriptionTimeoutRef, cachedWorkingOrderIDs;\n\n        if (_session) {\n\n            if (_subscriptions.workingOrders.subscribed === false && autoSubscribe === true) {\n                // As we have not subscribed to working orders, we need to temporarily\n                // subscribe so that we have data to query...\n                findWorkingOrdersBy_Subscribe();\n            } else {\n                // Query the data we have, if any...\n                findWorkingOrdersBy_Resolve(defer, criteria);\n            }\n        } else {\n            defer.reject(_api, []);\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return defer.promise();\n\n\n        // Nested Functions\n        // #region\n        function findWorkingOrdersBy_Subscribe() {\n            // Subscribe temporarily...\n            subscribeToWorkingOrders(findWorkingOrdersBy_SubscriptionUpdate);\n            findWorkingOrdersBy_ResetUnsubscriptionTimeout();\n        }\n\n        function findWorkingOrdersBy_SubscriptionUpdate(api, workingOrder) {\n            if ($.isArray(cachedWorkingOrderIDs)) {\n                var orderID = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderID];\n                if (orderID && cachedWorkingOrderIDs.indexOf(orderID) > 0) {\n                    findWorkingOrdersBy_ResetUnsubscriptionTimeout();\n                    cachedWorkingOrderIDs.push(orderID);\n                }\n            }\n        }\n\n        function findWorkingOrdersBy_ResetUnsubscriptionTimeout() {\n            if (unsubscriptionTimeoutRef) {\n                // Clear the previous timeout and wait again...\n                clearTimeout(unsubscriptionTimeoutRef);\n            }\n            // Wait 500ms before we unsubscribe...\n            unsubscriptionTimeoutRef = setTimeout(findWorkingOrdersBy_Unsubscribe, 500);\n        }\n\n        function findWorkingOrdersBy_Unsubscribe() {\n            // Subscription was only temporarily, we've wanted long enough, so unsubscribe...\n            cachedWorkingOrderIDs = undefined;\n            unsubscribeToWorkingOrders(findWorkingOrdersBy_SubscriptionUpdate);\n\n            findWorkingOrdersBy_Resolve(defer, criteria);\n        }\n\n        function findWorkingOrdersBy_Resolve(defer, criteria) {\n            // Query the data we have...\n            var matchingWorkingOrders = getObjectsMatchingCriteria(_subscriptions.workingOrders.cache, criteria);\n            defer.resolve(_api, matchingWorkingOrders);\n        }\n        // #endregion\n        // Nested Functions\n    }\n\n    /**\n     * Searches the internal cache for working orders matching the one of the working OCO order\n     * group IDs provided.\n     *\n     * @method findWorkingOrdersForOrderGroupID\n     * @param {Array|String} orderGroupIDs - Array of (or an individual) working OCO order group IDs.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function findWorkingOrdersForOrderGroupID(orderGroupIDs) {\n        var criteria = [];\n        if ($.isArray(orderGroupIDs) === false) {\n            orderGroupIDs = [orderGroupIDs];\n        }\n        for (var i in orderGroupIDs) {\n            var criterion = {},\n                orderGroupID = orderGroupIDs[i];\n            criterion[ETX.clientAPI.Constants.messages.WorkingOrder.OrderGroupID] = orderGroupID;\n            criteria.push(criterion);\n        }\n        return findWorkingOrdersBy(criteria);\n    }\n\n    function fireCallbacks(callbacks, args) {\n        if (callbacks) {\n            try {\n                if (args !== undefined) {\n                    args = [].concat(_api, args);\n                } else {\n                    args = [_api];\n                }\n\n                // NOTE: If any one callback throws an exception, then any subsequent callbacks will not be fired...\n                // Fire callbacks\n                callbacks.fireWith(callbacks, args);\n            } catch (ex) {\n                _logger.error('Error firing callback(s) | Exception = ' + ex, _logSource, [ex, args]);\n            }\n        }\n    }\n\n    /**\n     * Return an Object containing the current login credentials stored.\n     *\n     * @method getLoginCredentials\n     * @returns {Object} - Object containing the username, password and broker ID.\n     */\n    function getLoginCredentials() {\n        var credentials = undefined;\n        if (_anonymityToken) {\n            credentials = {\n                anonymityToken: _anonymityToken\n            };\n        } else {\n            credentials = {\n                username: _username,\n                password: _passwordHash,\n                brokerID: _brokerID\n            };\n        }\n        return credentials;\n    }\n\n    /**\n     * Fetches the user settings for the client account from the server.\n     *\n     * @method getUserSettings\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function getUserSettings() {\n        // Generate unique client identifier...\n        var uid = ETX.clientAPI.Messages.generateUniqueClientIdentifier(ETX.clientAPI.Constants.messages.UserSettingsRequest.MessageType),\n            defer = new $.Deferred(),\n            promise = defer.promise();\n\n        if (_session) {\n            _logger.debug('Sending (get) UserSettingsRequest  (\"' + uid + '\")...', _logSource);\n\n            _mappedDeferredObjs.userSettingsRequest[uid] = defer;\n\n            var msg = ETX.clientAPI.Messages.createUserSettingsRequestMessage(\n                uid, ETX.clientAPI.Constants.messages.UserSettingsRequest.UserSettingsRequestType_Get);\n            send(msg);\n        } else {\n            defer.reject(_api, 'No session');\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n\n    function getObjectsMatchingCriteria(objects, criteria) {\n        var matchingObjects = [];\n\n        if ($.isArray(criteria) === false) {\n            criteria = [criteria];\n        }\n\n        if (criteria.length > 0) {\n            for (var i in objects) {\n                var obj = objects[i];\n                if (obj) {\n                    // Check if the object matches this criteria...\n                    if (isObjectMatchingCriteria(obj, criteria)) {\n                        matchingObjects.push(obj);\n                    }\n                }\n            }\n        }\n\n        return matchingObjects;\n\n\n        // Nested Functions\n        // #region\n        function isObjectMatchingCriteria(obj, criteria) {\n            // Check if the object matches all criteria...\n            if ($.isPlainObject(obj)) {\n                if ($.isArray(criteria) === false) {\n                    criteria = [criteria];\n                }\n                for (var i in criteria) {\n                    var criterion = criteria[i];\n                    if (isObjectMatchingCriterion(obj, criterion)) {\n                        // Match!!!\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        function isObjectMatchingCriterion(obj, criterion) {\n            // Check if the object matches this criterion\n            if ($.isPlainObject(obj)) {\n                if ($.isPlainObject(criterion) && $.isEmptyObject(criterion) === false) {\n                    for (var key in criterion) {\n                        if (obj.hasOwnProperty(key) === false) {\n                            // Mismatch...\n                            return false;\n                        }\n\n                        var value = obj[key],\n                            target = criterion[key];\n                        if (value !== target) {\n                            // Mismatch...\n                            return false;\n                        }\n                    }\n                    // Match!!!\n                    return true;\n                }\n            }\n            return false;\n        }\n        // #endregion\n        // Nested Functions\n    }\n\n    function handleMsgTypeAccountUpdate(message) {\n        _logger.debug('Handling messsage AccountUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Check that we are subscribed to accounts (to prevent memory leaks)\n        if (_subscriptions.account.subscribed === true) {\n            // Update cache\n            for (var k in message.t) {\n                _subscriptions.account.cache[k] = message.t[k];\n            }\n            _logger.debug('Updated Account', _logSource);\n\n            //\n            // TODO: NOTE: We need to support SubAccount deletions some how...\n            //\n\n            // Fire callbacks\n            fireCallbacks(_subscriptions.account.callbacks, _subscriptions.account.cache);\n        }\n    }\n\n    function handleMsgTypeAccountTransactionUpdate(message) {\n        _logger.debug('Handling messsage AccountTransactionUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Check that we are subscribed to account transactions (to prevent memory leaks)\n        if (_subscriptions.accountTransactions.subscribed === true) {\n            // Update cache\n            var statementID = message.t[ETX.clientAPI.Constants.messages.AccountTransaction.StatementID];\n            if (_helpers.compare.isIdentifier(statementID)) {\n                // Update the cache\n                if (_subscriptions.accountTransactions.cache.hasOwnProperty(statementID) === false) {\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.AccountTransaction.Deleted)) {\n                        return; // If this has the delete flag, ignore\n                    }\n\n                    // Add this account transaction to the cache\n                    _subscriptions.accountTransactions.cache[statementID] = message.t;\n                    _logger.debug('Added new AccountTransaction ' + statementID, _logSource);\n                } else {\n                    // If this has the delete flag, remove from the cache\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.AccountTransaction.Deleted)) {\n                        delete _subscriptions.accountTransactions.cache[statementID];\n                        _logger.debug('Deleted existing AccountTransaction ' + statementID, _logSource);\n                    } else {\n                        // Update the fields in the cache\n                        var statement = _subscriptions.accountTransactions.cache[statementID];\n                        for (var k in message.t) {\n                            statement[k] = message.t[k];\n                        }\n                        _logger.debug('Updated existing AccountTransaction ' + statementID, _logSource);\n                    }\n                }\n\n                // Fire callbacks\n                fireCallbacks(_subscriptions.accountTransactions.callbacks, message.t);\n            }\n        }\n    }\n\n    function handleMsgTypeAggregateAccountUpdate(message) {\n        _logger.debug('Handling messsage AggregateAccountUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Fire callbacks registered for (high-level) exchange rate updates...\n        fireCallbacks(_mappedSubscriptions.exchangeRates.callbacks.$any, message.t);\n\n        // Do we have a specific exchange rate subscription?\n        var subAccountID = message.t[ETX.clientAPI.Constants.messages.AggregateAccount.SubAccountID];\n        if (_helpers.compare.isIdentifier(subAccountID)) {\n            // Check that we have subscriptions for this aggr. account (to prevent memory leaks)\n            if ((_mappedSubscriptions.aggregateAccounts.subscriptionCounts.hasOwnProperty(subAccountID)) &&\n                (_mappedSubscriptions.aggregateAccounts.subscriptionCounts[subAccountID] > 0)) {\n                // Update the cache\n                if (_mappedSubscriptions.aggregateAccounts.cache.hasOwnProperty(subAccountID) === false) {\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.AggregateAccount.Deleted)) {\n                        return; // If this has the delete flag, ignore\n                    }\n                    // Add this aggr. account to the cache\n                    _mappedSubscriptions.aggregateAccounts.cache[subAccountID] = message.t;\n                } else {\n                    // If this has the delete flag, remove from the cache\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.ExchangeRate.Deleted)) {\n                        delete _mappedSubscriptions.exchangeRates.cache[subAccountID];\n                        _logger.debug('Deleted existing AggregateAccount ' + subAccountID, _logSource);\n                    } else {\n                        // Update the cache with these tags\n                        var cacheAggAccount = _mappedSubscriptions.aggregateAccounts.cache[subAccountID];\n                        for (var k in message.t) {\n                            cacheAggAccount[k] = message.t[k];\n                        }\n                        _logger.debug('Updated existing AggregateAccount ' + subAccountID, _logSource);\n                    }\n                }\n                // Do we have any subscriptions to this market?\n                if (_mappedSubscriptions.aggregateAccounts.callbacks.hasOwnProperty(subAccountID)) {\n                    fireCallbacks(_mappedSubscriptions.aggregateAccounts.callbacks[subAccountID], message.t);\n                }\n            }\n        }\n    }\n\n    function handleMsgTypeClosedTradeUpdate(message) {\n        _logger.debug('Handling messsage ClosedTradeUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Check that we are subscribed to closed trades (to prevent memory leaks)\n        if (_subscriptions.closedTrades.subscribed === true) {\n            // Update cache\n            var tradeCloseID = message.t[ETX.clientAPI.Constants.messages.ClosedTrade.TradeCloseID];\n            if (_helpers.compare.isIdentifier(tradeCloseID)) {\n                if (_subscriptions.closedTrades.cache.hasOwnProperty(tradeCloseID) === false) {\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.ClosedTrade.Deleted)) {\n                        return; // If this has the delete flag, ignore\n                    }\n                    // Add this closed trade to the cache\n                    _subscriptions.closedTrades.cache[tradeCloseID] = message.t;\n                    _logger.debug('Added new ClosedTrade ' + tradeCloseID, _logSource);\n                } else {\n                    // If this has the delete flag, remove from the cache\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.ClosedTrade.Deleted)) {\n                        delete _subscriptions.closedTrades.cache[tradeCloseID];\n                        _logger.debug('Deleted existing ClosedTrade ' + tradeCloseID, _logSource);\n                    } else {\n                        // Update the fields in the cache\n                        var trade = _subscriptions.closedTrades.cache[tradeCloseID];\n                        for (var k in message.t) {\n                            trade[k] = message.t[k];\n                        }\n                        _logger.debug('Updated existing ClosedTrade ' + tradeCloseID, _logSource);\n                    }\n                }\n\n                // Fire callbacks\n                fireCallbacks(_subscriptions.closedTrades.callbacks, message.t);\n            }\n        }\n    }\n\n    function handleMsgTypeError(message) {\n        var error = message.t[ETX.clientAPI.Constants.messages.Error.ErrorText];\n\n        _logger.error('Error received from server | Error = ' + error, _logSource, message.t);\n\n        // Fire callbacks\n        fireCallbacks(_callbacks.errors, [error, message.t]);\n    }\n\n    function handleMsgTypeExchangeRateUpdate(message) {\n        _logger.debug('Handling messsage ExchangeRateUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Fire callbacks registered for (high-level) exchange rate updates...\n        fireCallbacks(_mappedSubscriptions.exchangeRates.callbacks.$any, message.t);\n\n        // Do we have a specific exchange rate subscription?\n        var currencyPair = message.t[ETX.clientAPI.Constants.messages.ExchangeRate.CurrencyPair];\n        if (_helpers.compare.isIdentifier(currencyPair)) {\n            // Check that we have subscriptions for this exchange rate (to prevent memory leaks)\n            if ((_mappedSubscriptions.exchangeRates.subscriptionCounts.hasOwnProperty(currencyPair)) &&\n                (_mappedSubscriptions.exchangeRates.subscriptionCounts[currencyPair] > 0)) {\n                // Update the cache\n                if (_mappedSubscriptions.exchangeRates.cache.hasOwnProperty(currencyPair) === false) {\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.ExchangeRate.Deleted)) {\n                        return; // If this has the delete flag, ignore\n                    }\n                    // Add this exchange rate to the cache\n                    _mappedSubscriptions.exchangeRates.cache[currencyPair] = message.t;\n                    _logger.debug('Added new ExchangeRate ' + currencyPair, _logSource);\n                } else {\n                    // If this has the delete flag, remove from the cache\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.ExchangeRate.Deleted)) {\n                        delete _mappedSubscriptions.exchangeRates.cache[currencyPair];\n                        _logger.debug('Deleted existing ExchangeRate ' + currencyPair, _logSource);\n                    } else {\n                        // Update the cache with these tags\n                        var exchangeRate = _mappedSubscriptions.exchangeRates.cache[currencyPair];\n                        for (var k in message.t) {\n                            exchangeRate[k] = message.t[k];\n                        }\n                        _logger.debug('Updated existing ExchangeRate ' + currencyPair, _logSource);\n                    }\n                }\n                // Do we have any subscriptions to this exchange rate ?\n                if (_mappedSubscriptions.exchangeRates.callbacks.hasOwnProperty(currencyPair)) {\n                    fireCallbacks(_mappedSubscriptions.exchangeRates.callbacks[currencyPair], message.t);\n                }\n            }\n        }\n    }\n\n    function handleMsgTypeExecutionReport(message) {\n        _logger.debug('Handling messsage ExecutionReportResponse (\"' + message.T + '\")...', _logSource);\n\n        // Get the UID from the message\n        var uid = message.t[ETX.clientAPI.Constants.messages.ExecutionReport.UniqueClientIdentifier],\n            orderStatus = message.t[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus],\n            request,\n            defer,\n            finished = false;\n\n        // Check if this execution report is for a trade request\n        if (_mappedDeferredObjs.tradeRequest.hasOwnProperty(uid)) {\n            request = _mappedDeferredObjs.tradeRequest[uid].request.t;\n            defer = _mappedDeferredObjs.tradeRequest[uid].defer;\n\n            switch (orderStatus) {\n                default:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Dealer:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Requoted:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Working:\n                    defer.notify(_api, message.t);\n                    _logger.debug('TradeRequest ExecutionReport (\"' + uid + '\") with status (\"' + orderStatus + '\") is pending...', _logSource);\n                    break;\n\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Filled:\n                    defer.resolve(_api, message.t);\n                    finished = true;\n                    break;\n\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Cancelled:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Stopped:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Rejected:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Expired:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_PriceReject:\n                    defer.reject(_api, message.t);\n                    finished = true;\n                    break;\n            }\n\n            // Are we finsihed with this report?\n            if (finished) {\n                // Remove deferred object...\n                delete _mappedDeferredObjs.tradeRequest[uid];\n                _logger.debug('TradeRequest ExecutionReport (\"' + uid + '\") with status (\"' + orderStatus + '\") is complete', _logSource);\n            }\n        }\n\n        // Check if this execution report is for a order request\n        if (_mappedDeferredObjs.orderRequest.hasOwnProperty(uid)) {\n            request = _mappedDeferredObjs.orderRequest[uid].request.t;\n            defer = _mappedDeferredObjs.orderRequest[uid].defer;\n\n            switch (orderStatus) {\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Dealer:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Requoted:\n                    defer.notify(_api, message.t);\n                    _logger.debug('OrderRequest ExecutionReport (\"' + uid + '\") with status (\"' + orderStatus + '\") is pending...', _logSource);\n                    break;\n\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Working:\n                    defer.resolve(_api, message.t);\n                    finished = true;\n                    break;\n\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Cancelled:\n                    // If this is a response to a CANCEL order request, then this is not a failure...\n                    var orderRequestType = request[ETX.clientAPI.Constants.messages.OrderRequest.OrderRequestType];\n                    if (ETX.clientAPI.Constants.messages.OrderRequest.OrderRequestType_Cancel === orderRequestType) {\n                        defer.resolve(_api, message.t);\n                    } else {\n                        defer.reject(_api, message.t);\n                    }\n                    finished = true;\n                    break;\n\n                default:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Filled:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Stopped:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Rejected:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Expired:\n                case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_PriceReject:\n                    defer.reject(_api, message.t);\n                    finished = true;\n                    break;\n            }\n\n            // Are we finsihed with this report?\n            if (finished) {\n                // Remove deferred object...\n                delete _mappedDeferredObjs.orderRequest[uid];\n                _logger.debug('OrderRequest ExecutionReport (\"' + uid + '\") with status (\"' + orderStatus + '\") is complete', _logSource);\n            }\n        }\n\n\n        // Old code\n        // #region\n        // Get the UID from the message\n        //var uid = message.t[ETX.clientAPI.Constants.messages.ExecutionReport.UniqueClientIdentifier];\n\n        //// Do we have anyone waiting for this execution report?\n        //if (_mappedCallbacks.executionReport.hasOwnProperty(uid)) {\n        //    // Fire callback\n        //    fireCallbacks(_mappedCallbacks.executionReport[uid], message.t);\n\n        //    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus)) {\n        //        var bFinished = false;\n        //        switch (message.t[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus]) {\n\n        //            case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Working:\n        //            case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Dealer:\n        //                bFinished = false;\n        //                break;\n\n        //            case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Filled:\n        //            case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Cancelled:\n        //            case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Stopped:\n        //            case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Rejected:\n        //            case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_Expired:\n        //            case ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus_PriceReject:\n        //                bFinished = true;\n        //                break;\n        //        }\n\n        //        // Are we finsihed with this report?\n        //        if (bFinished) {\n        //            // Remove callback\n        //            //_mappedCallbacks.executionReport[uid].empty();\n        //        }\n        //    }\n        //}\n        // #endregion\n        // Old code\n    }\n\n    function handleMsgTypeGroupMarketsUpdate(message) {\n        _logger.debug('Handling messsage GroupMarketsUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Fire callbacks registered for (high-level) group market updates...\n        fireCallbacks(_mappedSubscriptions.groupMarkets.callbacks.$any, message);\n\n        // Do we have a specific group market subscription?\n        var groupID = message.t[ETX.clientAPI.Constants.messages.GroupMarkets.GroupID];\n        if (_helpers.compare.isIdentifier(groupID)) {\n            // Check that we have subscriptions for this group market (to prevent memory leaks)\n            if ((_mappedSubscriptions.groupMarkets.subscriptionCounts.hasOwnProperty(groupID)) &&\n                (_mappedSubscriptions.groupMarkets.subscriptionCounts[groupID] > 0)) {\n                // Update the cache\n                if (_mappedSubscriptions.groupMarkets.cache.hasOwnProperty(groupID) === false) {\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.GroupMarkets.Deleted)) {\n                        return; // If this has the delete flag, ignore\n                    }\n\n                    // Add this group market to the cache\n                    _mappedSubscriptions.groupMarkets.cache[groupID] = message.t;\n                    _logger.debug('Added new GroupMarket ' + groupID, _logSource);\n                } else {\n                    // If this has the delete flag, remove from the cache\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.GroupMarkets.Deleted)) {\n                        delete _mappedSubscriptions.groupMarkets.cache[groupID];\n                        _logger.debug('Deleted existing GroupMarket ' + groupID, _logSource);\n                    } else {\n                        // Update the cache with these tags\n                        var cachedGrpMkts = _mappedSubscriptions.groupMarkets.cache[groupID];\n                        for (var k in message.t) {\n                            if (k !== ETX.clientAPI.Constants.messages.GroupMarkets.MarketsArray) {\n                                cachedGrpMkts[k] = message.t[k];\n                            } else {\n                                // We cannot blindly copy the fields, we have to check each action type...\n                                var cachedGrpMkts = cachedGrpMkts[k],\n                                    modifiedGrpMkts = message.t[ETX.clientAPI.Constants.messages.GroupMarkets.MarketsArray];\n                                if ($.isArray(modifiedGrpMkts)) {\n                                    for (var i in modifiedGrpMkts) {\n                                        var modifiedGrpMkt = modifiedGrpMkts[i];\n                                        if (modifiedGrpMkt) {\n                                            var action = modifiedGrpMkt[ETX.clientAPI.Constants.messages.GroupMarkets.MarketsArray_Object.Action];\n                                            switch (action) {\n                                                case ETX.clientAPI.Constants.messages.GroupMarkets.MarketsArray_Object.Action_Added:\n                                                    // Add new market to cached array...\n                                                    cachedGrpMkts.push(modifiedGrpMkt);\n                                                    break;\n\n                                                case ETX.clientAPI.Constants.messages.GroupMarkets.MarketsArray_Object.Action_Updated:\n                                                case ETX.clientAPI.Constants.messages.GroupMarkets.MarketsArray_Object.Action_Deleted:\n                                                    // Find the existing market within cached array...\n                                                    var modifiedGrpMktID = modifiedGrpMkt[ETX.clientAPI.Constants.messages.GroupMarkets.MarketsArray_Object.MarketID];\n                                                    for (var j in cachedGrpMkts) {\n                                                        var cachedGrpMkt = cachedGrpMkts[j],\n                                                            cachedGrpMktID = cachedGrpMkt[ETX.clientAPI.Constants.messages.GroupMarkets.MarketsArray_Object.MarketID];\n                                                        if (cachedGrpMktID === modifiedGrpMktID) {\n                                                            // Found it...\n                                                            if (action === ETX.clientAPI.Constants.messages.GroupMarkets.MarketsArray_Object.Action_Updated) {\n                                                                // Update the cached market's tags...\n                                                                for (var p in modifiedGrpMkt) {\n                                                                    cachedGrpMkt[p] = modifiedGrpMkt[p];\n                                                                }\n                                                            }\n                                                            if (action === ETX.clientAPI.Constants.messages.GroupMarkets.MarketsArray_Object.Action_Deleted) {\n                                                                // Delete existing market from array...\n                                                                cachedGrpMkts.splice(j, 1);\n                                                            }\n                                                            break;\n                                                        }\n                                                    }\n                                                    break;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    _logger.debug('Updated existing GroupMarket ' + groupID, _logSource);\n                }\n                // Do we have any subscriptions to this market?\n                if (_mappedSubscriptions.groupMarkets.callbacks.hasOwnProperty(groupID)) {\n                    fireCallbacks(_mappedSubscriptions.groupMarkets.callbacks[groupID], message.t);\n                }\n            }\n        }\n    }\n\n    function handleMsgTypeGroupSearchResponse(message) {\n        _logger.debug('Handling messsage GroupSearchResponse (\"' + message.T + '\")...', _logSource);\n\n        // Get the UID from the message\n        var uid = message.t[ETX.clientAPI.Constants.messages.GroupSearchResponse.UniqueClientIdentifier];\n\n        // Do we have anyone waiting for this search result?\n        if (_mappedDeferredObjs.groupSearch.hasOwnProperty(uid)) {\n            // Get deferred object...\n            var defer = _mappedDeferredObjs.groupSearch[uid];\n\n            // Remove deferred object...\n            delete _mappedDeferredObjs.groupSearch[uid];\n\n            // Resolve deferred object...\n            defer.resolve(_api, message.t);\n\n            _logger.debug('GroupSearchResponse (\"' + uid + '\") is complete', _logSource);\n        }\n    }\n\n    function handleMsgTypeHistoricTradeUpdate(message) {\n        _logger.debug('Handling messsage HistoricTradeUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Check that we are subscribed to historic trades (to prevent memory leaks)\n        if (_subscriptions.historicTrades.subscribed === true) {\n            // Update cache\n            var tradeID = message.t[ETX.clientAPI.Constants.messages.HistoricTrade.TradeID];\n            if (_helpers.compare.isIdentifier(tradeID)) {\n                if (trade === undefined) {\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.HistoricTrade.Deleted)) {\n                        return; // If this has the delete flag, ignore\n                    }\n                    // Add this historic trade to the cache\n                    _subscriptions.historicTrades.cache[tradeID] = message.t;\n                    _logger.debug('Added new HistoricTrade ' + tradeID, _logSource);\n                } else {\n                    // If this has the delete flag, remove from the cache\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.HistoricTrade.Deleted)) {\n                        delete _subscriptions.historicTrades.cache[trade];\n                        _logger.debug('Deleted existing HistoricTrade ' + tradeID, _logSource);\n                    } else {\n                        // Update the fields in the cache\n                        var trade = _subscriptions.historicTrades.cache[tradeID];\n                        for (var k in message.t) {\n                            trade[k] = message.t[k];\n                        }\n                        _logger.debug('Updated existing HistoricTrade ' + tradeID, _logSource);\n                    }\n                }\n\n                // Fire callbacks\n                fireCallbacks(_subscriptions.historicTrades.callbacks, message.t);\n            }\n        }\n    }\n\n    function handleMsgTypeLogOffResponse(message) {\n        _logger.debug('ClientAPI : Handling messsage LogOffResponse (\"' + message.T + '\")...', _logSource);\n        destroySession();\n        fireCallbacks(_callbacks.logOnLogOff, [false, message.t]);\n        fireCallbacks(_callbacks.logOff, message.t);\n    }\n\n    function handleMsgTypeLogOnResponse(message) {\n        _logger.debug('Handling messsage handleMsgTypeLogOnResponse (\"' + message.T + '\")...', _logSource);\n\n        // If we have a logon timeout timer, cancel that too\n        if (_logOnTimeoutTimer) { clearTimeout(_logOnTimeoutTimer); }\n\n        // If we have some subscriptions (i.e. we've been connected before) then we should send the \n        // requests to the server to stay sync'd\n        var resubscribesSent = false;\n\n        for (var msgType in _subscriptions) {\n            var msgSubscription = _subscriptions[msgType];\n            if (msgSubscription) {\n                if (msgSubscription.subscribed) {\n                    _logger.debug('Resubscribing to pre-existing \"' + msgType + '\" subscriptions...', _logSource);\n                    send(msgSubscription.subscriptionMessageBuilder());\n                    resubscribesSent = true;\n                }\n            }\n        }\n\n        for (var msgType in _mappedSubscriptions) {\n            var msgMappedSubscription = _mappedSubscriptions[msgType];\n            if (msgMappedSubscription) {\n                if (msgMappedSubscription.subscriptionCounts) {\n                    var subscriptionKeys = [];\n                    for (var subscriptionKey in msgMappedSubscription.subscriptionCounts) {\n                        subscriptionKeys.push(subscriptionKey);\n                    }\n                    if (subscriptionKeys.length > 0) {\n                        _logger.debug('Resubscribing to pre-existing \"' + msgType + '\" subscriptions for ' + subscriptionKeys + '...', _logSource);\n                        send(msgMappedSubscription.subscriptionMessageBuilder(subscriptionKeys));\n                        resubscribesSent = true;\n                    }\n                }\n            }\n        }\n\n        // If we didnt have any subscriptions to reattach to, then send up the onLogon event\n        if (resubscribesSent === false || _forceLogOnOffEvent) {\n            fireCallbacks(_callbacks.logOnLogOff, [true, message.t]);\n            fireCallbacks(_callbacks.logOn, message.t);\n        }\n    }\n\n    function handleMsgTypeMarketSearchResponse(message) {\n        _logger.debug('Handling messsage MarketSearchResponse (\"' + message.T + '\")...', _logSource);\n\n        // Get the UID from the message\n        var uid = message.t[ETX.clientAPI.Constants.messages.MarketSearchResponse.UniqueClientIdentifier];\n\n        // Do we have anyone waiting for this search result?\n        if (_mappedDeferredObjs.marketSearch.hasOwnProperty(uid)) {\n            // Get deferred object...\n            var defer = _mappedDeferredObjs.marketSearch[uid];\n\n            // Remove deferred object...\n            delete _mappedDeferredObjs.marketSearch[uid];\n\n            // Resolve deferred object...\n            defer.resolve(_api, message.t);\n\n            _logger.debug('MarketSearchResponse (\"' + uid + '\") is complete', _logSource);\n        }\n    }\n\n    function handleMsgTypeMarketUpdate(message) {\n        _logger.debug('Handling messsage MarketUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Fire callbacks registered for (high-level) market updates...\n        fireCallbacks(_mappedSubscriptions.markets.callbacks.$any, message);\n\n        // Do we have a specific market subscription?\n        var marketID = message.t[ETX.clientAPI.Constants.messages.Market.MarketID];\n        if (_helpers.compare.isIdentifier(marketID)) {\n            // Check that we have subscriptions for this market (to prevent memory leaks)\n            if ((_mappedSubscriptions.markets.subscriptionCounts.hasOwnProperty(marketID)) &&\n                (_mappedSubscriptions.markets.subscriptionCounts[marketID] > 0)) {\n                // Update the cache\n                if (_mappedSubscriptions.markets.cache.hasOwnProperty(marketID) === false) {\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.Market.Deleted)) {\n                        return; // If this has the delete flag, ignore\n                    }\n                    // Add this exchange rate to the cache\n                    _mappedSubscriptions.markets.cache[marketID] = message.t;\n                    _logger.debug('Added new Market ' + marketID, _logSource);\n                } else {\n                    // If this has the delete flag, remove from the cache\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.Market.Deleted)) {\n                        delete _mappedSubscriptions.markets.cache[currencyPair];\n                        _logger.debug('Deleted existing Market ' + marketID, _logSource);\n                    } else {\n                        // Update the cache with these tags\n                        var cacheMarket = _mappedSubscriptions.markets.cache[marketID];\n                        for (var k in message.t) {\n                            cacheMarket[k] = message.t[k];\n                        }\n                        _logger.debug('Updated existing Market ' + marketID, _logSource);\n                    }\n                }\n                // Do we have any subscriptions to this market?\n                if (_mappedSubscriptions.markets.callbacks.hasOwnProperty(marketID)) {\n                    fireCallbacks(_mappedSubscriptions.markets.callbacks[marketID], message.t);\n                }\n            }\n        }\n    }\n\n    function handleMsgTypeOpenTradeUpdate(message) {\n        _logger.debug('Handling messsage OpenTradeUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Check that we are subscribed to open trades (to prevent memory leaks)\n        if (_subscriptions.openTrades.subscribed === true) {\n            // Update cache\n            var tradeID = message.t[ETX.clientAPI.Constants.messages.OpenTrade.TradeID];\n            if (_helpers.compare.isIdentifier(tradeID)) {\n                if (_subscriptions.openTrades.cache.hasOwnProperty(tradeID) === false) {\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.OpenTrade.Deleted)) {\n                        return; // If this has the delete flag, ignore\n                    }\n                    // Add this open trade to the cache\n                    _subscriptions.openTrades.cache[tradeID] = message.t;\n                    _logger.debug('Added new OpenTrade ' + tradeID, _logSource);\n                } else {\n                    // If this has the delete flag, remove from the cache\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.OpenTrade.Deleted)) {\n                        delete _subscriptions.openTrades.cache[tradeID];\n                        _logger.debug('Deleted existing OpenTrade ' + tradeID, _logSource);\n                    } else {\n                        // Update the fields in the cache\n                        var trade = _subscriptions.openTrades.cache[tradeID];\n                        for (var k in message.t) {\n                            trade[k] = message.t[k];\n                        }\n                        _logger.debug('Updated existing OpenTrade ' + tradeID, _logSource);\n                    }\n                }\n\n                // Fire callbacks\n                fireCallbacks(_subscriptions.openTrades.callbacks, message.t);\n            }\n        }\n    }\n\n    function handleMsgTypePortfolioRequestResponse(message) {\n        _logger.debug('Handling messsage PortfolioRequestResponse (\"' + message.T + '\")...', _logSource);\n\n        // Get the UID from the message\n        var uid = message.t[ETX.clientAPI.Constants.messages.PortfolioRequest.UniqueClientIdentifier];\n\n        // Do we have anyone waiting for this search result?\n        if (_mappedDeferredObjs.portfolioRequest.hasOwnProperty(uid)) {\n            // Get deferred object...\n            var defer = _mappedDeferredObjs.portfolioRequest[uid];\n\n            // Remove deferred object...\n            delete _mappedDeferredObjs.portfolioRequest[uid];\n\n            // Resolve deferred object...\n            defer.resolve(_api, message.t);\n\n            _logger.debug('PortfolioRequestResponse (\"' + uid + '\") is complete', _logSource);\n        }\n    }\n\n    function handleMsgTypePortfolioUpdate(message) {\n        _logger.debug('Handling messsage PortfolioUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Fire callbacks registered for (high-level) portfolio updates\n        fireCallbacks(_mappedSubscriptions.portfolios.callbacks.$any, message);\n\n        // Do we have a specific portfolio subscription?\n        var portfolioID = message.t[ETX.clientAPI.Constants.messages.Portfolio.PortfolioID];\n        if (_helpers.compare.isIdentifier(portfolioID)) {\n            // Check that we have subscriptions for this portfolio (to prevent memory leaks)\n            if ((_mappedSubscriptions.portfolios.subscriptionCounts.hasOwnProperty(portfolioID)) &&\n                (_mappedSubscriptions.portfolios.subscriptionCounts[portfolioID] > 0)) {\n                // Update the cache\n                if (_mappedSubscriptions.portfolios.cache.hasOwnProperty(portfolioID) === false) {\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.Portfolio.Deleted)) {\n                        return; // If this has the delete flag, ignore\n                    }\n                    // Add this exchange rate to the cache\n                    _mappedSubscriptions.portfolios.cache[portfolioID] = message.t;\n                    _logger.debug('Added new Portfolio ' + portfolioID, _logSource);\n                } else {\n                    // If this has the delete flag, remove from the cache\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.Portfolio.Deleted)) {\n                        delete _mappedSubscriptions.portfolios.cache[portfolioID];\n                        _logger.debug('Deleted existing Portfolio ' + portfolioID, _logSource);\n                    } else {\n                        // Update the cache with these tags\n                        var cachedPortfoliosMkts = _mappedSubscriptions.portfolios.cache[portfolioID];\n                        for (var k in message.t) {\n                            if (k !== ETX.clientAPI.Constants.messages.Portfolio.MarketsArray) {\n                                cachedPortfoliosMkts[k] = message.t[k];\n                            } else {\n                                // We cannot blindly copy the fields, we have to check each action type\n                                var cachedPortfoliosMkts = cachedPortfoliosMkts[k],\n                                    modifiedPortfolioMkts = message.t[ETX.clientAPI.Constants.messages.Portfolio.MarketsArray];\n                                if ($.isArray(modifiedPortfolioMkts)) {\n                                    for (var i in modifiedPortfolioMkts) {\n                                        var modifiedPortfolioMkt = modifiedPortfolioMkts[i];\n                                        if (modifiedPortfolioMkt) {\n                                            var action = modifiedPortfolioMkt[ETX.clientAPI.Constants.messages.Portfolio.MarketsArray_Object.Action];\n                                            switch (action) {\n                                                case ETX.clientAPI.Constants.messages.Portfolio.MarketsArray_Object.Action_Added:\n                                                    // Add new market to cached array\n                                                    if (modifiedPortfolioMkts.indexOf(modifiedPortfolioMkt) == -1) {\n                                                        modifiedPortfolioMkts.push(modifiedPortfolioMkt);\n                                                    }\n                                                    break;\n\n                                                case ETX.clientAPI.Constants.messages.Portfolio.MarketsArray_Object.Action_Updated:\n                                                case ETX.clientAPI.Constants.messages.Portfolio.MarketsArray_Object.Action_Deleted:\n                                                    // Find the existing market within cached array\n                                                    var modifiedPortfolioMktID = modifiedPortfolioMkt[ETX.clientAPI.Constants.messages.Portfolio.MarketsArray_Object.MarketID];\n                                                    for (var j in cachedPortfoliosMkts) {\n                                                        var cachedPortfolioMkt = cachedPortfoliosMkts[j],\n                                                            cachedPortfolioMktID = cachedPortfolioMkt[ETX.clientAPI.Constants.messages.Portfolio.MarketsArray_Object.MarketID];\n                                                        if (cachedPortfolioMktID === modifiedPortfolioMktID) {\n                                                            // Found it\n                                                            if (action === ETX.clientAPI.Constants.messages.Portfolio.MarketsArray_Object.Action_Updated) {\n                                                                // Update the cached market's tags\n                                                                for (var p in modifiedPortfolioMkt) {\n                                                                    cachedPortfolioMkt[p] = modifiedPortfolioMkt[p];\n                                                                }\n                                                            }\n                                                            if (action === ETX.clientAPI.Constants.messages.Portfolio.MarketsArray_Object.Action_Deleted) {\n                                                                // Delete existing market from array\n                                                                cachedPortfoliosMkts.splice(j, 1);\n                                                            }\n                                                            break;\n                                                        }\n                                                    }\n                                                    break;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        _logger.debug('Updated existing Portfolio ' + portfolioID, _logSource);\n                    }\n                }\n                // Do we have any subscriptions to this market?\n                if (_mappedSubscriptions.portfolios.callbacks.hasOwnProperty(portfolioID)) {\n                    fireCallbacks(_mappedSubscriptions.portfolios.callbacks[portfolioID], message.t);\n                }\n            }\n        }\n    }\n\n    function handleMsgTypePriceAlertResponse(message) {\n        _logger.debug('Handling messsage PriceAlertResponse (\"' + message.T + '\")...', _logSource);\n\n        // Get the UID from the message\n        var uid = message.t[ETX.clientAPI.Constants.messages.PriceAlertResponse.UniqueClientIdentifier],\n            result = message.t[ETX.clientAPI.Constants.messages.PriceAlertResponse.Result],\n            defer;\n\n        if (_mappedDeferredObjs.priceAlertRequest.hasOwnProperty(uid)) {\n            defer = _mappedDeferredObjs.priceAlertRequest[uid];\n\n            switch (result) {\n                case ETX.clientAPI.Constants.messages.PriceAlertResponse.Result_Success:\n                    defer.resolve(_api, message.t);\n                    break;\n\n                default:\n                case ETX.clientAPI.Constants.messages.PriceAlertResponse.Result_Failure:\n                    defer.reject(_api, message.t);\n                    break;\n            }\n\n            // Remove deferred object...\n            delete _mappedDeferredObjs.priceAlertRequest[uid];\n\n            _logger.debug('PriceAlertResponse (\"' + uid + '\") with result (\"' +result + '\") is complete', _logSource);\n        }\n    }\n\n    function handleMsgTypePriceAlertUpdate(message) {\n        _logger.debug('Handling messsage PriceAlertUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Check that we are subscribed to price alerts (to prevent memory leaks)\n        if (_subscriptions.priceAlerts.subscribed === true) {\n            // Update cache\n            var alertID = message.t[ETX.clientAPI.Constants.messages.PriceAlert.AlertID];\n            if (_helpers.compare.isIdentifier(alertID)) {\n                if (_subscriptions.priceAlerts.cache.hasOwnProperty(alertID) === false) {\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.PriceAlert.Deleted)) {\n                        return; // If this has the delete flag, ignore\n                    }\n                    // Add this price alert to the cache\n                    _subscriptions.priceAlerts.cache[alertID] = message.t;\n                    _logger.debug('Added new PriceAlert ' + alertID, _logSource);\n                } else {\n                    // If this has the delete flag, remove from the cache\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.PriceAlert.Deleted)) {\n                        delete _subscriptions.priceAlerts.cache[alertID];\n                        _logger.debug('Deleted existing PriceAlert ' + alertID, _logSource);\n                    } else {\n                        // Update the fields in the cache\n                        var priceAlert = _subscriptions.priceAlerts.cache[alertID];\n                        for (var k in message.t) {\n                            priceAlert[k] = message.t[k];\n                        }\n                        _logger.debug('Updated existing PriceAlert ' + alertID, _logSource);\n                    }\n                }\n\n                // Fire callbacks\n                fireCallbacks(_subscriptions.priceAlerts.callbacks, message.t);\n            }\n        }\n    }\n\n    function handleMsgTypeProcessedOrderUpdate(message) {\n        _logger.debug('Handling messsage ProcessedOrderUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Check that we are subscribed to processed orders (to prevent memory leaks)\n        if (_subscriptions.processedOrders.subscribed === true) {\n            // Update cache\n            var orderID = message.t[ETX.clientAPI.Constants.messages.ProcessedOrder.OrderID];\n            if (_helpers.compare.isIdentifier(orderID)) {\n                if (_subscriptions.processedOrders.cache.hasOwnProperty(orderID) === false) {\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.ProcessedOrder.Deleted)) {\n                        return; // If this has the delete flag, ignore\n                    }\n                    // Add this processed order to the cache\n                    _subscriptions.processedOrders.cache[orderID] = message.t;\n                    _logger.debug('Added new ProcessedOrder ' + orderID, _logSource);\n                } else {\n                    // If this has the delete flag, remove from the cache\n                    if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.ProcessedOrder.Deleted)) {\n                        delete _subscriptions.processedOrders.cache[orderID];\n                        _logger.debug('Deleted existing ProcessedOrder ' + orderID, _logSource);\n                    } else {\n                        // Update the fields in the cache\n                        var order = _subscriptions.processedOrders.cache[orderID];\n                        for (var k in message.t) {\n                            order[k] = message.t[k];\n                        }\n                        _logger.debug('Updated existing ProcessedOrder ' + orderID, _logSource);\n                    }\n                }\n\n                // Fire callbacks\n                fireCallbacks(_subscriptions.processedOrders.callbacks, message.t);\n            }\n        }\n    }\n\n    function handleMsgTypeSubAccountUpdate(message) {\n        _logger.debug('Handling messsage SubAccountUpdate (\"' + message.T + '\")...', _logSource);\n\n        // Check that we are subscribed to client accounts (to prevent memory leaks)\n        if (_subscriptions.account.subscribed === true) {\n            if (_subscriptions.account.cache) {\n                // Find the client account in the cache\n                var account = _subscriptions.account.cache;\n                if (account) {\n                    if (account.hasOwnProperty(ETX.clientAPI.Constants.messages.Account.SubAccountArray)) {\n                        // Find the sub-account in the account cache and update it\n                        var accountID = (message.t[ETX.clientAPI.Constants.messages.SubAccount.AccountID] || account[ETX.clientAPI.Constants.messages.Account.AccountID]),\n                            subAccountID = message.t[ETX.clientAPI.Constants.messages.SubAccount.SubAccountID],\n                            deletedSubAccount = (message.t[ETX.clientAPI.Constants.messages.SubAccount.Deleted] === true),\n                            subAccountArray = account[ETX.clientAPI.Constants.messages.Account.SubAccountArray],\n                            subAccount;\n\n                        for (var i = 0; i < subAccountArray.length; i++) {\n                            if (subAccountArray[i].hasOwnProperty(ETX.clientAPI.Constants.messages.SubAccount.SubAccountID)) {\n                                if (subAccountArray[i][ETX.clientAPI.Constants.messages.SubAccount.SubAccountID] === subAccountID) {\n                                    // We've found the cached sub-account\n                                    subAccount = subAccountArray[i];\n                                    if (deletedSubAccount) {\n                                        // If this has the delete flag, remove from the cache\n                                        subAccountArray.splice(i, 1);\n                                        _logger.debug('Deleted existing SubAccount ' + subAccountID + ' for Account ' + accountID, _logSource);\n                                    } else {\n                                        // Update it\n                                        for (var k in message.t) {\n                                            subAccount[k] = message.t[k];\n                                        }\n                                        _logger.debug('Updated existing SubAccount ' + subAccountID + ' for Account ' + accountID, _logSource);\n                                    }\n                                    break;\n                                }\n                            }\n                        }\n\n                        // If we've not found it, so update it if its not a deletion\n                        if (subAccount === undefined) {\n                            if (deletedSubAccount === false) {\n                                subAccountArray.push(message.t);\n                                _logger.debug('Added new SubAccount ' + subAccountID + ' for Account ' + accountID, _logSource);\n                            }\n                        }\n                    }\n\n                    // Create a (minimal) account object to wrap the subaccount update\n                    var updateTags = {};\n                    updateTags[ETX.clientAPI.Constants.messages.Account.AccountID] = accountID;\n                    updateTags[ETX.clientAPI.Constants.messages.Account.SubAccountArray] = [message.t];\n\n                    // Fire callbacks\n                    fireCallbacks(_subscriptions.account.callbacks, updateTags);\n                }\n            }\n        }\n    }\n\n    function handleMsgTypeTradeQuoteResponse(message) {\n        _logger.debug('Handling messsage TradeQuoteResponse (\"' + message.T + '\")...', _logSource);\n\n        // Get the UID from the message\n        var uid = message.t[ETX.clientAPI.Constants.messages.TradeQuoteResponse.UniqueClientIdentifier],\n            quoteStatus = message.t[ETX.clientAPI.Constants.messages.TradeQuoteResponse.QuoteStatus],\n            defer,\n            finished = false;\n\n        // Check if this execution report is for a trade request\n        if (_mappedDeferredObjs.tradeQuoteRequest.hasOwnProperty(uid)) {\n            defer = _mappedDeferredObjs.tradeQuoteRequest[uid];\n\n            switch (quoteStatus) {\n                default:\n                case ETX.clientAPI.Constants.messages.TradeQuoteResponse.QuoteStatus_DealerClaim:\n                    defer.notify(_api, message.t);\n                    _logger.debug('TradeQuoteResponse (\"' + uid + '\") with quote status (\"' + quoteStatus + '\") is pending...', _logSource);\n                    break;\n\n                case ETX.clientAPI.Constants.messages.TradeQuoteResponse.QuoteStatus_DealerQuoted:\n                    defer.resolve(_api, message.t);\n                    finished = true;\n                    break;\n\n                case ETX.clientAPI.Constants.messages.TradeQuoteResponse.QuoteStatus_DealerReject:\n                case ETX.clientAPI.Constants.messages.TradeQuoteResponse.QuoteStatus_Timeout:\n                    defer.reject(_api, message.t);\n                    finished = true;\n                    break;\n            }\n\n            // Are we finsihed with this report?\n            if (finished) {\n                // Remove deferred object...\n                delete _mappedDeferredObjs.tradeQuoteRequest[uid];\n                _logger.debug('TradeQuoteResponse (\"' + uid + '\") with quote status (\"' + quoteStatus + '\") is complete', _logSource);\n            }\n        }\n    }\n\n    function handleMsgTypeUserSettingsResponse(message) {\n        _logger.debug('Handling messsage UserSettingsResponse (\"' + message.T + '\")...', _logSource);\n\n        // Get the UID from the message\n        var uid = message.t[ETX.clientAPI.Constants.messages.UserSettingsResponse.UniqueClientIdentifier];\n\n        // Do we have anyone waiting for this search result?\n        if (_mappedDeferredObjs.userSettingsRequest.hasOwnProperty(uid)) {\n            // Get deferred object...\n            var defer = _mappedDeferredObjs.userSettingsRequest[uid],\n                result = message.t[ETX.clientAPI.Constants.messages.UserSettingsResponse.Result];\n\n            // Remove deferred object...\n            delete _mappedDeferredObjs.userSettingsRequest[uid];\n\n            switch (result) {\n                case ETX.clientAPI.Constants.messages.UserSettingsResponse.Result_Success:\n                    // Resolve deferred object...\n                    defer.resolve(_api, message.t);\n                    break;\n\n                default:\n                case ETX.clientAPI.Constants.messages.UserSettingsResponse.Result_Failure:\n                    // Reject deferred object...\n                    defer.reject(_api, message.t);\n                    break;\n            }\n\n            _logger.debug('UserSettingsResponse (\"' + uid + '\") with result (\"' + result + '\") is complete', _logSource);\n        }\n    }\n\n    function handleMsgTypeWorkingOrderUpdate(message) {\n        // Check that we are subscribed to working orders (to prevent memory leaks)\n        if (_subscriptions.workingOrders.subscribed === true) {\n            // Update cache\n            var orderID = message.t[ETX.clientAPI.Constants.messages.WorkingOrder.OrderID];\n            var order = _subscriptions.workingOrders.cache[orderID];\n            if (order === undefined) {\n                // Add this working order to the cache\n                _subscriptions.workingOrders.cache[orderID] = message.t;\n            } else {\n                // If this has the delete flag, remove from the cache\n                if (message.t.hasOwnProperty(ETX.clientAPI.Constants.messages.WorkingOrder.Deleted)) {\n                    delete _subscriptions.workingOrders.cache[orderID];\n                } else {\n                    // Update the fields in the cache\n                    for (var k in message.t) {\n                        order[k] = message.t[k];\n                    }\n                }\n            }\n\n            // Fire callbacks\n            fireCallbacks(_subscriptions.workingOrders.callbacks, message.t);\n        }\n    }\n\n    /**\n     * Indicates whether an authenticated session has established with the server and is currently active.\n     *\n     * @method isConnected\n     * @returns {Boolean} - If true, indicates that an active session is established with the server.\n     */\n    function isConnected() {\n        return (_session && _session.isConnected());\n    }\n\n    /**\n     * Stops any session currently established with the server.\n     *\n     * @method logOff\n     * @returns {void}\n     */\n    function logOff() {\n        // Clear all (session specific) deferred objects...\n        for (var requestType in _mappedDeferredObjs) {\n            _mappedDeferredObjs[requestType] = {};\n        }\n\n        if (_session) {\n            if (_session.isConnected()) {\n                _logger.debug('Logging off...', _logSource);\n\n                // Create and send logOff message...\n                var msg = ETX.clientAPI.Messages.createLogOffMessage();\n                send(msg);\n\n                _session.stop();\n\n                raiseLogOffEvent(ETX.clientAPI.Constants.messages.LogOffResponse.ReasonCode_UserLoggedOut, 'Log off requested');\n            }\n\n            destroySession();\n        }\n    }\n\n    /**\n     * Attempts to establish a session with the Client API server and log on with the credentials provided. \n     * \n     * @method logOn\n     * @param {String} username - Client account username.\n     * @param {String} password - Client account password.\n     * @param {String} [brokerID] - (Optional) Broker unique identifier for client account.\n     * @returns {void}\n     */\n    function logOn(username, password, brokerID) {\n        _logger.debug('Logging on (with credentials)...', _logSource);\n        start(username, password, brokerID, '', '');\n    }\n\n    /* Attempts to establish a session with the Client API server and log on with the authentication key provided. \n    * \n    * @method logOnWithAuthKey\n    * @param {String} username - Client account username.\n    * @param {String} authenticationKey - Unique server generated authentication key.\n    * @param {String} [brokerID] - (Optional) Broker unique identifier for client account.\n    * @returns {void}\n     */\n    function logOnWithAuthKey(username, authenticationKey, brokerID) {\n        _logger.debug('Logging on (with authentication Key)...', _logSource);\n        start(username,'' , brokerID, '', authenticationKey);\n    }\n\n    /**\n     * Attempts to establish a session with the Client API server and anonymously log on with the anonymity token provided.   \n     * \n     * @method logOnAnonymously\n     * @param {String} anonymityToken - Unique client generated anonymity token.\n     * @returns {void}\n     */\n    function logOnAnonymously(anonymityToken) {\n        _logger.debug('Logging on (anonymously)...', _logSource);\n        start('', '', '', anonymityToken,'');\n    }\n\n    function onConnect(session, event) {\n        if (_session) {\n            _logger.debug('Connection established, logging on...', _logSource);\n\n            // Create and send logon message...\n            var msg = ETX.clientAPI.Messages.createLogOnMessage(_username, _passwordHash, _brokerID, _anonymityToken, _api.version, _authenticationKey);\n            send(msg);\n\n            // Start the timer\n            _logOnTimeoutTimer = setTimeout(function () {\n                _session = undefined;\n\n                raiseLogOffEvent(ETX.clientAPI.Constants.messages.LogOffResponse.ReasonCode_TimedOut, 'Log on attempt to server timed out');\n            }, _logonTimeoutInterval);\n\n            // fire onConnect callback\n            fireCallbacks(_callbacks.connect);\n        }\n    }\n\n    function onDisconnect(session, message, event) {\n        clearLogOnTimeout();\n\n        fireCallbacks(_callbacks.disconnect, message);\n    }\n\n    function onError(session, errorMessage, errorData) {\n        fireCallbacks(_callbacks.errors, [errorMessage, errorData]);\n    }\n\n    function onMessage(session, message) {\n        var messageType = message.T;\n        var messageTags = message.t;\n\n        // Switch on mesage type\n        switch (messageType) {\n            case ETX.clientAPI.Constants.messages.Account.MessageType:\n                handleMsgTypeAccountUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.AccountTransaction.MessageType:\n                handleMsgTypeAccountTransactionUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.AggregateAccount.MessageType:\n                handleMsgTypeAggregateAccountUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.ClosedTrade.MessageType:\n                handleMsgTypeClosedTradeUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.Error.MessageType:\n                handleMsgTypeError(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.ExchangeRate.MessageType:\n                handleMsgTypeExchangeRateUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.ExecutionReport.MessageType:\n                handleMsgTypeExecutionReport(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.GroupMarkets.MessageType:\n                handleMsgTypeGroupMarketsUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.GroupSearchResponse.MessageType:\n                handleMsgTypeGroupSearchResponse(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.HistoricTrade.MessageType:\n                handleMsgTypeHistoricTradeUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.LogOffResponse.MessageType:\n                handleMsgTypeLogOffResponse(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.LogOnResponse.MessageType:\n                handleMsgTypeLogOnResponse(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.Market.MessageType:\n                handleMsgTypeMarketUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.MarketSearchResponse.MessageType:\n                handleMsgTypeMarketSearchResponse(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.OpenTrade.MessageType:\n                handleMsgTypeOpenTradeUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.Portfolio.MessageType:\n                handleMsgTypePortfolioUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.PriceAlert.MessageType:\n                handleMsgTypePriceAlertUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.PriceAlertResponse.MessageType:\n                handleMsgTypePriceAlertResponse(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.ProcessedOrder.MessageType:\n                handleMsgTypeProcessedOrderUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.SubAccount.MessageType:\n                handleMsgTypeSubAccountUpdate(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.TradeQuoteResponse.MessageType:\n                handleMsgTypeTradeQuoteResponse(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.UserSettingsResponse.MessageType:\n                handleMsgTypeUserSettingsResponse(message);\n                break;\n\n            case ETX.clientAPI.Constants.messages.WorkingOrder.MessageType:\n                handleMsgTypeWorkingOrderUpdate(message);\n                break;\n\n            default:\n                _logger.warning('Unhandled messsage (\"' + messageType + '\") | ' + JSON.stringify(message), _logSource);\n                break;\n        }\n    }\n\n    function onQoS(session, ttl) {\n        fireCallbacks(_callbacks.QoS, ttl);\n    }\n\n    /**\n     * Overwrites the current user settings for the account on the server with the settings provided.\n     *\n     * @method overwriteUserSettings\n     * @param {Object} userSettings - Array of Objects, each containing the user setting properties defined in `ETX.clientAPI.Constants.messages.UserSettingsRequest.UserSettingsArray_Object`.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function overwriteUserSettings(userSettings) {\n        // Generate unique client identifier...\n        var uid = ETX.clientAPI.Messages.generateUniqueClientIdentifier(ETX.clientAPI.Constants.messages.UserSettingsRequest.MessageType),\n            defer = new $.Deferred(),\n            promise = defer.promise();\n\n        if (_session) {\n            _logger.debug('Sending (overwrite) UserSettingsRequest  (\"' + uid + '\")...', _logSource);\n\n            _mappedDeferredObjs.userSettingsRequest[uid] = defer;\n\n            var msg = ETX.clientAPI.Messages.createUserSettingsRequestMessage(\n                uid, ETX.clientAPI.Constants.messages.UserSettingsRequest.UserSettingsRequestType_Overwrite, userSettings);\n            send(msg);\n        } else {\n            defer.reject(_api, 'No session');\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n\n    function raiseLogOffEvent(reasonCode, reasonText) {\n        // Spoof log off response message...\n        var message = {\n            T: ETX.clientAPI.Constants.messages.LogOffResponse.MessageType,\n            t: {}\n        };\n        message.t[ETX.clientAPI.Constants.messages.LogOffResponse.ReasonCode] = reasonCode;\n        message.t[ETX.clientAPI.Constants.messages.LogOffResponse.Text] = reasonText;\n        handleMsgTypeLogOffResponse(message);\n    }\n\n    /**\n     * Registers a callback handler to be invoked whenever the session connects to the server.\n     *\n     * @method registerForConnect\n     * @param {Function} callback - The callback handler to register for invocation whenever the session connects to the server.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function registerForConnect(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.connect.has(callback) === false) {\n                _callbacks.connect.add(callback);\n                _logger.debug('Registered for connect', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Registers a callback handler to be invoked whenever the session disconnects from the server.\n     *\n     * @method registerForDisconnect\n     * @param {Function} callback - The callback handler to register for invocation whenever the session disconnects from the server.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function registerForDisconnect(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.disconnect.has(callback) === false) {\n                _callbacks.disconnect.add(callback);\n                _logger.debug('Registered for disconnect', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Registers a callback handler to be invoked whenever an internal/server error is published.\n     *\n     * @method registerForErrors\n     * @param {Function} callback - The callback handler to register for invocation whenever an internal/server error is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {String} callback.errorMessage - Error message.\n     * @param {Object|Array|Error} [callback.errorData] - (Optional) Additional error data to accompany the error message.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function registerForErrors(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.errors.has(callback) === false) {\n                _callbacks.errors.add(callback);\n                _logger.debug('Registered for errors', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Registers a callback handler to be invoked whenever the account logged off from the session.   \n     * ***NOTE: This will NOT be invoked during `close()` or `destroy()`.***\n     *\n     * @method registerForLogOff\n     * @param {Function} callback - The callback handler to register for invocation whenever a session log off is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.logOffResponse - Object containing the log off details.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function registerForLogOff(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.logOff.has(callback) === false) {\n                _callbacks.logOff.add(callback);\n                _logger.debug('Registered for log off', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Registers a callback handler to be invoked whenever the account logs onto the session.    \n     * ***NOTE: This will NOT be invoked during `close()` or `destroy()`.***\n     *\n     * @method registerForLogOn\n     * @param {Function} callback - The callback handler to register for invocation whenever a session log on is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.logOnResponse - Object containing the log on details.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function registerForLogOn(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.logOn.has(callback) === false) {\n                _callbacks.logOn.add(callback);\n                _logger.debug('Registered for log on', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Registers a callback handler to be invoked whenever the account logs on/off the session.    \n     * ***NOTE: This will NOT be invoked during `close()` or `destroy()`.***\n     *\n     * @method registerForLogOnLogOff\n     * @param {Function} callback - The callback handler to register for invocation whenever a session log on/off is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Boolean} callback.loggedOn - If true, indicates a logged in session, else indicates the session is logged off.\n     * @param {Object} callback.logOnResponseOrLogOffResponse - Object containing the log on/off details.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function registerForLogOnLogOff(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.logOnLogOff.has(callback) === false) {\n                _callbacks.logOnLogOff.add(callback);\n                _logger.debug('Registered for log on/off', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Registers a callback handler to be invoked whenever any market updates are published.    \n     * ***NOTE: This will NOT subscribe to market updates.***\n     *\n     * @method registerForMarketUpdates\n     * @param {Function} callback - The callback handler to register for invocation whenever a market update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.market - Object containing the published market/market prices data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function registerForMarketUpdates(callback) {\n        if ($.isFunction(callback)) {\n            if (_mappedSubscriptions.markets.callbacks.$any.has(callback) === false) {\n                _mappedSubscriptions.markets.callbacks.$any.add(callback);\n                _logger.debug('Registered for (greedy) market updates', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Registers a callback handler to be invoked whenever a response to a polled quality-of-service (QoS) request \n     * is received from the server.\n     *\n     * @method registerForQoS\n     * @param {Function} callback - The callback handler to register for invocation whenever a server QoS response is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Number} callback.ttl - Total number of milliseconds it has taken for the server to respond to a QoS request.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function registerForQoS(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.QoS.has(callback) === false) {\n                _callbacks.QoS.add(callback);\n                _logger.debug('Registered for QoS', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Removes market from the given porfolio\n     *\n     * @method removeMarketFromPortfolio\n     * @param {String} [portfolioID] - Unique identifier of the portfolio.\n     * @param {String} [marketID] - Unique identifier of the market.\n     */\n    function removeMarketFromPortfolio(portfolioID, marketID) {\n        if (_session) {\n            _logger.debug('Sending PortfolioRemoveMarket request...', _logSource);\n\n            var msg = ETX.clientAPI.Messages.createPortfolioRemoveMarketMessage(portfolioID, marketID);\n            send(msg);\n        } \n    }\n\n    /**\n     * Accepts or declines place a pending trade at the re-quoted trade price.\n     *\n     * @method respondToTradeRequote\n     * @param {String} quoteID - Unique identifier of the re-quoted trade price to be accepted or declined.\n     * @param {Boolean} acceptRequote - If true, an attempt to place the pending trade at the re-quoted price will be done, else the re-quoted price will be declined and the pending trade cancelled.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function respondToTradeRequote(quoteID, acceptRequote) {\n        // Generate unique client identifier...\n        var uid = ETX.clientAPI.Messages.generateUniqueClientIdentifier(ETX.clientAPI.Constants.messages.TradeRequoteResponse.MessageType),\n            defer = new $.Deferred(),\n            promise = defer.promise();\n\n        if (_session) {\n            _logger.debug('Sending TradeRequoteResponse  (\"' + uid + '\")...', _logSource);\n\n            // Fire and forget...\n            var msg = ETX.clientAPI.Messages.createTradeRequoteResponseMessage(uid, quoteID, acceptRequote);\n            send(msg);\n            defer.resolve(_api, uid);\n        } else {\n            defer.reject(_api, 'No session');\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n\n    /**\n     * Requests portfolio markets for the given portfolio identifier\n     *\n     * @method requestPortfolio\n     * @param {String} [portfolioID] - Unique identifier of the portfolio.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    /*\n    function requestPortfolio(portfolioID) {\n        // Generate unique client identifier...\n        var uid = ETX.clientAPI.Messages.generateUniqueClientIdentifier(ETX.clientAPI.Constants.messages.PortfolioRequest.MessageType),\n            defer = new $.Deferred(),\n            promise = defer.promise();\n\n        if (_session) {\n            _logger.debug('Sending PortfolioRequest  (\"' + uid + '\")...', _logSource);\n\n            _mappedDeferredObjs.portfolioRequest[uid] = defer;\n\n            var msg = ETX.clientAPI.Messages.createPortfolioRequestMessage(uid, portfolioID);\n            send(msg);\n        } else {\n            defer.reject(_api, 'No session');\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n    */\n\n    /**\n     * Searches for groups matching the parent group identifier (if provided).\n     *\n     * @method searchGroups\n     * @param {String} [parentGroupID] - (Optional) Unique identifier of the parent group.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function searchGroups(parentGroupID) {\n        // Generate unique client identifier...\n        var uid = ETX.clientAPI.Messages.generateUniqueClientIdentifier(ETX.clientAPI.Constants.messages.GroupSearch.MessageType),\n            defer = new $.Deferred(),\n            promise = defer.promise();\n\n        if (_session) {\n            _logger.debug('Sending GroupSearch  (\"' + uid + '\")...', _logSource);\n\n            _mappedDeferredObjs.groupSearch[uid] = defer;\n\n            var msg = ETX.clientAPI.Messages.createGroupSearchMessage(uid, parentGroupID);\n            send(msg);\n        } else {\n            defer.reject(_api, 'No session');\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n\n    /**\n     * Searches for markets matching the search criteria (and constraint) provided.\n     *\n     * @method searchMarkets\n     * @param {String} searchTerm - Search term used when searching.\n     * @param {String} [searchConstraint] - (Optional) Search constraint defined in `ETX.clientAPI.Constants.messages.MarketSearch` to be applied when searching.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function searchMarkets(searchTerm, searchConstraint) {\n        // Generate unique client identifier...\n        var uid = ETX.clientAPI.Messages.generateUniqueClientIdentifier(ETX.clientAPI.Constants.messages.MarketSearch.MessageType),\n            defer = new $.Deferred(),\n            promise = defer.promise();\n\n        if (_session) {\n            _logger.debug('Sending MarketSearch  (\"' + uid + '\")...', _logSource);\n\n            _mappedDeferredObjs.marketSearch[uid] = defer;\n\n            var msg = ETX.clientAPI.Messages.createMarketSearchMessage(uid, searchTerm, searchConstraint);\n            send(msg);\n        } else {\n            defer.reject(_api, 'No session');\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n\n    /**\n     * Sends one (or more) JSON message(s) to the server.\n     *\n     * @method send\n     * @param {Object|String|Array} message - Single (or array of) JSON messages object(s) or string(s) to send.\n     * @returns {void}\n     */\n    function send(message) {\n        if (_session) {\n            if (message) {\n                if ($.isArray(message)) {\n                    var messages = message;\n                    for (var i = 0; i < messages.length; i++) {\n                        message = messages[i];\n                        if (message) {\n                            _session.send(message);\n                        }\n                    }\n                } else {\n                    _session.send(message);\n                }\n            }\n        }\n    }\n\n    /**\n     * Sends an order request JSON message to the server.\n     *\n     * @method sendOrderRequest\n     * @param {ETX.clientAPI.requests.OrderRequest} orderRequest - `ETX.clientAPI.requests.OrderRequest` object used to build the order request JSON message.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function sendOrderRequest(orderRequest) {\n        var defer = new $.Deferred(),\n            promise = defer.promise(),\n            execRpt = {};\n\n        if (_session) {\n            if (orderRequest) {\n                // Generate unique client identifier...\n                orderRequest.transactionTime = new Date().toISOString();\n                if (ETX.clientAPI.Helpers.compare.isIdentifier(orderRequest.uniqueClientIdentifier) == false) {\n                    orderRequest.uniqueClientIdentifier = ETX.clientAPI.Messages.buildUniqueClientIdentifier(ETX.clientAPI.Constants.messages.OrderRequest.MessageType, orderRequest.transactionTime);\n                }\n\n                _logger.debug('Sending OrderRequest  (\"' + orderRequest.uniqueClientIdentifier + '\")...', _logSource);\n\n                // Send the order request\n                var msg = ETX.clientAPI.Messages.createOrderRequestMessage(orderRequest.uniqueClientIdentifier, orderRequest.transactionTime, orderRequest);\n\n                _mappedDeferredObjs.orderRequest[orderRequest.uniqueClientIdentifier] = {\n                    request: msg,\n                    defer: defer\n                };\n\n                send(msg);\n            } else {\n                defer.reject(_api, (execRpt[ETX.clientAPI.Constants.messages.ExecutionReport.Text] = 'No order request'));\n            }\n        } else {\n            defer.reject(_api, (execRpt[ETX.clientAPI.Constants.messages.ExecutionReport.Text] = 'No session'));\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n\n    /**\n     * Sends an price alert request JSON message to the server.\n     *\n     * @method sendPriceAlertRequest\n     * @param {ETX.clientAPI.requests.PriceAlertRequest} priceAlertRequest - `ETX.clientAPI.requests.PriceAlertRequest` object used to build the price alert request JSON message.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function sendPriceAlertRequest(priceAlertRequest) {\n        var defer = new $.Deferred(),\n            promise = defer.promise(),\n            response = {};\n\n        if (_session) {\n            if (priceAlertRequest) {\n                // Generate unique client identifier...\n                priceAlertRequest.transactionTime = new Date().toISOString();\n                if (ETX.clientAPI.Helpers.compare.isIdentifier(priceAlertRequest.uniqueClientIdentifier) == false) {\n                    priceAlertRequest.uniqueClientIdentifier = ETX.clientAPI.Messages.buildUniqueClientIdentifier(ETX.clientAPI.Constants.messages.PriceAlertRequest.MessageType, priceAlertRequest.transactionTime);\n                }\n                _mappedDeferredObjs.priceAlertRequest[priceAlertRequest.uniqueClientIdentifier] = defer;\n\n                _logger.debug('Sending PriceAlertRequest  (\"' + priceAlertRequest.uniqueClientIdentifier + '\")...', _logSource);\n\n                // Send the price alert request\n                var msg = ETX.clientAPI.Messages.createPriceAlertRequestMessage(priceAlertRequest.uniqueClientIdentifier, priceAlertRequest.transactionTime, priceAlertRequest);\n                send(msg);\n            } else {\n                response[ETX.clientAPI.Constants.messages.PriceAlertResponse.Result] = ETX.clientAPI.Constants.messages.PriceAlertResponse.Result_Failure;\n                response[ETX.clientAPI.Constants.messages.PriceAlertResponse.Text] = 'No price alert request';\n                defer.reject(_api, response);\n            }\n        } else {\n            response[ETX.clientAPI.Constants.messages.PriceAlertResponse.Result] = ETX.clientAPI.Constants.messages.PriceAlertResponse.Result_Failure;\n            response[ETX.clientAPI.Constants.messages.PriceAlertResponse.Text] = 'No session';\n            defer.reject(_api, response);\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n\n    /**\n     * Sends an trade quote request JSON message to the server.\n     *\n     * @method sendTradeQuoteRequest\n     * @param {ETX.clientAPI.requests.TradeQuoteRequest} tradeQuoteRequest - `ETX.clientAPI.requests.TradeQuoteRequest` object used to build the trade quote request JSON message.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function sendTradeQuoteRequest(tradeQuoteRequest) {\n        // Generate unique client identifier...\n        var defer = new $.Deferred(),\n            promise = defer.promise(),\n            quoteRsp = {};\n\n        if (_session) {\n            if (tradeQuoteRequest) {\n                var uid = tradeQuoteRequest.uniqueClientIdentifier;\n                if (_mappedDeferredObjs.tradeQuoteRequest.hasOwnProperty(uid) === false) {\n                    _logger.debug('Sending TradeQuoteRequest  (\"' + uid + '\")...', _logSource);\n\n                    _mappedDeferredObjs.tradeQuoteRequest[uid] = defer;\n\n                    // Send the trade request\n                    var msg = ETX.clientAPI.Messages.createTradeQuoteRequestMessage(uid, tradeQuoteRequest.transactionTime, tradeQuoteRequest);\n                    send(msg);\n                } else {\n                    defer.reject(_api, (quoteRsp[ETX.clientAPI.Constants.messages.TradeQuoteResponse.Text] = 'Duplicate trade quote request ID ' + uid));\n                }\n            } else {\n                defer.reject(_api, (quoteRsp[ETX.clientAPI.Constants.messages.TradeQuoteResponse.Text] = 'No trade quote request'));\n            }\n        } else {\n            defer.reject(_api, (quoteRsp[ETX.clientAPI.Constants.messages.TradeQuoteResponse.Text] = 'No session'));\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n\n    /**\n     * Sends an trade request JSON message to the server.\n     *\n     * @method sendTradeRequest\n     * @param {ETX.clientAPI.requests.TradeRequest} tradeRequest - `ETX.clientAPI.requests.TradeRequest` object used to build the trade request JSON message.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function sendTradeRequest(tradeRequest) {\n        var defer = new $.Deferred(),\n            promise = defer.promise(),\n            execRpt = {};\n\n        if (_session) {\n            if (tradeRequest) {\n                // Generate unique client identifier...\n                tradeRequest.transactionTime = new Date().toISOString();\n                if (ETX.clientAPI.Helpers.compare.isIdentifier(tradeRequest.uniqueClientIdentifier) == false) {\n                    tradeRequest.uniqueClientIdentifier = ETX.clientAPI.Messages.buildUniqueClientIdentifier(ETX.clientAPI.Constants.messages.TradeRequest.MessageType, tradeRequest.transactionTime);\n                }\n\n                _logger.debug('Sending TradeRequest  (\"' + tradeRequest.uniqueClientIdentifier + '\")...', _logSource);\n\n                // Send the trade request\n                var msg = ETX.clientAPI.Messages.createTradeRequestMessage(tradeRequest.uniqueClientIdentifier, tradeRequest.transactionTime, tradeRequest);\n\n                _mappedDeferredObjs.tradeRequest[tradeRequest.uniqueClientIdentifier] = {\n                    request: msg,\n                    defer: defer\n                };\n\n                send(msg);\n            } else {\n                defer.reject(_api, (execRpt[ETX.clientAPI.Constants.messages.ExecutionReport.Text] = 'No trade request'));\n            }\n        } else {\n            defer.reject(_api, (execRpt[ETX.clientAPI.Constants.messages.ExecutionReport.Text] = 'No session'));\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n\n    /**\n     * Sets the root URL used to communicate with the Client API server using standard HTTP protocol.\n     *\n     * @method setWebAPIRootURL\n     * @param {String} webAPIRootURL - URL the Client API server is using to listen to HTTP requests (e.g. 'http://127.0.0.1:81/').\n     * @returns {void}\n     */\n    function setWebAPIRootURL(webAPIRootURL) {\n        _logger.debug('Set Web API root URL to \"' + webAPIRootURL + '\" (was \"' + _webAPIRootURL + '\")', _logSource);\n        _webAPIRootURL = webAPIRootURL;\n    }\n\n    /**\n     * Sets the root URL used to communicate with the Client API server using web sockets protocol over HTTP.\n     *\n     * @method setWebSocketRootURL\n     * @param {String} webSocketRootURL - URL the Client API server is using to listen to web socket requests (e.g. 'ws://127.0.0.1:82').\n     * @returns {void}\n     */\n    function setWebSocketRootURL(webSocketRootURL) {\n        _logger.debug('Set Web Socket root URL to \"' + webSocketRootURL + '\" (was \"' + _webSocketRootURL + '\")', _logSource);\n        _webSocketRootURL = webSocketRootURL;\n    }\n\n    function start(username, password, brokerID, anonymityToken, authenticationKey) {\n        // Stop current session, if one exists...\n        logOff();\n\n        // set the broker ID\n        if ((brokerID !== undefined) && (_brokerID !== brokerID)) {\n            _brokerID = brokerID || ETX.config.defaultBrokerID;\n        }\n\n        // we provide an anonymity token if we're logging in anonymously\n        if (anonymityToken) {\n            _anonymityToken = anonymityToken;\n\n            // set blank username & password\n            _username = '';\n            _passwordHash = '';\n        }\n        else {\n            // accept new login credentials, if provided...\n            if (username && (_username !== username)) {\n                _username = username;\n            }\n            if (password && (password !== '') && (_passwordHash !== password)) {\n                _passwordHash = password;\n            }\n\n            // is there an authentication key\n            if (authenticationKey && (_authenticationKey !== authenticationKey)) {\n                _authenticationKey = authenticationKey;\n            }\n        }\n        \n        if (_anonymityToken || (_username && _passwordHash) || (_username && _authenticationKey)) {\n            // Create and start a new session...\n            createSession();\n            if (_session) {\n                _session.start();\n            }\n        }\n    }\n\n    /**\n     * Subscribes to account (including sub-account) updates for the account with the server and registers \n     * a callback handler to be invoked whenever any account or sub-account updates are published.\n     *\n     * @method subscribeToAccount\n     * @param {Function} callback - The callback handler to register for invocation whenever an account or sub-account update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.account - Object containing the published account data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function subscribeToAccount(callback) {\n        // If anyone has asked for updates, add them to the collection\n        if ($.isFunction(callback)) {\n            if (_subscriptions.account.callbacks.has(callback) === false) {\n                _subscriptions.account.callbacks.add(callback);\n                _subscriptions.account.subscriptionCount += 1;\n                _logger.debug('Subscribed to account (Count = ' +_subscriptions.account.subscriptionCount + ')', _logSource);\n\n                // If we're not subscribed currently for the account, send message off\n                if (!_subscriptions.account.subscribed) {\n                    _logger.debug('Sending account subscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createAccountSubscribeMessage());\n                    _subscriptions.account.subscribed = true;\n                }\n\n                // If we have an account cached then send them out to the callback\n                if (_subscriptions.account.cache) {\n                    try {\n                        callback(_api, _subscriptions.account.cache);\n                    } catch (ex) {\n                        _logger.error('Error firing subscribeToAccount callback | Exception = ' + ex, _logSource, [ex, _subscriptions.account.cache]);\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to account transaction updates for the account with the server and registers \n     * a callback handler to be invoked whenever any account transaction updates are published.\n     *\n     * @method subscribeToAccountTransactions\n     * @param {Function} callback - The callback handler to register for invocation whenever an account transaction update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.accountTransaction - Object containing the published account transaction data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function subscribeToAccountTransactions(callback) {\n        // If anyone has asked for updates, add them to the collection\n        if ($.isFunction(callback)) {\n            if (_subscriptions.accountTransactions.callbacks.has(callback) === false) {\n                _subscriptions.accountTransactions.callbacks.add(callback);\n                _subscriptions.accountTransactions.subscriptionCount += 1;\n                _logger.debug('Subscribed to account transactions (Count = ' + _subscriptions.accountTransactions.subscriptionCount + ')', _logSource);\n\n                // If we're not subscribed currently for the account transaction, send message off\n                if (!_subscriptions.accountTransactions.subscribed) {\n                    _logger.debug('Sending account transactions subscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createAccountTransactionSubscribeMessage());\n                    _subscriptions.accountTransactions.subscribed = true;\n                }\n\n                // If we have any cached account transactions then send them out to the callback\n                for (var i in _subscriptions.accountTransactions.cache) {\n                    try {\n                        callback(_api, _subscriptions.account.cache[i]);\n                    } catch (ex) {\n                        _logger.error('Error firing subscribeToAccountTransactions callback | Exception = ' + ex, _logSource, [ex, _subscriptions.accountTransactions.cache[i]]);\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to aggregate account data with the server and registers a callback handler to be invoked whenever \n     * any aggregate account updates are published.\n     *\n     * @method subscribeToAggregateAccount\n     * @param {Array|String} subAccountIDs - Array of (or an individual) sub-account IDs.\n     * @param {Function} callback - The callback handler to register for invocation whenever an aggregate account update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function subscribeToAggregateAccounts(subAccountIDs, callback) {\n        var subAccountIDsToSendSubscriptionsFor = [],\n            registeredCallbackCount = 0;\n        if ($.isFunction(callback)) {\n            if ($.isArray(subAccountIDs) === false) {\n                subAccountIDs = [subAccountIDs];\n            }\n            for (var i = 0; i < subAccountIDs.length; i++) {\n                var subAccountID = (subAccountIDs[i] || '');\n                if (_helpers.compare.isIdentifier(subAccountID)) {\n                    if (_mappedSubscriptions.aggregateAccounts.callbacks.hasOwnProperty(subAccountID) === false) {\n                        _mappedSubscriptions.aggregateAccounts.callbacks[subAccountID] = $.Callbacks('unique');\n                    }\n                    if (_mappedSubscriptions.aggregateAccounts.callbacks[subAccountID].has(callback) === false) {\n                        _mappedSubscriptions.aggregateAccounts.callbacks[subAccountID].add(callback);\n                        registeredCallbackCount += 1;\n\n                        // If we aren't already subscribed, send off subscription message and add this currency pair to \n                        // our list of subscribed currency pairs\n                        if (_mappedSubscriptions.aggregateAccounts.subscriptionCounts.hasOwnProperty(subAccountID) === false) {\n                            _mappedSubscriptions.aggregateAccounts.subscriptionCounts[subAccountID] = 1;\n                            // Add this aggregate account to list that we'll ask for subscriptions for\n                            subAccountIDsToSendSubscriptionsFor.push(subAccountID);\n                            _logger.debug('Subscribed to aggregate account ' + subAccountID + ' (Count = ' + _mappedSubscriptions.aggregateAccounts.subscriptionCounts[subAccountID] + ')', _logSource);\n                        } else {\n                            _mappedSubscriptions.aggregateAccounts.subscriptionCounts[subAccountID] += 1;\n                            _logger.debug('Subscribed to aggregate account ' + subAccountID + ' (Count = ' + _mappedSubscriptions.aggregateAccounts.subscriptionCounts[subAccountID] + ')', _logSource);\n                            // If we have a cache of this aggregate account, return what we have at the moment\n                            if (_mappedSubscriptions.aggregateAccounts.cache.hasOwnProperty(subAccountID)) {\n                                try {\n                                    callback(_api, _mappedSubscriptions.aggregateAccounts.cache[subAccountID]);\n                                } catch (ex) {\n                                    _logger.error('Error firing subscribeToAggregateAccounts callback | Exception = ' + ex, _logSource, [ex, _mappedSubscriptions.aggregateAccounts.cache[subAccountID]]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // If any aggregate account need to be subscribed to\n            if (subAccountIDsToSendSubscriptionsFor.length > 0) {\n                _logger.debug('Sending aggregate accounts subscribe request(s) for ' + subAccountIDsToSendSubscriptionsFor, _logSource);\n                send(ETX.clientAPI.Messages.createAggregateAccountSubscribeMessage(subAccountIDsToSendSubscriptionsFor));\n            }\n\n            if (registeredCallbackCount === subAccountIDs.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to closed trade updates for the account with the server and registers \n     * a callback handler to be invoked whenever any closed trade updates are published.\n     *\n     * @method subscribeToClosedTrades\n     * @param {Function} callback - The callback handler to register for invocation whenever an closed trade update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.closedTrade - Object containing the published closed trade data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function subscribeToClosedTrades(callback) {\n        // If anyone has asked for updates, add them to the collection\n        if ($.isFunction(callback)) {\n            if (_subscriptions.closedTrades.callbacks.has(callback) === false) {\n                _subscriptions.closedTrades.callbacks.add(callback);\n                _subscriptions.closedTrades.subscriptionCount += 1;\n                _logger.debug('Subscribed to closed trades (Count = ' + _subscriptions.closedTrades.subscriptionCount + ')', _logSource);\n\n                // If we're not subscribed currently for closed trades, send message off\n                if (!_subscriptions.closedTrades.subscribed) {\n                    _logger.debug('Sending closed trades subscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createClosedTradesSubscribeMessage());\n                    _subscriptions.closedTrades.subscribed = true;\n                }\n\n                // If we have any cached closed trades then send them out to the callback\n                for (var i in _subscriptions.closedTrades.cache) {\n                    try {\n                        callback(_api, _subscriptions.closedTrades.cache[i]);\n                    } catch (ex) {\n                        _logger.error('Error firing subscribeToClosedTrades callback | Exception = ' + ex, _logSource, [ex, _subscriptions.closedTrades.cache[i]]);\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to specific currency pair exchange rate updates with the server and registers a callback \n     * handler to be invoked whenever any updates for those specific currency pair's exchange rates are published.\n     *\n     * @method subscribeToExchangeRates\n     * @param {Array|String} currencyPairs - Array of (or an individual) currency pairs.\n     * @param {Function} callback - The callback handler to register for invocation whenever a currency pair's exchange rate update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.exchangeRate - Object containing the published currency pair exchange price data.\n     * @returns {Boolean} - If true, indicates that all callback handlers were successfully registered.\n     */\n    function subscribeToExchangeRates(currencyPairs, callback) {\n        var currencyPairsToSendSubscriptionsFor = [],\n            registeredCallbackCount = 0;\n        if ($.isFunction(callback)) {\n            if ($.isArray(currencyPairs) === false) {\n                currencyPairs = [currencyPairs];\n            }\n            for (var i = 0; i < currencyPairs.length; i++) {\n                var currencyPair = (currencyPairs[i] || '').toUpperCase();\n                if (currencyPair && currencyPair.length === 6) {\n                    if (_mappedSubscriptions.exchangeRates.callbacks.hasOwnProperty(currencyPair) === false) {\n                        _mappedSubscriptions.exchangeRates.callbacks[currencyPair] = $.Callbacks('unique');\n                    }\n                    if (_mappedSubscriptions.exchangeRates.callbacks[currencyPair].has(callback) === false) {\n                        _mappedSubscriptions.exchangeRates.callbacks[currencyPair].add(callback);\n                        registeredCallbackCount += 1;\n\n                        // If we aren't already subscribed, send off subscription message and add this currency pair to \n                        // our list of subscribed currency pairs\n                        if (_mappedSubscriptions.exchangeRates.subscriptionCounts.hasOwnProperty(currencyPair) === false) {\n                            _mappedSubscriptions.exchangeRates.subscriptionCounts[currencyPair] = 1;\n                            // Add this exchange rate to list that we'll ask for subscriptions for\n                            currencyPairsToSendSubscriptionsFor.push(currencyPair);\n                            _logger.debug('Subscribed to exchange rate ' + currencyPair + ' (Count = ' + _mappedSubscriptions.exchangeRates.subscriptionCounts[currencyPair] + ')', _logSource);\n                        } else {\n                            _mappedSubscriptions.exchangeRates.subscriptionCounts[currencyPair]+= 1;\n                            _logger.debug('Subscribed to exchange rate ' + currencyPair + ' (Count = ' + _mappedSubscriptions.exchangeRates.subscriptionCounts[currencyPair] + ')', _logSource);\n                            // If we have a cache of this exchange rate, return what we have at the moment\n                            if (_mappedSubscriptions.exchangeRates.cache.hasOwnProperty(currencyPair)) {\n                                try {\n                                    callback(_api, _mappedSubscriptions.exchangeRates.cache[currencyPair]);\n                                } catch (ex) {\n                                    _logger.error('Error firing subscribeToCurrencyPairs callback | Exception = ' + ex, _logSource, [ex, _mappedSubscriptions.exchangeRates.cache[currencyPair]]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // If any exchange rate need to be subscribed to\n            if (currencyPairsToSendSubscriptionsFor.length > 0) {\n                _logger.debug('Sending exchange rates subscribe request(s) for ' + currencyPairsToSendSubscriptionsFor , _logSource);\n                send(ETX.clientAPI.Messages.createExchangeRateSubscribeMessage(currencyPairsToSendSubscriptionsFor));\n            }\n\n            if (registeredCallbackCount === currencyPairs.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to specific group market updates for the account with the server and registers a callback \n     * handler to be invoked whenever any updates for those specific group markets are published.\n     *\n     * @method subscribeToGroupMarkets\n     * @param {Array|String} groupIDs - Array of (or an individual) unqiue group identifiers.\n     * @param {Function} callback - The callback handler to register for invocation whenever a group market update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.groupMarkets - Object containing the published group markets data.\n     * @returns {Boolean} - If true, indicates that all callback handlers were successfully registered.\n     */\n    function subscribeToGroupMarkets(groupIDs, callback) {\n        var groupMarketsToSendSubscriptionsFor = [],\n            registeredCallbackCount = 0;\n        if ($.isFunction(callback)) {\n            if ($.isArray(groupIDs) === false) {\n                groupIDs = [groupIDs];\n            }\n            for (var i = 0; i < groupIDs.length; i++) {\n                var groupID = groupIDs[i];\n                if (groupID) {\n                    if (_mappedSubscriptions.groupMarkets.callbacks.hasOwnProperty(groupID) === false) {\n                        _mappedSubscriptions.groupMarkets.callbacks[groupID] = $.Callbacks('unique');\n                    }\n                    if (_mappedSubscriptions.groupMarkets.callbacks[groupID].has(callback) === false) {\n                        _mappedSubscriptions.groupMarkets.callbacks[groupID].add(callback);\n                        registeredCallbackCount += 1;\n\n                        // If we aren't already subscribed, send off subscription message and add this group ID to \n                        // our list of subscribed group markets\n                        if (_mappedSubscriptions.groupMarkets.subscriptionCounts.hasOwnProperty(groupID) === false) {\n                            _mappedSubscriptions.groupMarkets.subscriptionCounts[groupID] = 1;\n                            // Add this group ID to list that we'll ask for subscriptions for\n                            groupMarketsToSendSubscriptionsFor.push(groupID);\n                            _logger.debug('Subscribed to group markets for group ' + groupID + ' (Count = ' + _mappedSubscriptions.groupMarkets.subscriptionCounts[groupID] + ')', _logSource);\n                        } else {\n                            _mappedSubscriptions.groupMarkets.subscriptionCounts[groupID] += 1;\n                            _logger.debug('Subscribed to group markets for group ' + groupID + ' (Count = ' + _mappedSubscriptions.groupMarkets.subscriptionCounts[groupID] + ')', _logSource);\n                            // If we have a cache of this group market, return what we have at the moment\n                            if (_mappedSubscriptions.groupMarkets.cache.hasOwnProperty(groupID)) {\n                                try {\n                                    callback(_api, _mappedSubscriptions.groupMarkets.cache[groupID]);\n                                } catch (ex) {\n                                    _logger.error('Error firing subscribeToGroupMarkets callback | Exception = ' + ex, _logSource, [ex, _mappedSubscriptions.groupMarkets.cache[groupID]]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // If any group markets need to be subscribed to\n            if (groupMarketsToSendSubscriptionsFor.length > 0) {\n                _logger.debug('Sending group markets subscribe request(s) for group(s) ' + groupMarketsToSendSubscriptionsFor, _logSource);\n                send(ETX.clientAPI.Messages.createGroupMarketSubscribeMessage(groupMarketsToSendSubscriptionsFor));\n            }\n\n            if (registeredCallbackCount === groupIDs.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to historic trade updates for the account with the server and registers \n     * a callback handler to be invoked whenever any historic trade updates are published.\n     *\n     * @method subscribeToHistoricTrades\n     * @param {Function} callback - The callback handler to register for invocation whenever an historic trade update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.historicTrade - Object containing the published historic trade data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function subscribeToHistoricTrades(callback) {\n        // If anyone has asked for updates, add them to the collection\n        if ($.isFunction(callback)) {\n            if (_subscriptions.historicTrades.callbacks.has(callback) === false) {\n                _subscriptions.historicTrades.callbacks.add(callback);\n                _subscriptions.historicTrades.subscriptionCount += 1;\n                _logger.debug('Subscribed to historic trades (Count = ' + _subscriptions.historicTrades.subscriptionCount + ')', _logSource);\n\n                // If we're not subscribed currently for historic trades, send message off\n                if (!_subscriptions.historicTrades.subscribed) {\n                    _logger.debug('Sending historic trades subscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createHistoricTradesSubscribeMessage());\n                    _subscriptions.historicTrades.subscribed = true;\n                }\n\n                // If we have any cached historic trades then send them out to the callback\n                for (var i in _subscriptions.historicTrades.cache) {\n                    try {\n                        callback(_api, _subscriptions.historicTrades.cache[i]);\n                    } catch (ex) {\n                        _logger.error('Error firing subscribeToHistoricTrades callback | Exception = ' + ex, _logSource, [ex, _subscriptions.historicTrades.cache[i]]);\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to specific market updates for the account with the server and registers a callback \n     * handler to be invoked whenever any updates for those specific markets are published.\n     *\n     * @method subscribeToMarkets\n     * @param {Array|String} marketIDs - Array of (or an individual) market IDs.\n     * @param {Function} callback - The callback handler to register for invocation whenever a market update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.market - Object containing the published market/market prices data.\n     * @returns {Boolean} - If true, indicates that all callback handlers were successfully registered.\n     */\n    function subscribeToMarkets(marketIDs, callback) {\n        var marketsToSendSubscriptionsFor = [],\n            registeredCallbackCount = 0;\n        if ($.isFunction(callback)) {\n            if ($.isArray(marketIDs) === false) {\n                marketIDs = [marketIDs];\n            }\n            for (var i = 0; i < marketIDs.length; i++) {\n                var marketID = marketIDs[i];\n                if (marketID) {\n                    if (_mappedSubscriptions.markets.callbacks.hasOwnProperty(marketID) === false) {\n                        _mappedSubscriptions.markets.callbacks[marketID] = $.Callbacks('unique');\n                    }\n                    if (_mappedSubscriptions.markets.callbacks[marketID].has(callback) === false) {\n                        _mappedSubscriptions.markets.callbacks[marketID].add(callback);\n                        registeredCallbackCount += 1;\n\n                        // If we aren't already subscribed, send off subscription message and add this market to \n                        // our list of subscribed markets\n                        if (_mappedSubscriptions.markets.subscriptionCounts.hasOwnProperty(marketID) === false) {\n                            _mappedSubscriptions.markets.subscriptionCounts[marketID] = 1;\n                            // Add this market to list that we'll ask for subscriptions for\n                            marketsToSendSubscriptionsFor.push(marketID);\n                            _logger.debug('Subscribed to market ' + marketID + ' (Count = ' + _mappedSubscriptions.markets.subscriptionCounts[marketID] + ')', _logSource);\n                        } else {\n                            _mappedSubscriptions.markets.subscriptionCounts[marketID] += 1;\n                            _logger.debug('Subscribed to market ' + marketID + ' (Count = ' + _mappedSubscriptions.markets.subscriptionCounts[marketID] + ')', _logSource);\n                            // If we have a cache of this market, return what we have at the moment\n                            if (_mappedSubscriptions.markets.cache.hasOwnProperty(marketID)) {\n                                try {\n                                    callback(_api, _mappedSubscriptions.markets.cache[marketID]);\n                                } catch (ex) {\n                                    _logger.error('Error firing subscribeToMarkets callback | Exception = ' + ex, _logSource, [ex, _mappedSubscriptions.markets.cache[marketID]]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            // If any markets need to be subscribed to\n            if (marketsToSendSubscriptionsFor.length > 0) {\n                _logger.debug('Sending market subscribe request(s) for ' + marketsToSendSubscriptionsFor, _logSource);\n                send(ETX.clientAPI.Messages.createMarketSubscribeMessage(marketsToSendSubscriptionsFor));\n            }\n            if (registeredCallbackCount === marketIDs.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to open trade updates for the account with the server and registers \n     * a callback handler to be invoked whenever any open trade updates are published.\n     *\n     * @method subscribeToOpenTrades\n     * @param {Function} callback - The callback handler to register for invocation whenever an open trade update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.openTrade - Object containing the published open trade data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function subscribeToOpenTrades(callback) {\n        // If anyone has asked for updates, add them to the collection\n        if ($.isFunction(callback)) {\n            if (_subscriptions.openTrades.callbacks.has(callback) === false) {\n                _subscriptions.openTrades.callbacks.add(callback);\n                _subscriptions.openTrades.subscriptionCount += 1;\n                _logger.debug('Subscribed to open trades (Count = ' + _subscriptions.openTrades.subscriptionCount + ')', _logSource);\n\n                // If we're not subscribed currently for open trades, send message off\n                if (!_subscriptions.openTrades.subscribed) {\n                    _logger.debug('Sending open trades subscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createOpenTradesSubscribeMessage());\n                    _subscriptions.openTrades.subscribed = true;\n                }\n\n                // If we have any cached open trades then send them out to the callback\n                for (var i in _subscriptions.openTrades.cache) {\n                    try {\n                        callback(_api, _subscriptions.openTrades.cache[i]);\n                    } catch (ex) {\n                        _logger.error('Error firing subscribeToOpenTrades callback | Exception = ' + ex, _logSource, [ex, _subscriptions.openTrades.cache[i]]);\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to specific portfolio market updates for the account with the server and registers a callback \n     * handler to be invoked whenever any updates for those specific portfolio markets are published.\n     *\n     * @method subscribeToPortfolios\n     * @param {Array|String} portfolioIDs - Array of (or an individual) unique portfolio identifiers.\n     * @param {Function} callback - The callback handler to register for invocation whenever a portfolio market update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.portfolios - Object containing the published portfolio markets data.\n     * @returns {Boolean} - If true, indicates that all callback handlers were successfully registered.\n     */\n    function subscribeToPortfolios(portfolioIDs, callback) {\n        var portfoliosToSendSubscriptionsFor = [],\n            registeredCallbackCount = 0;\n        if ($.isFunction(callback)) {\n            if ($.isArray(portfolioIDs) === false) {\n                portfolioIDs = [portfolioIDs];\n            }\n            for (var i = 0; i < portfolioIDs.length; i++) {\n                var portfolioID = portfolioIDs[i];\n                if (portfolioID) {\n                    if (!_mappedSubscriptions.portfolios.callbacks.hasOwnProperty(portfolioID)) {\n                        _mappedSubscriptions.portfolios.callbacks[portfolioID] = $.Callbacks('unique');\n                    }\n                    if (_mappedSubscriptions.portfolios.callbacks[portfolioID].has(callback) === false) {\n                        _mappedSubscriptions.portfolios.callbacks[portfolioID].add(callback);\n                        registeredCallbackCount += 1;\n\n                        // If we aren't already subscribed, send off subscription message and add this portfolio ID to \n                        // our list of subscribed portfolio markets\n                        if (!_mappedSubscriptions.portfolios.subscriptionCounts.hasOwnProperty(portfolioID)) {\n                            _mappedSubscriptions.portfolios.subscriptionCounts[portfolioID] = 1;\n                            // Add this portfolio ID to list that we'll ask for subscriptions for\n                            portfoliosToSendSubscriptionsFor.push(portfolioID);\n                            _logger.debug('Subscribed to portfolio markets for portfolio ' + portfolioID + ' (Count = ' + _mappedSubscriptions.portfolios.subscriptionCounts[portfolioID] + ')', _logSource);\n                        } else {\n                            _mappedSubscriptions.portfolios.subscriptionCounts[portfolioID] += 1;\n                            _logger.debug('Subscribed to portfolio markets for portfolio ' + portfolioID + ' (Count = ' + _mappedSubscriptions.portfolios.subscriptionCounts[portfolioID] + ')', _logSource);\n                            // If we have a cache of this portfolio, return what we have at the moment\n                            if (_mappedSubscriptions.portfolios.cache.hasOwnProperty(portfolioID)) {\n                                try {\n                                    callback(_api, _mappedSubscriptions.portfolios.cache[portfolioID]);\n                                } catch (ex) {\n                                    _logger.error('Error firing subscribeToPortfolios callback | Exception = ' + ex, _logSource, [ex, _mappedSubscriptions.portfolios.cache[portfolioID]]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // If any portfolios need to be subscribed to\n            if (portfoliosToSendSubscriptionsFor.length > 0) {\n                _logger.debug('Sending portfolio markets subscribe request(s) for portfolio(s) ' + portfoliosToSendSubscriptionsFor, _logSource);\n                send(ETX.clientAPI.Messages.createPortfolioSubscribeMessage(portfoliosToSendSubscriptionsFor));\n            }\n\n            if (registeredCallbackCount === portfolioIDs.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to price alert updates for the account with the server and registers \n     * a callback handler to be invoked whenever any price alert updates are published.\n     *\n     * @method subscribeToPriceAlerts\n     * @param {Function} callback - The callback handler to register for invocation whenever a price alert update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.priceAlert - Object containing the published price alert data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function subscribeToPriceAlerts(callback) {\n        // If anyone has asked for updates, add them to the collection\n        if ($.isFunction(callback)) {\n            if (_subscriptions.priceAlerts.callbacks.has(callback) === false) {\n                _subscriptions.priceAlerts.callbacks.add(callback);\n                _subscriptions.priceAlerts.subscriptionCount += 1;\n                _logger.debug('Subscribed to price alerts (Count = ' + _subscriptions.priceAlerts.subscriptionCount + ')', _logSource);\n\n                // If we're not subscribed currently for the price alert, send message off\n                if (!_subscriptions.priceAlerts.subscribed) {\n                    _logger.debug('Sending price alerts subscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createPriceAlertsSubscribeMessage());\n                    _subscriptions.priceAlerts.subscribed = true;\n                }\n\n                // If we have any cached price alerts then send them out to the callback\n                for (var i in _subscriptions.priceAlerts.cache) {\n                    try {\n                        callback(_api, _subscriptions.priceAlerts.cache[i]);\n                    } catch (ex) {\n                        _logger.error('Error firing subscribeToPriceAlerts callback | Exception = ' + ex, _logSource, [ex, _subscriptions.priceAlerts.cache[i]]);\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to processed (executed/cancelled) order updates for the account with the server and registers \n     * a callback handler to be invoked whenever any processed order updates are published.\n     *\n     * @method subscribeToProcessedOrders\n     * @param {Function} callback - The callback handler to register for invocation whenever a processed order update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.processedOrder - Object containing the published processed order data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function subscribeToProcessedOrders(callback) {\n        // If anyone has asked for updates, add them to the collection\n        if ($.isFunction(callback)) {\n            if (_subscriptions.processedOrders.callbacks.has(callback) === false) {\n                _subscriptions.processedOrders.callbacks.add(callback);\n                _subscriptions.processedOrders.subscriptionCount += 1;\n                _logger.debug('Subscribed to processed orders (Count = ' + _subscriptions.processedOrders.subscriptionCount + ')', _logSource);\n\n                // If we're not subscribed currently for the processed orders, send message off\n                if (!_subscriptions.processedOrders.subscribed) {\n                    _logger.debug('Sending processed orders subscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createProcessedOrdersSubscribeMessage());\n                    _subscriptions.processedOrders.subscribed = true;\n                }\n\n                // If we have any cached processed orders then send them out to the callback\n                for (var i in _subscriptions.processedOrders.cache) {\n                    try {\n                        callback(_api, _subscriptions.processedOrders.cache[i]);\n                    } catch (ex) {\n                        _logger.error('Error firing subscribeToProcessedOrders callback | Exception = ' + ex, _logSource, [ex, _subscriptions.processedOrders.cache[i]]);\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Subscribes to working order updates for the account with the server and registers \n     * a callback handler to be invoked whenever any working order updates are published.\n     *\n     * @method subscribeToWorkingOrders\n     * @param {Function} callback - The callback handler to register for invocation whenever a working order update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.workingOrder - Object containing the published working order data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully registered.\n     */\n    function subscribeToWorkingOrders(callback) {\n        // If anyone has asked for updates, add them to the collection\n        if ($.isFunction(callback)) {\n            if (_subscriptions.workingOrders.callbacks.has(callback) === false) {\n                _subscriptions.workingOrders.callbacks.add(callback);\n                _subscriptions.workingOrders.subscriptionCount += 1;\n                _logger.debug('Subscribed to working orders (Count = ' + _subscriptions.workingOrders.subscriptionCount + ')', _logSource);\n\n                // If we're not subscribed currently for working alerts, send message off\n                if (!_subscriptions.workingOrders.subscribed) {\n                    _logger.debug('Sending working orders subscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createWorkingOrdersSubscribeMessage());\n                    _subscriptions.workingOrders.subscribed = true;\n                }\n\n                // If we have any cached orders then send them out to the callback\n                for (var i in _subscriptions.workingOrders.cache) {\n                    try {\n                        callback(_api, _subscriptions.workingOrders.cache[i]);\n                    } catch (ex) {\n                        _logger.error('Error firing subscribeToWorkingOrders callback | Exception = ' + ex, _logSource, [ex, _subscriptions.workingOrders.cache[i]]);\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unregisters a callback handler, which has already been registered for Connect events received from the server.\n     *\n     * @method unregisterForConnect\n     * @param {Function} callback - The callback handler to register for invocation whenever a Connect event is raised.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unregisterForConnect(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.connect.has(callback)) {\n                _callbacks.connect.remove(callback);\n                _logger.debug('Unregistered for connect', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unregisters a callback handler, which has already been registered for Disconnect events received from the server.\n     *\n     * @method unregisterForDisconnect\n     * @param {Function} callback - The callback handler to register for invocation whenever a Disconnect event is raised.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unregisterForDisconnect(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.disconnect.has(callback)) {\n                _callbacks.disconnect.remove(callback);\n                _logger.debug('Unregistered for disconnect', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unregisters a callback handler, which has already been registered for an internal/server errors.   \n     * ***NOTE: This will NOT be invoked during `close()` or `destroy()`.***\n     *\n     * @method unregisterForErrors\n     * @param {Function} callback - The callback handler to register for invocation whenever an internal/server error is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {String} callback.errorMessage - Error message.\n     * @param {Object|Array} [callback.errorData] - (Optional) Additional error data to accompany the error message.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unregisterForErrors(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.errors.has(callback)) {\n                _callbacks.errors.remove(callback);\n                _logger.debug('Unregistered for errors', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unregisters a callback handler, which has already been registered for session log offs.   \n     * ***NOTE: This will NOT be invoked during `close()` or `destroy()`.***\n     *\n     * @method unregisterForLogOff\n     * @param {Function} callback - The callback handler to register for invocation whenever a session log off is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.logOffResponse - Object containing the log off details.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unregisterForLogOff(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.logOff.has(callback)) {\n                _callbacks.logOff.remove(callback);\n                _logger.debug('Unregistered for log off', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unregisters a callback handler, which has already been registered for session log ons.   \n     * ***NOTE: This will NOT be invoked during `close()` or `destroy()`.***\n     *\n     * @method unregisterForLogOn\n     * @param {Function} callback - The callback handler to register for invocation whenever a session log on is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.logOnResponse - Object containing the log on details.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unregisterForLogOn(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.logOn.has(callback)) {\n                _callbacks.logOn.remove(callback);\n                _logger.debug('Unregistered for log on', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unregisters a callback handler, which has already been registered for session log ons/offs.   \n     * ***NOTE: This will NOT be invoked during `close()` or `destroy()`.***\n     *\n     * @method unregisterForLogOnLogOff\n     * @param {Function} callback - The callback handler to register for invocation whenever a session log on/off is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Boolean} callback.success - If true, indicates a successful session log on, else indicates a session log off.\n     * @param {Object} callback.logOnOffResponse - Object containing the log on/off details.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unregisterForLogOnLogOff(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.logOnLogOff.has(callback)) {\n                _callbacks.logOnLogOff.remove(callback);\n                _logger.debug('Unregistered for log on/off', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unregisters a callback handler, which has already been registered for market updates.    \n     * ***NOTE: This will NOT unsubscribe to market updates.***\n     *\n     * @method unregisterForMarketUpdates\n     * @param {Function} callback - The already registered callback handler to unregister.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.market - Object containing the published market/market prices data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unregisterForMarketUpdates(callback) {\n        if ($.isFunction(callback)) {\n            if (_mappedSubscriptions.markets.callbacks.has(callback)) {\n                _mappedSubscriptions.markets.callbacks.$any.add(callback);\n                _logger.debug('Unregistered for (greedy) market updates', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unregisters a callback handler, which has already been registered for server quality-of-service (QoS) responses.\n     * is received from the server.\n     *\n     * @method unregisterForQoS\n     * @param {Function} callback - The callback handler to register for invocation whenever a server QoS response is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Number} callback.ttl - Total number of milliseconds it has taken for the server to respond to a QoS request.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unregisterForQoS(callback) {\n        if ($.isFunction(callback)) {\n            if (_callbacks.QoS.has(callback)) {\n                _callbacks.QoS.remove(callback);\n                _logger.debug('Unregistered for QoS', _logSource);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to account (including sub-account) updates for the account with the server and unregisters \n     * a callback handler, which has already been registered for account (including sub-account) updates.\n     *\n     * @method unsubscribeToAccount\n     * @param {Function} callback - The callback handler to register for invocation whenever an account or sub-account update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.account - Object containing the published account data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unsubscribeToAccount(callback) {\n        // Remove our callback\n        if ($.isFunction(callback)) {\n            if (_subscriptions.account.callbacks.has(callback) === true) {\n                _subscriptions.account.callbacks.remove(callback);\n                _subscriptions.account.subscriptionCount -= 1;\n                _logger.debug('Unsubscribed to account (Count = ' + _subscriptions.account.subscriptionCount + ')', _logSource);\n\n                // Only unsubscribe if they are no subscriptions anymore...\n                if (_subscriptions.account.subscriptionCount === 0) {\n                    // Clear cache of account...\n                    _subscriptions.account.subscribed = false;\n                    _subscriptions.account.cache = {};\n                    _logger.debug('Cleared account cache', _logSource);\n\n                    _logger.debug('Sending account unsubscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createAccountUnsubscribeMessage());\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to account transaction updates for the account with the server and unregisters \n     * a callback handler, which has already been registered for account transaction updates.\n     *\n     * @method unsubscribeToAccountTransactions\n     * @param {Function} callback - The callback handler to register for invocation whenever an account transaction update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.accountTransaction - Object containing the published account transaction data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unsubscribeToAccountTransactions(callback) {\n        // Remove our callback\n        if ($.isFunction(callback)) {\n            if (_subscriptions.accountTransactions.callbacks.has(callback) === true) {\n                _subscriptions.accountTransactions.callbacks.remove(callback);\n                _subscriptions.accountTransactions.subscriptionCount -= 1;\n                _logger.debug('Unsubscribed to account transactions (Count = ' + _subscriptions.accountTransactions.subscriptionCount + ')', _logSource);\n\n                // Only unsubscribe if they are no subscriptions anymore...\n                if (_subscriptions.accountTransactions.subscriptionCount === 0) {\n                    // Clear cache of account transactions...\n                    _subscriptions.accountTransactions.subscribed = false;\n                    _subscriptions.accountTransactions.cache = {};\n                    _logger.debug('Cleared account transactions cache', _logSource);\n\n                    _logger.debug('Sending account transactions unsubscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createAccountTransactionUnsubscribeMessage());\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    /**\n     * Unsubscribes to aggregate account data updates for the subaccount with the server and unregisters \n     * a callback handler, which has already been registered for aggregate account updates.\n     *\n     * @method unsubscribeToAggregateAccounts\n     * @param {Array|String} subAccountIDs - Array of (or an individual) sub-account IDs.\n     * @param {Function} callback - The callback handler to register for invocation whenever an aggregate account update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unsubscribeToAggregateAccounts(subAccountIDs, callback) {\n        var subAccountIDsToCancelSubscriptionsFor = [],\n            unregisteredCallbackCount = 0;\n        if ($.isFunction(callback)) {\n            if ($.isArray(subAccountIDs) === false) {\n                subAccountIDs = [subAccountIDs];\n            }\n            for (var i = 0; i < subAccountIDs.length; i++) {\n                var subAccountID = (subAccountIDs[i] || '').toUpperCase();\n                if (subAccountID) {\n                    // Remove our callback\n                    if (_mappedSubscriptions.aggregateAccounts.callbacks.hasOwnProperty(subAccountID)) {\n                        if (_mappedSubscriptions.aggregateAccounts.callbacks[subAccountID].has(callback)) {\n                            _mappedSubscriptions.aggregateAccounts.callbacks[subAccountID].remove(callback);\n                            unregisteredCallbackCount += 1;\n\n                            if (_mappedSubscriptions.aggregateAccounts.subscriptionCounts.hasOwnProperty(subAccountID)) {\n                                _mappedSubscriptions.aggregateAccounts.subscriptionCounts[subAccountID] -= 1;\n                                _logger.debug('Unsubscribed to aggregate account ' + subAccountID + ' (Count = ' + _mappedSubscriptions.aggregateAccounts.subscriptionCounts[subAccountID] + ')', _logSource);\n                                // If this was the last sub-account ID aggregate account, cancel our subscription for it\n                                if (_mappedSubscriptions.aggregateAccounts.subscriptionCounts[subAccountID] === 0) {\n                                    subAccountIDsToCancelSubscriptionsFor.push(subAccountID);\n                                    delete _mappedSubscriptions.aggregateAccounts.callbacks[subAccountID];\n                                    delete _mappedSubscriptions.aggregateAccounts.subscriptionCounts[subAccountID];\n                                    // Remove cache of this sub-account ID aggregate account\n                                    if (_mappedSubscriptions.aggregateAccounts.cache.hasOwnProperty(subAccountID)) {\n                                        delete _mappedSubscriptions.aggregateAccounts.cache[subAccountID];\n                                    }\n                                    _logger.debug('Cleared aggregate accounts cache for ' + subAccountID, _logSource);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            // If any sub-account ID aggregate accounts need to be cancelled...\n            if (subAccountIDsToCancelSubscriptionsFor.length > 0) {\n                _logger.debug('Sending aggregate accounts unsubscribe request(s) for ' + subAccountIDsToCancelSubscriptionsFor, _logSource);\n                send(ETX.clientAPI.Messages.createAggregateAccountUnsubscribeMessage(subAccountIDsToCancelSubscriptionsFor));\n            }\n            if (unregisteredCallbackCount === subAccountIDs.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to closed trade updates for the account with the server and unregisters \n     * a callback handler, which has already been registered for closed trade updates.\n     *\n     * @method unsubscribeToClosedTrades\n     * @param {Function} callback - The callback handler to register for invocation whenever an closed trade update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.closedTrade - Object containing the published closed trade data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unsubscribeToClosedTrades(callback) {\n        // Remove our callback\n        if ($.isFunction(callback)) {\n            if (_subscriptions.closedTrades.callbacks.has(callback) === true) {\n                _subscriptions.closedTrades.callbacks.remove(callback);\n                _subscriptions.closedTrades.subscriptionCount -= 1;\n                _logger.debug('Unsubscribed to closed trades (Count = ' + _subscriptions.closedTrades.subscriptionCount + ')', _logSource);\n\n                // Only unsubscribe if they are no subscriptions anymore...\n                if (_subscriptions.closedTrades.subscriptionCount === 0) {\n                    // Clear cache of closed trades...\n                    _subscriptions.closedTrades.subscribed = false;\n                    _subscriptions.closedTrades.cache = {};\n                    _logger.debug('Cleared closed trades cache', _logSource);\n\n                    _logger.debug('Sending closed trades unsubscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createClosedTradesUnsubscribeMessage());\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to specific currency pair exchange rate updates for the account with the server and \n     * unregisters a callback handler, which has already been registered for specific currency pair\n     * exchange rate updates.\n     *\n     * @method unsubscribeToExchangeRates\n     * @param {Array|String} currencyPairs - Array of (or an individual) currency pairs.\n     * @param {Function} callback - The callback handler to register for invocation whenever a currency pair's exchange rate update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.exchangeRate - Object containing the published currency pair exchange price data.\n     * @returns {Boolean} - If true, indicates that all callback handlers were successfully unregistered.\n     */\n    function unsubscribeToExchangeRates(currencyPairs, callback) {\n        var currencyPairsToCancelSubscriptionsFor = [],\n            unregisteredCallbackCount = 0;\n        if ($.isFunction(callback)) {\n            if ($.isArray(currencyPairs) === false) {\n                currencyPairs = [currencyPairs];\n            }\n            for (var i = 0; i < currencyPairs.length; i++) {\n                var currencyPair = (currencyPairs[i] || '').toUpperCase();\n                if (currencyPair) {\n                    // Remove our callback\n                    if (_mappedSubscriptions.exchangeRates.callbacks.hasOwnProperty(currencyPair)) {\n                        if (_mappedSubscriptions.exchangeRates.callbacks[currencyPair].has(callback)) {\n                            _mappedSubscriptions.exchangeRates.callbacks[currencyPair].remove(callback);\n                            unregisteredCallbackCount += 1;\n\n                            if (_mappedSubscriptions.exchangeRates.subscriptionCounts.hasOwnProperty(currencyPair)) {\n                                _mappedSubscriptions.exchangeRates.subscriptionCounts[currencyPair] -= 1;\n                                _logger.debug('Unsubscribed to exchange rate ' + currencyPair + ' (Count = ' + _mappedSubscriptions.exchangeRates.subscriptionCounts[currencyPair] + ')', _logSource);\n                                // If this was the last currency pair exchange rate, cancel our subscription for it\n                                if (_mappedSubscriptions.exchangeRates.subscriptionCounts[currencyPair] === 0) {\n                                    currencyPairsToCancelSubscriptionsFor.push(currencyPair);\n                                    delete _mappedSubscriptions.exchangeRates.callbacks[currencyPair];\n                                    delete _mappedSubscriptions.exchangeRates.subscriptionCounts[currencyPair];\n                                    // Remove cache of this currency pair exchange rate\n                                    if (_mappedSubscriptions.exchangeRates.cache.hasOwnProperty(currencyPair)) {\n                                        delete _mappedSubscriptions.exchangeRates.cache[currencyPair];\n                                    }\n                                    _logger.debug('Cleared exchange rates cache for ' + currencyPair, _logSource);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            // If any currency pair exchange rates need to be cancelled...\n            if (currencyPairsToCancelSubscriptionsFor.length > 0) {\n                _logger.debug('Sending exchange rates unsubscribe request(s) for ' + currencyPairsToCancelSubscriptionsFor, _logSource);\n                send(ETX.clientAPI.Messages.createExchangeRateUnsubscribeMessage(currencyPairsToCancelSubscriptionsFor));\n            }\n            if (unregisteredCallbackCount === currencyPairs.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to specific group market updates for the account with the server and unregisters \n     * a callback handler, which has already been registered for specific group market updates.\n     *\n     * @method unsubscribeToGroupMarkets\n     * @param {Array|String} marketIDs - Array of (or an individual) unqiue group identifiers.\n     * @param {Function} callback - The callback handler to register for invocation whenever a group market update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.groupMarkets - Object containing the published group markets data.\n     * @returns {Boolean} - If true, indicates that all callback handlers were successfully unregistered.\n     */\n    function unsubscribeToGroupMarkets(groupIDs, callback) {\n        var groupsMarketsToCancelSubscriptionsFor = [],\n            unregisteredCallbackCount = 0;\n        if ($.isFunction(callback)) {\n            if ($.isArray(groupIDs) === false) {\n                groupIDs = [groupIDs];\n            }\n            for (var i = 0; i < groupIDs.length; i++) {\n                var groupID = groupIDs[i];\n                if (groupID) {\n                    // Remove our callback\n                    if (_mappedSubscriptions.groupMarkets.callbacks.hasOwnProperty(groupID)) {\n                        if (_mappedSubscriptions.groupMarkets.callbacks[groupID].has(callback)) {\n                            _mappedSubscriptions.groupMarkets.callbacks[groupID].remove(callback);\n                            unregisteredCallbackCount += 1;\n\n                            if (_mappedSubscriptions.groupMarkets.subscriptionCounts.hasOwnProperty(groupID)) {\n                                _mappedSubscriptions.groupMarkets.subscriptionCounts[groupID] -= 1;\n                                _logger.debug('Unsubscribed to group markets for group ' + groupID + ' (Count = ' + _mappedSubscriptions.groupMarkets.subscriptionCounts[groupID] + ')', _logSource);\n                                // If this was the last group subscription, cancel our subscription for it\n                                if (_mappedSubscriptions.groupMarkets.subscriptionCounts[groupID] === 0) {\n                                    groupsMarketsToCancelSubscriptionsFor.push(groupID);\n                                    delete _mappedSubscriptions.groupMarkets.callbacks[groupID];\n                                    delete _mappedSubscriptions.groupMarkets.subscriptionCounts[groupID];\n                                    // Remove cache of this group ID\n                                    if (_mappedSubscriptions.groupMarkets.cache.hasOwnProperty(groupID)) {\n                                        delete _mappedSubscriptions.groupMarkets.cache[groupID];\n                                    }\n                                    _logger.debug('Cleared group markets cache for group ' + groupID, _logSource);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            // If any markets need to be cancelled...\n            if (groupsMarketsToCancelSubscriptionsFor.length > 0) {\n                _logger.debug('Sending group markets unsubscribe request(s) for group(s) ' + groupsMarketsToCancelSubscriptionsFor, _logSource);\n                send(ETX.clientAPI.Messages.createGroupMarketUnsubscribeMessage(groupsMarketsToCancelSubscriptionsFor));\n            }\n            if (unregisteredCallbackCount === groupIDs.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to historic trade updates for the account with the server and unregisters \n     * a callback handler, which has already been registered for historic trade updates.\n     *\n     * @method unsubscribeToHistoricTrades\n     * @param {Function} callback - The callback handler to register for invocation whenever an historic trade update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.historicTrade - Object containing the published historic trade data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unsubscribeToHistoricTrades(callback) {\n        // Remove our callback\n        if ($.isFunction(callback)) {\n            if (_subscriptions.historicTrades.callbacks.has(callback) === true) {\n                _subscriptions.historicTrades.callbacks.remove(callback);\n                _subscriptions.historicTrades.subscriptionCount -= 1;\n                _logger.debug('Unsubscribed to historic trades (Count = ' + _subscriptions.historicTrades.subscriptionCount + ')', _logSource);\n\n                // Only unsubscribe if they are no subscriptions anymore...\n                if (_subscriptions.historicTrades.subscriptionCount === 0) {\n                    // Clear cache of historic trades...\n                    _subscriptions.historicTrades.subscribed = false;\n                    _subscriptions.historicTrades.cache = {};\n                    _logger.debug('Cleared historic trades cache', _logSource);\n\n                    _logger.debug('Sending historic trades unsubscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createHistoricTradesUnsubscribeMessage());\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to specific market updates for the account with the server and unregisters \n     * a callback handler, which has already been registered for specific market updates.\n     *\n     * @method unsubscribeToMarkets\n     * @param {Array|String} marketIDs - Array of (or an individual) market IDs.\n     * @param {Function} callback - The callback handler to register for invocation whenever a market update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.market - Object containing the published market/market prices data.\n     * @returns {Boolean} - If true, indicates that all callback handlers were successfully unregistered.\n     */\n    function unsubscribeToMarkets(marketIDs, callback) {\n        var marketsToCancelSubscriptionsFor = [],\n            unregisteredCallbackCount = 0;\n        if ($.isFunction(callback)) {\n            if ($.isArray(marketIDs) === false) {\n                marketIDs = [marketIDs];\n            }\n            for (var i = 0; i < marketIDs.length; i++) {\n                var marketID = marketIDs[i];\n                if (marketID) {\n                    // Remove our callback\n                    if (_mappedSubscriptions.markets.callbacks.hasOwnProperty(marketID)) {\n                        if (_mappedSubscriptions.markets.callbacks[marketID].has(callback)) {\n                            _mappedSubscriptions.markets.callbacks[marketID].remove(callback);\n                            unregisteredCallbackCount += 1;\n\n                            if (_mappedSubscriptions.markets.subscriptionCounts.hasOwnProperty(marketID)) {\n                                _mappedSubscriptions.markets.subscriptionCounts[marketID] -= 1;\n                                _logger.debug('Unsubscribed to market ' + marketID + ' (Count = ' + _mappedSubscriptions.markets.subscriptionCounts[marketID] + ')', _logSource);\n                                // If this was the last market, cancel our subscription for it\n                                if (_mappedSubscriptions.markets.subscriptionCounts[marketID] === 0) {\n                                    marketsToCancelSubscriptionsFor.push(marketID);\n                                    delete _mappedSubscriptions.markets.callbacks[marketID];\n                                    delete _mappedSubscriptions.markets.subscriptionCounts[marketID];\n                                    // Remove cache of this market\n                                    if (_mappedSubscriptions.markets.cache.hasOwnProperty(marketID)) {\n                                        delete _mappedSubscriptions.markets.cache[marketID];\n                                    }\n                                    _logger.debug('Cleared markets cache for market ' + marketID, _logSource);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            // If any markets need to be cancelled...\n            if (marketsToCancelSubscriptionsFor.length > 0) {\n                _logger.debug('Sending markets unsubscribe request(s) for market(s) ' + marketsToCancelSubscriptionsFor, _logSource);\n                send(ETX.clientAPI.Messages.createMarketUnsubscribeMessage(marketsToCancelSubscriptionsFor));\n            }\n            if (unregisteredCallbackCount === marketIDs.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to open trade updates for the account with the server and unregisters \n     * a callback handler, which has already been registered for open trade updates.\n     *\n     * @method unsubscribeToOpenTrades\n     * @param {Function} callback - The callback handler to register for invocation whenever an open trade update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.openTrade - Object containing the published open trade data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unsubscribeToOpenTrades(callback) {\n        // Remove our callback\n        if ($.isFunction(callback)) {\n            if (_subscriptions.openTrades.callbacks.has(callback) === true) {\n                _subscriptions.openTrades.callbacks.remove(callback);\n                _subscriptions.openTrades.subscriptionCount -= 1;\n                _logger.debug('Unsubscribed to open trades (Count = ' + _subscriptions.openTrades.subscriptionCount + ')', _logSource);\n\n                // Only unsubscribe if they are no subscriptions anymore...\n                if (_subscriptions.openTrades.subscriptionCount === 0) {\n                    // Clear cache of open trades...\n                    _subscriptions.openTrades.subscribed = false;\n                    _subscriptions.openTrades.cache = {};\n                    _logger.debug('Cleared open trades cache', _logSource);\n\n                    _logger.debug('Sending open trades unsubscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createOpenTradesUnsubscribeMessage());\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to specific portfolio market updates for the account with the server and unregisters \n     * a callback handler, which has already been registered for specific portfolio market updates.\n     *\n     * @method unsubscribeToPortfolios\n     * @param {Array|String} portfolioIDs - Array of (or an individual) unqiue portfolio identifiers.\n     * @param {Function} callback - The callback handler to register for invocation whenever a portfolio market update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.portfolioMarkets - Object containing the published portfolio markets data.\n     * @returns {Boolean} - If true, indicates that all callback handlers were successfully unregistered.\n     */\n    function unsubscribeToPortfolios(portfolioIDs, callback) {\n        var portfoliosToCancelSubscriptionsFor = [],\n            unregisteredCallbackCount = 0;\n        if ($.isFunction(callback)) {\n            if ($.isArray(portfolioIDs) === false) {\n                portfolioIDs = [portfolioIDs];\n            }\n            for (var i = 0; i < portfolioIDs.length; i++) {\n                var portfolioID = portfolioIDs[i];\n                if (portfolioID) {\n                    // Remove our callback\n                    if (_mappedSubscriptions.portfolios.callbacks.hasOwnProperty(portfolioID)) {\n                        if (_mappedSubscriptions.portfolios.callbacks[portfolioID].has(callback)) {\n                            _mappedSubscriptions.portfolios.callbacks[portfolioID].remove(callback);\n                            unregisteredCallbackCount += 1;\n\n                            if (_mappedSubscriptions.portfolios.subscriptionCounts.hasOwnProperty(portfolioID)) {\n                                _mappedSubscriptions.portfolios.subscriptionCounts[portfolioID] -= 1;\n                                _logger.debug('Unsubscribed to portfolio markets for portfolio ' + portfolioID + ' (Count = ' + _mappedSubscriptions.portfolios.subscriptionCounts[portfolioID] + ')', _logSource);\n                                // If this was the last portfolio subscription, cancel our subscription for it\n                                if (_mappedSubscriptions.portfolios.subscriptionCounts[portfolioID] === 0) {\n                                    portfoliosToCancelSubscriptionsFor.push(portfolioID);\n                                    delete _mappedSubscriptions.portfolios.callbacks[portfolioID];\n                                    delete _mappedSubscriptions.portfolios.subscriptionCounts[portfolioID];\n                                    // Remove cache of this portfolio ID\n                                    if (_mappedSubscriptions.portfolios.cache.hasOwnProperty(portfolioID)) {\n                                        delete _mappedSubscriptions.portfolios.cache[portfolioID];\n                                    }\n                                    _logger.debug('Cleared portfolio markets cache for portfolio ' + portfolioID, _logSource);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            // If any markets need to be cancelled...\n            if (portfoliosToCancelSubscriptionsFor.length > 0) {\n                _logger.debug('Sending portfolio markets unsubscribe request(s) for portfolio(s) ' + portfoliosToCancelSubscriptionsFor, _logSource);\n                send(ETX.clientAPI.Messages.createPortfolioUnsubscribeMessage(portfoliosToCancelSubscriptionsFor));\n            }\n            if (unregisteredCallbackCount === portfolioIDs.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to price alert updates for the account with the server and unregisters \n     * a callback handler, which has already been registered for price alert updates.\n     *\n     * @method unsubscribeToPriceAlerts\n     * @param {Function} callback - The callback handler to register for invocation whenever a price alert update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.priceAlert - Object containing the published price alert data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unsubscribeToPriceAlerts(callback) {\n        // Remove our callback\n        if ($.isFunction(callback)) {\n            if (_subscriptions.priceAlerts.callbacks.has(callback) === true) {\n                _subscriptions.priceAlerts.callbacks.remove(callback);\n                _subscriptions.priceAlerts.subscriptionCount -= 1;\n                _logger.debug('Unsubscribed to price alerts (Count = ' + _subscriptions.priceAlerts.subscriptionCount + ')', _logSource);\n\n                // Only unsubscribe if they are no subscriptions anymore...\n                if (_subscriptions.priceAlerts.subscriptionCount === 0) {\n                    // Clear cache of price alerts...\n                    _subscriptions.priceAlerts.subscribed = false;\n                    _subscriptions.priceAlerts.cache = {};\n                    _logger.debug('Cleared price alerts cache', _logSource);\n\n                    _logger.debug('Sending price alerts unsubscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createPriceAlertsUnsubscribeMessage());\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to processed (executed/cancelled) order updates for the account with the server \n     * and unregisters a callback handler, which has already been registered for processed order updates.\n     *\n     * @method unsubscribeToProcessedOrders\n     * @param {Function} callback - The callback handler to register for invocation whenever a processed order update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.processedOrder - Object containing the published processed order data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unsubscribeToProcessedOrders(callback) {\n        // Remove our callback\n        if ($.isFunction(callback)) {\n            if (_subscriptions.processedOrders.callbacks.has(callback) === true) {\n                _subscriptions.processedOrders.callbacks.remove(callback);\n                _subscriptions.processedOrders.subscriptionCount -= 1;\n                _logger.debug('Unsubscribed to processed orders (Count = ' + _subscriptions.processedOrders.subscriptionCount + ')', _logSource);\n\n                // Only unsubscribe if they are no subscriptions anymore...\n                if (_subscriptions.processedOrders.subscriptionCount === 0) {\n                    // Clear cache of processed orders...\n                    _subscriptions.processedOrders.subscribed = false;\n                    _subscriptions.processedOrders.cache = {};\n                    _logger.debug('Cleared processed orders cache', _logSource);\n\n                    _logger.debug('Sending processed orders unsubscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createProcessedOrdersUnsubscribeMessage());\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Unsubscribes to working order updates for the account with the server and unregisters \n     * a callback handler, which has already been registered for working order updates.\n     *\n     * @method unsubscribeToWorkingOrders\n     * @param {Function} callback - The callback handler to register for invocation whenever a working order update is published.\n     * @param {ETX.clientAPI.ClientAPI} callback.api - The `ETX.clientAPI.ClientAPI` that published the update.\n     * @param {Object} callback.workingOrder - Object containing the published working order data.\n     * @returns {Boolean} - If true, indicates that the callback handler was successfully unregistered.\n     */\n    function unsubscribeToWorkingOrders(callback) {\n        // Remove our callback\n        if ($.isFunction(callback)) {\n            if (_subscriptions.workingOrders.callbacks.has(callback) === true) {\n                _subscriptions.workingOrders.callbacks.remove(callback);\n                _subscriptions.workingOrders.subscriptionCount -= 1;\n                _logger.debug('Unsubscribed to working orders (Count = ' + _subscriptions.workingOrders.subscriptionCount + ')', _logSource);\n\n                // Only unsubscribe if they are no subscriptions anymore...\n                if (_subscriptions.workingOrders.subscriptionCount === 0) {\n                    // Clear cache of working orders...\n                    _subscriptions.workingOrders.subscribed = false;\n                    _subscriptions.workingOrders.cache = {};\n                    _logger.debug('Cleared working orders cache', _logSource);\n\n                    _logger.debug('Sending working orders unsubscribe request...', _logSource);\n                    send(ETX.clientAPI.Messages.createWorkingOrdersUnsubscribeMessage());\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Updates the current user settings for the account on the server with the settings provided, where\n     * any new settings are added, existing settings are updated and settings mark as deleted are removed.\n     *\n     * @method updateUserSettings\n     * @param {Object} userSettings - Array of Objects, each containing the user setting properties defined in `ETX.clientAPI.Constants.messages.UserSettingsRequest.UserSettingsArray_Object`.\n     * @returns {jQuery.Promise} - [jQuery Promise object](http://api.jquery.com/Types/#Promise).\n     */\n    function updateUserSettings(userSettings) {\n        // Generate unique client identifier...\n        var uid = ETX.clientAPI.Messages.generateUniqueClientIdentifier(ETX.clientAPI.Constants.messages.UserSettingsRequest.MessageType),\n            defer = new $.Deferred(),\n            promise = defer.promise();\n\n        if (_session) {\n            _logger.debug('Sending (update) UserSettingsRequest  (\"' + uid + '\")...', _logSource);\n\n            _mappedDeferredObjs.userSettingsRequest[uid] = defer;\n\n            var msg = ETX.clientAPI.Messages.createUserSettingsRequestMessage(\n                uid, ETX.clientAPI.Constants.messages.UserSettingsRequest.UserSettingsRequestType_Update, userSettings);\n            send(msg);\n        } else {\n            defer.reject(_api, 'No session');\n        }\n\n        // Return the promise for the invoker to manually register callbacks...\n        return promise;\n    }\n    // #endregion\n    //----END-METHODS---------\n\n};\n\n/// <reference path=\"../../_references.js\" />\n\nETX.namespace('clientAPI');\n\n/**\n * @class ETX.clientAPI.Constants\n * \n * @static\n * @singleton\n * @readonly\n *\n * @requires ETX\n *\n * `ETX.clientAPI.Constants` singleton provides constants for the `ETX.clientAPI` modules/sub-modules.\n */\nETX.clientAPI.Constants = (function () {\n\n    'use strict';\n\n    //-CONSTRUCTOR------------\n    // #region\n    //----PRIVATE-------------\n    var _constants = {};\n    //----END-PRIVATE---------\n\n    //----PUBLIC--------------\n    // #region\n        _constants = {\n            /**\n             * Gets the constants for messages.   \n             *\n             * ###Example:\n             *      // Subscribe to market updates and details for market '10001'...\n             *      var api = new ETX.clientAPI.ClientAPI({\n             *          webSocketRootURL: 'ws://127.0.0.1:82',\n             *          webAPIRootURL: 'http://127.0.0.1:81/',\n             *          username: 'test_user',\n             *          password: 'change_me',\n             *          brokerID: '1'\n             *      });\n             *      var targetMarketID = '10001', targetMarketObj;\n             *      // NOTE: Returns a jQuery Promise object, as this may be an async request\n             *      api.subscribeToMarketUpdates(targetMarketID, function (api, market) {\n             *          // Now an update has been published, lets check its an update for our target market...\n             *          if (market) {\n             *              // Use the Market specific constants the access the MarketID from the published message...\n             *              var marketID = market[ETX.clientAPI.Constants.messages.Market.MarketID];\n             *              if (marketID === targetMarketID) {\n             *                  // Yes it is, so lets save a reference to it so we can do something interesting...\n             *                  targetMarketObj = market;\n             *                  // Do something interesting...\n             *              }\n             *          }\n             *      });\n             *\n             * @property {ETX.clientAPI.Constants.messages} messages\n             * @static\n             * @readonly\n             */\n            messages: {\n                // #region\n                /*\n                 * Defines the common constants shared by various messages.\n                 * @property {Object} Common\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                Common: {\n                    Deleted: '$del',\n                    Subscription: {\n                        SubscribeType: '$st'\n                    }\n                },\n\n                /**\n                 * Defines the constants for account update messages.\n                 * @property {Object} Account\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                Account: {\n                    MessageType: 'A',\n\n                    AccountID: 'ai',\n                    AccountName: 'an',\n                    AssetClassArray: 'aca',\n                    AssetClassArray_Object: {\n                        AssetClass: 'ac',\n                        AssetClass_CFD: 'cfd',\n                        AssetClass_FX: 'fx',\n                        AssetClass_SB: 'sb'\n                    },\n                    AutoStops: 'as',\n                    ClientID: 'ci',\n                    DefaultCurrencyName: 'dcn',\n                    Deleted: '$del',\n                    DynamicMargin: 'dm',\n                    EmailPriceAlerts: 'epa',\n                    GuaranteedStops: 'gs',\n                    IMR: 'im',\n                    IMRType: 'it',\n                    ManagedClient: 'mc',\n                    MarginReserved: 'mr',\n                    MarginReservedManually: 'mrm',\n                    MinIMR: 'mi',\n                    ShowNetPnL: 'snrpl',\n                    SMSPriceAlerts: 'spa',\n                    TrailingStopType: 'ts',\n                    SubAccount: 'sa',\n                    SubAccountArray: 'saa',\n                    SubAccountArray_Object: {\n                        AccountID: 'ai',\n                        //CashBalance: 'cb',\n                        CreditAllocation: 'ca',\n                        //CurrencyID: 'ci',\n                        CurrencyName: 'cn',\n                        CurrencySymbol: 'cs',\n                        Deleted: '$del',\n                        Funds: 'f',\n                        //FundsAvailable: 'fa',\n                        MarginReserved: 'mr',\n                        MarginReservedManually: 'mrm',\n                        MinBet: 'mb',\n                        SpreadBettingEnabled: 'sbe',\n                        SubAccountID: 'sai',\n                        WMRA: 'wm'\n                    }\n                },\n\n                /**\n                 * Defines the constants for account subscription messages.\n                 * @property {Object} AccountSubscription\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                AccountSubscription: {\n                    MessageType: 'AS',\n\n                    SubscribeType: '$st',\n                    SubscribeType_Subscribe: 's',\n                    SubscribeType_Unsubscribe: 'u'\n                },\n\n                /**\n                 * Defines the constants for account transaction update messages.\n                 * @property {Object} AccountTransaction\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                AccountTransaction: {\n                    MessageType: 'AT',\n\n                    Amount: 'a',\n                    Comment: 'c',\n                    CurrencyName: 'cn',\n                    CurrencySymbol: 'cs',\n                    CurrentFunds: 'cf',\n                    Deleted: '$del',\n                    StatementID: 'si',\n                    SubAccountID: 'sai',\n                    Timestamp: 'ts',\n                    TransactionTypeID: 'tti',\n                    TransactionTypeText: 'ttt'\n                },\n\n                /**\n                 * Defines the constants for account transaction subscription messages.\n                 * @property {Object} AccountTransactionSubscription\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                AccountTransactionSubscription: {\n                    MessageType: 'ATS',\n\n                    SubscribeType: '$st',\n                    SubscribeType_Subscribe: 's',\n                    SubscribeType_Unsubscribe: 'u'\n                },\n\n                /**\n                 * Defines the constants for aggregate account update messages.\n                 * @property {Object} AggregateAccount\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                AggregateAccount: {\n                    MessageType: 'AA',\n\n                    AccountID: 'ai',\n                    AccountValuation: 'av',\n                    CashBalance: 'cb',\n                    CreditAllocation: 'ca',\n                    CurrencyName: 'cn',\n                    CurrencySymbol: 'cs',\n                    MarginReserved: 'mr',\n                    OpenPL: 'upnl',\n                    SubAccountID: 'sai',\n                    TradingResources: 'tr',\n                    WMRA: 'wm'\n                },\n\n                /**\n                 * Defines the constants for aggregate account subscription messages.\n                 * @property {Object} AggregateAccountSubscription\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                AggregateAccountSubscription: {\n                    MessageType: 'AAS',\n\n                    SubAccountArray: 'sa',\n                    SubAccountArray_Object: {\n                        SubAccountID: 'sai'\n                    },\n                    SubscribeType: '$st',\n                    SubscribeType_Subscribe: 's',\n                    SubscribeType_Unsubscribe: 'u'\n                },\n\n                /**\n                 * Defines the constants for closed trade update messages.\n                 * @property {Object} ClosedTrade\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                ClosedTrade: {\n                    MessageType: 'CT',\n\n                    AssetClass: 'ac',\n                    AssetClass_CFD: 'cfd',\n                    AssetClass_FX: 'fx',\n                    AssetClass_SB: 'sb',\n                    BinaryTimestamp: 'bt',\n                    ClosePrice: 'cp',\n                    CurrencyName: 'cn',\n                    CurrencyPL: 'cpl',\n                    CurrencySymbol: 's',\n                    DateClosed: 'wc',\n                    DateOpened: 'wo',\n                    DecimalPlaces: 'dp',\n                    Deleted: '$del',\n                    ForcedIncrement: 'fi',\n                    MarketID: 'mi',\n                    MarketName: 'mn',\n                    NetPnL: 'npnl',\n                    OpenPrice: 'op',\n                    PnL: 'pnl',\n                    Quantity: 'q',\n                    Side: 'si',\n                    Side_Buy: 'b',\n                    Side_Sell: 's',\n                    SubAccountID: 'sai',\n                    TradeCloseID: 'tci'\n                },\n\n                /**\n                 * Defines the constants for closed trade subscription messages.\n                 * @property {Object} ClosedTradeSubscription\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                ClosedTradeSubscription: {\n                    MessageType: 'CTS',\n\n                    SubscribeType: '$st',\n                    SubscribeType_Subscribe: 's',\n                    SubscribeType_Unsubscribe: 'u'\n                },\n\n                /**\n                 * Defines the constants for (server) error messages.\n                 * @property {Object} Error\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                Error: {\n                    MessageType: '$ERR',\n                    ErrorText: 'e',\n                    Exception: 'ex',\n                    SourceMessage: 'src',\n                    Timestamp: 'ts'\n                },\n\n                /**\n                 * Defines the constants for exchange rate update messages.\n                 * @property {Object} ExchangeRate\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                ExchangeRate: {\n                    MessageType: \"EXR\",\n\n                    BaseCurrency: \"bc\",\n                    CurrencyPair: \"cp\",\n                    QuoteCurrency: \"qc\",\n                    Rate: \"r\"\n                },\n\n                /**\n                 * Defines the constants for exchange rate subscription messages.\n                 * @property {Object} ExchangeRateSubscription\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                ExchangeRateSubscription: {\n                    MessageType: 'EXRS',\n\n                    CurrencyPairArray: 'cpa',\n                    CurrencyPairArray_Object: {\n                        CurrencyPair: 'cp'\n                    },\n                    SubscribeType: '$st',\n                    SubscribeType_Subscribe: 's',\n                    SubscribeType_Unsubscribe: 'u'\n                },\n\n                /**\n                 * Defines the constants for execution report update messages.\n                 * @property {Object} ExecutionReport\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                ExecutionReport: {\n                    MessageType: 'ER',\n\n                    CurrencyName: 'cn',\n                    CurrencySymbol: 'cs',\n                    HasGuaranteedStop: 'hgs',\n                    HasTrailingStop: 'hts',\n                    LimitOrderID: 'loid',\n                    LimitOrderLevel: 'lol',\n                    MarketID: 'mi',\n                    MarketName: 'mn',\n                    MaxStopOrderPips: 'msop',\n                    OpenPnL: 'upnl',\n                    OrderStatus: 'os',\n                    OrderStatus_Cancelled: 'c', // Cancelled: '4',\n                    OrderStatus_Dealer: 'd', // Dealer: 'D',\n                    OrderStatus_Executed: 'e',\n                    OrderStatus_Expired: 'x', // Expired: 'C',\n                    OrderStatus_Filled: 'f', // Filled: '2',\n                    OrderStatus_PriceReject: 'z', // PriceReject: 'Z',\n                    OrderStatus_Rejected: 'j', // Rejected: '8',\n                    OrderStatus_Requoted: 'r', // Requoted: 'R',\n                    OrderStatus_Stopped: 's', // Stopped: '7',\n                    OrderStatus_Working: 'w', // Working: '0',\n                    Price: 'p',\n                    PriceTraded: 'pt',\n                    Quantity: 'q',\n                    RequotedPrice: 'rqp',\n                    RequotedQuoteID: 'rqi',\n                    RequotedTimeout: 'rqt',\n                    Side: 'si',\n                    Side_Buy: 'b',\n                    Side_Sell: 's',\n                    ServerTradeIdentifier: 'tid',\n                    ServerTransactionTime: 'stt',\n                    StopOrderID: 'soid',\n                    StopOrderLevel: 'sol',\n                    Text: 'txt',\n                    TransactionTime: 'tt',\n                    UniqueClientIdentifier: 'uid'\n                },\n\n                /**\n                 * Defines the constants for group markets update messages.\n                 * @property {Object} GroupMarkets\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                GroupMarkets: {\n                    MessageType: 'GM',\n\n                    GroupID: 'gi',\n                    MarketsCount: 'mc',\n                    MarketsArray: 'ma',\n                    MarketsArray_Object: {\n                        Action: '$act',\n                        Action_Added: 'a',\n                        Action_Updated: 'u',\n                        Action_Deleted: 'd',\n                        MarketID: 'mi',\n                        SortOrder: 'so'\n                    }\n                },\n\n                /**\n                 * Defines the constants for group markets subscription messages.\n                 * @property {Object} GroupMarketsSubscription\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                GroupMarketsSubscription: {\n                    MessageType: 'GMS',\n\n                    GroupsArray: 'ga',\n                    GroupsArray_Object: {\n                        GroupID: 'gi'\n                    },\n                    SubscribeType: '$st',\n                    SubscribeType_Subscribe: 's',\n                    SubscribeType_Unsubscribe: 'u'\n                },\n\n                /**\n                 * Defines the constants for group search messages.\n                 * @property {Object} GroupSearch\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                GroupSearch: {\n                    MessageType: 'GSRQ',\n\n                    ParentGroupID: 'pgi',\n                    UniqueClientIdentifier: 'uid'\n                },\n\n                /**\n                 * Defines the constants for group search response messages.\n                 * @property {Object} GroupSearchResponse\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                GroupSearchResponse: {\n                    MessageType: 'GSRS',\n\n                    GroupsCount: 'gc',\n                    GroupsArray: 'ga',\n                    GroupsArray_Object: {\n                        AssetClassArray: 'aca',\n                        AssetClassArray_Object: {\n                            AssetClass: 'ac',\n                            AssetClass_CFD: 'cfd',\n                            AssetClass_FX: 'fx',\n                            AssetClass_SB: 'sb'\n                        },\n                        AssetClassCount: 'acc',\n                        GroupID: 'gi',\n                        GroupName: 'gn',\n                        HasChildGroups: 'hcg',\n                        HasMarkets: 'hm',\n                        ParentGroupID: 'pgi',\n                        SortOrder: 'so'\n                    },\n                    UniqueClientIdentifier: 'uid'\n                },\n\n                /**\n                 * Defines the constants for historic trade update messages.\n                 * @property {Object} HistoricTrade\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                HistoricTrade: {\n                    MessageType: 'HT',\n\n                    AdminUserID: 'aui',\n                    AssetClass: 'ac',\n                    AssetClass_CFD: 'cfd',\n                    AssetClass_FX: 'fx',\n                    AssetClass_SB: 'sb',\n                    BinaryTimestamp: 'bt',\n                    CashPrice: 'cp',\n                    CreatedBy: 'crb',\n                    CurrencyName: 'cn',\n                    DealerName: 'dn',\n                    DecimalPlaces: 'dp',\n                    Deleted: '$del',\n                    ForcedIncrement: 'fi',\n                    Market: 'm',\n                    MarketID: 'mi',\n                    Price: 'p',\n                    Quantity: 'q',\n                    Side: 'si',\n                    Side_Buy: 'b',\n                    Side_Sell: 's',\n                    SubAccountID: 'sai',\n                    TimeStamp: 'ts',\n                    TradeID: 'ti',\n                    TradeReason: 'tr',\n                    TradeReason_Admin: 'a',\n                    TradeReason_Client: 'c',\n                    TradeReason_ClientAPI: 'ca',\n                    TradeReason_EndOfDayProcessor: 'eodp',\n                    TradeReason_Liquidation: 'l',\n                    TradeReason_Mobile: 'm',\n                    TradeReason_Order: 'o',\n                    TradeReason_Rebook: 'r',\n                    TradeReason_STP: 's',\n                    TradeReason_TradeableAPI: 'ta',\n                    TradeReason_Unknown: 'u',\n                    TradeReasonInfo: 'tri',\n                    XRefType: 'xr'\n                },\n\n                /**\n                 * Defines the constants for historic trade subscription messages.\n                 * @property {Object} HistoricTradeSubscription\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                HistoricTradeSubscription: {\n                    MessageType: 'HTS',\n\n                    SubscribeType: '$st',\n                    SubscribeType_Subscribe: 's',\n                    SubscribeType_Unsubscribe: 'u'\n                },\n\n                /**\n                 * Defines the constants for log off messages.\n                 * @property {Object} LogOff\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                LogOff: {\n                    MessageType: 'LORQ',\n\n                    ReasonCode: 'rc',\n                    ReasonCode_UserLoggedOut: 'u',\n                    Text: 'txt'\n                },\n\n                /**\n                 * Defines the constants for log off response messages.\n                 * @property {Object} LogOffResponse\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                LogOffResponse: {\n                    MessageType: 'LORS',\n\n                    ReasonCode: 'rc',\n                    ReasonCode_LogOnFailure: 'l',\n                    ReasonCode_UserLoggedOut: 'u',\n                    ReasonCode_LoggedInElsewhere: 'm',\n                    ReasonCode_AdminLogOut: 'a',\n                    ReasonCode_TimedOut: 't',\n                    ReasonCode_Undefined: '?',\n                    Text: 'txt'\n                },\n\n                /**\n                 * Defines the constants for log on messages.\n                 * @property {Object} LogOn\n                 * @member ETX.clientAPI.Constants.messages\n                 * @static\n                 * @readonly\n                 */\n                LogOn: {\n                    MessageType: 'LRQ',\n\n                    AnonymityToken: 'at',\n                    APIType: 'api',\n                    APIVersion: 'apiv',\n                    Broker: 'b',\n                    Password: 'p',\n                    Username: 'u',\n                    AuthenticationKey: 'ak'\n    },\n\n            /**\n             * Defines the constants for log on response messages.\n             * @property {Object} LogOnResponse\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            LogOnResponse: {\n                MessageType: 'LRS',\n\n                Text: 'txt'\n            },\n\n            /**\n             * Defines the constants for market update messages.\n             * @property {Object} Market\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            Market: {\n                MessageType: 'M',\n\n                Allow24hr: 'a24',\n                Ask: 'a',\n                AssetClass: 'ac',\n                AssetClass_CFD: 'cfd',\n                AssetClass_FX: 'fx',\n                AssetClass_SB: 'sb',\n                Bid: 'b',\n                ChangeOnDay: 'ch',\n                ChartCode: 'cc',\n                ChartInstrument: 'ci',\n                CloseTime: 'ct',\n                ClosingPrice: 'cp',\n                ContractSize: 'cs',\n                DealTicketTimeout: 'dtt',\n                DecimalPlaces: 'dp',\n                DefaultStake: 'ds',\n                Deleted: '$del',\n                Direction: 'd',\n                Duration: 'du',\n                EndOfTradingDay: 'end',\n                Exchange: 'exc',\n                Expiry: 'exp',\n                ForcedIncrement: 'fi',\n                FSACode: 'fsa',\n                GuaranteedStopChargeType: 'gsct',\n                GuaranteedStopChargeAmount: 'gsca',\n                GuaranteedStopOn: 'gso',\n                GuaranteedStopExtraSpread: 'gses',\n                GuaranteedStopExtraSpreadType: 'gsest',\n                GuaranteedStopMinOrderDistance: 'gsmo',\n                GuaranteedStopMinOrderDistanceType: 'gsmot',\n                GuaranteedStopPermittedOnOrders: 'gsor',\n                High: 'h',\n                IMR: 'im',\n                InternetTrade: 'it',\n                IsOpen: 'op',\n                IsOutOfHours: 'ooh',\n                IsTradedInLots: 'til',\n                LastPriceTimeStamp: 'lp',\n                LastTradeTime: 'ltt',\n                LotDescription: 'ld',\n                LotSize: 'ls',\n                Low: 'l',\n                MarketCurrency: 'mc',\n                MarketID: 'mi',\n                MarketName: 'mn',\n                MarketStatus: 'st',\n                MarketType: 'mt',\n                MaxNightStake: 'mxns',\n                MaxStake: 'mxs',\n                MinIMR: 'mimr',\n                MinStake: 'ms',\n                OpenCloseInfo: 'oci',\n                OpenStatus: 'os',\n                OpenTime: 'ot',\n                OrderDistanceType: 'odt',\n                OrderDistanceValue: 'odv',\n                PipSize: 'psz',\n                PipValue: 'pv',\n                PriceScale: 'ps',\n                QuoteCurrency: 'qc',\n                RoundToNearest: 'rtn',\n                Spread: 'sp',\n                StepSize: 'ss',\n                //TelephoneTrade: 'tt',\n                ValueDate: 'vd'\n            },\n\n            /**\n             * Defines the constants for market subscription messages.\n             * @property {Object} MarketSubscription\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            MarketSubscription: {\n                MessageType: 'MS',\n\n                SubscribeType: '$st',\n                SubscribeType_Subscribe: 's',\n                SubscribeType_Unsubscribe: 'u',\n                MarketsArray: 'ma',\n                MarketsArray_Object: {\n                    MarketID: 'mi'\n                }\n            },\n\n            /**\n             * Defines the constants for market search messages.\n             * @property {Object} MarketSearch\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            MarketSearch: {\n                MessageType: 'MSRQ',\n\n                SearchTerm: 'st',\n                SearchConstraint: 'sc',\n                SearchConstraint_StartsWith: 'sw',\n                SearchConstraint_Contains: 'c',\n                UniqueClientIdentifier: 'uid'\n            },\n\n            /**\n             * Defines the constants for market search response messages.\n             * @property {Object} MarketSearchResponse\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            MarketSearchResponse: {\n                MessageType: 'MSRS',\n\n                MarketsArray: 'ma',\n                MarketsArray_Object: {\n                    MarketID: 'mi',\n                    MarketName: 'name',\n                },\n                UniqueClientIdentifier: 'uid'\n            },\n\n            /**\n             * Defines the constants for open trade update messages.\n             * @property {Object} OpenTrade\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            OpenTrade: {\n                MessageType: 'OT',\n\n                AssetClass: 'ac',\n                AssetClass_CFD: 'cfd',\n                AssetClass_FX: 'fx',\n                AssetClass_SB: 'sb',\n                CreatedBy: 'crb',\n                CurrentPrice: 'cp',\n                Deleted: '$del',\n                LimitOrderID: 'loi',\n                LimitOrderLevel: 'lol',\n                MarginReserved: 'mr',\n                MarketID: 'mi',\n                MarketName: 'mn',\n                Price: 'p',\n                OpenPnL: 'upnl',\n                Quantity: 'q',\n                Side: 'si',\n                Side_Buy: 'b',\n                Side_Sell: 's',\n                StopOrderID: 'soi',\n                StopOrderLevel: 'sol',\n                SubAccountID: 'sai',\n                TradeID: 'ti',\n                TransactionTime: 'tt',\n                XRefType: 'xr'\n            },\n\n            /**\n             * Defines the constants for open trade subscription messages.\n             * @property {Object} OpenTradeSubscription\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            OpenTradeSubscription: {\n                MessageType: 'OTS',\n\n                SubscribeType: '$st',\n                SubscribeType_Subscribe: 's',\n                SubscribeType_Unsubscribe: 'u'\n            },\n\n            /**\n             * Defines the constants for order request messages.\n             * @property {Object} OrderRequest\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            OrderRequest: {\n                MessageType: 'ORQ',\n\n                AlertMessage: 'am',\n                CancellingOrderID: 'coi',\n                ClosingOrders: {\n                    TradeID: 'ti',\n                    LimitOrderLevel: 'cllol',\n                    LimitOrderID: 'clloi',\n                    LimitOrderOn: 'clloo',\n                    StopOrderGuaranteedOn: 'clsogo',\n                    StopOrderID: 'clsoi',\n                    StopOrderLevel: 'clsol',\n                    StopOrderOn: 'clsoo',\n                    StopOrderTrailingIncrementSize: 'clsotis',\n                    StopOrderTrailingOn: 'clsoto'\n                },\n                EmailAlertOn: 'eao',\n                MarketID: 'mi',\n                NewOrders: {\n                    GoodTilDateTime: 'gttd',\n                    GoodTilType: 'gtt',\n                    GoodTilType_Cancelled: 'c',\n                    GoodTilType_DateTime: 'd',\n                    GoodTilType_EndOfDay: 'eod',\n                    OCO: {\n                        Level: 'ocol',\n                        LimitOrderLevel: 'ocolol',\n                        LimitOrderOn: 'ocoloo',\n                        OrderID: 'ocooi',\n                        Quantity: 'ocoq',\n                        Side: 'ocosi',\n                        Side_Buy: 'b',\n                        Side_Sell: 's',\n                        StopOrderGuaranteedOn: 'ocosogo',\n                        StopOrderLevel: 'ocosol',\n                        StopOrderOn: 'ocosoo',\n                        StopOrderTrailingIncrementSize: 'ocosotis',\n                        StopOrderTrailingOn: 'ocosoto'\n                    },\n                    OCOOn: 'ocooo',\n                    OrderGroupID: 'ogi',\n                    Primary: {\n                        Level: 'pol',\n                        LimitOrderLevel: 'polol',\n                        LimitOrderOn: 'poloo',\n                        OrderID: 'pooi',\n                        Quantity: 'poq',\n                        Side: 'posi',\n                        Side_Buy: 'b',\n                        Side_Sell: 's',\n                        StopOrderGuaranteedOn: 'posogo',\n                        StopOrderLevel: 'posol',\n                        StopOrderOn: 'posoo',\n                        StopOrderTrailingIncrementSize: 'posotis',\n                        StopOrderTrailingOn: 'posoto'\n                    }\n                },\n                OrderRequestType: 'ort',\n                OrderRequestType_Amend: 'a',\n                OrderRequestType_Cancel: 'c',\n                OrderRequestType_New: 'n',\n                SMSAlertOn: 'sao',\n                SubAccountID: 'sai',\n                TransactionTime: 'tt',\n                UniqueClientIdentifier: 'uid'\n            },\n\n            /**\n             * Defines the constants for poll messages.\n             * @property {Object} Poll\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            Poll: {\n                MessageType: 'P',\n\n                ClientTime: 'ct'\n            },\n\n            /**\n             * Defines the constants for portfolio update messages.\n             * @property {Object} Portfolio\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            Portfolio: {\n                MessageType: 'PF',\n\n                Deleted: '$del',\n                PortfolioID: 'pi',\n                MarketsCount: 'mc',\n                MarketsArray: 'ma',\n                MarketsArray_Object: {\n                    Action: '$act',\n                    Action_Added: 'a',\n                    Action_Updated: 'u',\n                    Action_Deleted: 'd',\n                    MarketID: 'mi',\n                    SortOrder: 'so'\n                }\n            },\n\n            /**\n             * Defines the constants for portfolio add market messages.\n             * @property {Object} PortfolioAddMarket\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            PortfolioAddMarket: {\n                MessageType: 'PFAMRQ',\n\n                PortfolioID: 'pi',\n                MarketID: 'mi'\n            },\n\n            /**\n             * Defines the constants for portfolio remove market messages.\n             * @property {Object} PortfolioRemoveMarket\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            PortfolioRemoveMarket: {\n                MessageType: 'PFRMRQ',\n\n                PortfolioID: 'pi',\n                MarketID: 'mi'\n            },\n\n            /**\n             * Defines the constants for portfolio request messages.\n             * @property {Object} PortfolioRequest\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            /*\n            PortfolioRequest: {\n                MessageType: 'PFRQ',\n\n                PortfolioID: 'pi',\n                UniqueClientIdentifier: 'uid'\n            },\n\n            PortfolioRequestResponse: {\n                MessageType: 'PFRS',\n\n                PortfolioID: 'pi',    \n                MarketsCount: 'mc',\n                MarketsArray: 'ma',\n                MarketsArray_Object: {\n                    MarketID: 'mi'\n                },\n                UniqueClientIdentifier: 'uid'\n            },\n            */\n\n            /**\n             * Defines the constants for portfolio subscription messages.\n             * @property {Object} PortfolioSubscription\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            PortfolioSubscription: {\n                MessageType: 'PFS',\n\n                PortfoliosArray: 'pa',\n                PortfoliosArray_Object: {\n                    PortfolioID: 'pi'\n                },\n                SubscribeType: '$st',\n                SubscribeType_Subscribe: 's',\n                SubscribeType_Unsubscribe: 'u'\n            },\n\n            /**\n             * Defines the constants for price alert update messages.\n             * @property {Object} PriceAlert\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            PriceAlert: {\n                MessageType: 'PA',\n\n                AlertID: 'ai',\n                AlertMessage: 'am',\n                Deleted: '$del',\n                EmailAlertOn: 'eao',\n                HasFired: 'hf',\n                LastTriggered: 'lt',\n                MarketID: 'mi',\n                MarketName: 'm',\n                Side: 'si',\n                Side_Buy: 'b',\n                Side_Sell: 's',\n                SMSAlertOn: 'sao',\n                TransactionTime: 'tt',\n                TriggerPrice: 'tp'\n            },\n\n            /**\n             * Defines the constants for price alert request messages.\n             * @property {Object} PriceAlertRequest\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            PriceAlertRequest: {\n                MessageType: 'PARQ',\n\n                AlertID: 'ai',\n                AlertMessage: 'am',\n                EmailAlertOn: 'eao',\n                MarketID: 'mi',\n                PriceAlertRequestType: 'part',\n                PriceAlertRequestType_Amend: 'a',\n                PriceAlertRequestType_Cancel: 'c',\n                PriceAlertRequestType_New: 'n',\n                Side: 'si',\n                Side_Buy: 'b',\n                Side_Sell: 's',\n                SMSAlertOn: 'sao',\n                TransactionTime: 'tt',\n                TriggerPrice: 'tp',\n                UniqueClientIdentifier: 'uid'\n            },\n\n            /**\n             * Defines the constants for price alert request response messages.\n             * @property {Object} PriceAlertResponse\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            PriceAlertResponse: {\n                MessageType: 'PARS',\n\n                AlertID: 'ai',\n                Result: \"res\",\n                Result_Failure: \"f\",\n                Result_Success: \"s\",\n                Text: 'txt',\n                UniqueClientIdentifier: 'uid'\n            },\n\n            /**\n             * Defines the constants for price alert subscription messages.\n             * @property {Object} PriceAlertSubscription\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            PriceAlertSubscription: {\n                MessageType: 'PAS',\n\n                SubscribeType: '$st',\n                SubscribeType_Subscribe: 's',\n                SubscribeType_Unsubscribe: 'u'\n            },\n\n            /**\n             * Defines the constants for processed (executed/cancelled) order update messages.\n             * @property {Object} ProcessedOrder\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            ProcessedOrder: {\n                MessageType: 'PRO',\n\n                AccountID: 'ai',\n                AssetClass: 'ac',\n                CancelReason: 'cr',\n                CompletedDate: 'cpd',\n                CreatedBy: 'crb',\n                DecimalPlaces: 'dp',\n                Deleted: '$del',\n                ExecutePrice: 'ep',\n                ForcedIncrement: 'fi',\n                GoodTilDateTime: 'gttd',\n                GoodTilType: 'gtt',\n                GuaranteedStopsOn: 'gso',\n                Level: 'l',\n                MarketID: 'mi',\n                MarketName: 'mn',\n                OrderID: 'oi',\n                OrderStatus: 'os',\n                OrderStatus_Executed: 'e',\n                OrderStatus_Cancelled: 'c',\n                OrderStatus_Working: 'w',\n                OrderType: 'ot',\n                OrderType_Stop: 's',\n                OrderType_Limit: 'l',\n                OrderType_New: 'n',\n                OrderType_OCO: 'oco',\n                Quantity: 'q',\n                Side: 'si',\n                Side_Buy: 'b',\n                Side_Sell: 's',\n                SubAccountID: 'sai',\n                TradeID: 'ti',\n                TrailingStopsOn: 'tso',\n                TrailingStopIncrementSize: 'tsis',\n                TransactionTime: 'tt',\n                XRefType: 'xr'\n            },\n\n            /**\n             * Defines the constants for processed (executed/cancelled) order subscription messages.\n             * @property {Object} ProcessedOrderSubscription\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            ProcessedOrderSubscription: {\n                MessageType: 'PROS',\n\n                SubscribeType: '$st',\n                SubscribeType_Subscribe: 's',\n                SubscribeType_Unsubscribe: 'u'\n            },\n\n            /**\n             * Defines the constant for session ID \n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            SessionID: '$sid',\n\n            /**\n             * Defines the constants for sub-account update messages.\n             * @property {Object} SubAccount\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            SubAccount: {\n                MessageType: 'SA',\n\n                AccountID: 'ai',\n                //CashBalance: 'cb',\n                CreditAllocation: 'ca',\n                //CurrencyID: 'ci',\n                CurrencyName: 'cn',\n                CurrencySymbol: 'cs',\n                Deleted: '$del',\n                Funds: 'f',\n                //FundsAvailable: 'fa',\n                MarginReserved: 'mr',\n                MarginReservedManually: 'mrm',\n                MinBet: 'mb',\n                SpreadBettingEnabled: 'sbe',\n                SubAccountID: 'sai',\n                WMRA: 'wm'\n            },\n\n            /**\n             * Defines the constants for trade quote decline messages.\n             * @property {Object} TradeQuoteDecline\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            TradeQuoteDecline: {\n                MessageType: 'TQDRQ',\n\n                QuoteID: 'qi',\n                UniqueClientIdentifier: 'uid'\n            },\n\n            /**\n             * Defines the constants for trade quote request messages.\n             * @property {Object} TradeQuoteRequest\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            TradeQuoteRequest: {\n                MessageType: 'TQRQ',\n\n                MarketID: 'mi',\n                Quantity: 'q',\n                Side: 'si',\n                Side_Buy: 'b',\n                Side_Sell: 's',\n                TransactionTime: 'tt',\n                UniqueClientIdentifier: 'uid'\n            },\n\n            /**\n             * Defines the constants for trade quote request response messages.\n             * @property {Object} TradeQuoteResponse\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            TradeQuoteResponse: {\n                MessageType: 'TQRS',\n\n                QuotedAsk: 'qa',\n                QuotedBid: 'qb',\n                QuotedQuantity: 'qq',\n                QuoteID: 'qi',\n                QuoteStatus: \"qs\",\n                QuoteStatus_DealerClaim: \"c\",\n                QuoteStatus_DealerQuoted: \"q\",\n                QuoteStatus_DealerReject: \"r\",\n                QuoteStatus_Deleted: \"d\",\n                QuoteStatus_Timeout: \"t\",\n                QuoteStatus_Unknown: \"?\",\n                QuoteTimeout: \"qt\",\n                Text: 'txt',\n                TransactionTime: 'tt',\n                UniqueClientIdentifier: 'uid'\n            },\n\n            /**\n             * Defines the constants for trade request messages.\n             * @property {Object} TradeRequest\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            TradeRequest: {\n                MessageType: 'TR',\n\n                AlertMessage: 'am',\n                //ClosePosition: 'cp',     // Not supported yet!!!\n                ClosingTradeID: 'cti',\n                CurrencyName: 'cn',\n                EmailAlertOn: 'eao',\n                LimitOrderLevel: 'lol',\n                MarketID: 'mi',\n                Price: 'p',\n                Quantity: 'q',\n                QuoteID: 'qi',\n                Side: 'si',\n                Side_Buy: 'b',\n                Side_Sell: 's',\n                SMSAlertOn: 'sao',\n                StopOrderGuaranteedOn: 'sogo',\n                StopOrderLevel: 'sol',\n                StopOrderTrailingOn: 'soto',\n                StopOrderTrailingIncrementSize: 'sotis',\n                SubAccountID: 'sai',\n                TransactionTime: 'tt',\n                UniqueClientIdentifier: 'uid'\n            },\n\n            /**\n             * Defines the constants for trade re-quote response messages.\n             * @property {Object} TradeRequoteResponse\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            TradeRequoteResponse: {\n                MessageType: 'TRQRS',\n\n                QuoteID: 'qi',\n                Response: 'r',\n                UniqueClientIdentifier: 'uid'\n            },\n\n            /**\n             * Defines the constants for user settings request messages.\n             * @property {Object} UserSettingsRequest\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            UserSettingsRequest: {\n                MessageType: 'USRQ',\n\n                UniqueClientIdentifier: 'uid',\n                UserSettingsArray: 'usa',\n                UserSettingsArray_Object: {\n                    Deleted: '$del',\n                    Key: 'k',\n                    Value: 'v',\n                },\n                UserSettingsRequestType: 'usrt',\n                UserSettingsRequestType_Get: 'g',\n                UserSettingsRequestType_Overwrite: 'o',\n                UserSettingsRequestType_Update: 'u'\n            },\n\n            /**\n             * Defines the constants for user settings request response messages.\n             * @property {Object} UserSettingsResponse\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            UserSettingsResponse: {\n                MessageType: 'USRS',\n\n                Result: \"res\",\n                Result_Failure: \"f\",\n                Result_Success: \"s\",\n                Text: \"txt\",\n                UniqueClientIdentifier: 'uid',\n                UserSettingsArray: 'usa',\n                UserSettingsArray_Object: {\n                    Deleted: '$del',\n                    Key: 'k',\n                    Value: 'v'\n                }\n            },\n\n            /**\n             * Defines the constants for working order update messages.\n             * @property {Object} WorkingOrder\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            WorkingOrder: {\n                MessageType: 'WO',\n\n                AlertMessage: 'am',\n                AssetClass: 'ac',\n                AssetClass_CFD: 'cfd',\n                AssetClass_FX: 'fx',\n                AssetClass_SB: 'sb',\n                CompletedDate: 'cpd',\n                CreatedBy: 'crb',\n                CurrencyName: 'cn',\n                DecimalPlaces: 'dp',\n                Deleted: '$del',\n                EmailAlertOn: 'eao',\n                ExecutePrice: 'ep',             // Not convinced this is needed fo WOs...\n                GoodTilDateTime: 'gttd',\n                GoodTilType: 'gtt',\n                GoodTilType_Cancelled: 'c',\n                GoodTilType_DateTime: 'd',\n                GoodTilType_EndOfDay: 'eod',\n                GuaranteedStopsOn: 'gso',\n                Level: 'l',\n                LimitOrderID: 'loi',\n                LimitOrderLevel: 'lol',\n                MarketID: 'mi',\n                MarketName: 'mn',\n                OrderGroupID: 'ogi',\n                OrderID: 'oi',\n                OrderStatus: 'os',\n                OrderStatus_Executed: 'e',\n                OrderStatus_Cancelled: 'c',\n                OrderStatus_Working: 'w',\n                OrderType: 'ot',\n                OrderType_Limit: 'l',\n                OrderType_New: 'n',\n                OrderType_OCO: 'oco',\n                OrderType_Stop: 's',\n                Quantity: 'q',\n                Side: 'si',\n                Side_Buy: 'b',\n                Side_Sell: 's',\n                SMSAlertOn: 'sao',\n                StopOrderID: 'soi',\n                StopOrderLevel: 'sol',\n                SubAccountID: 'sai',\n                TradeID: 'ti',\n                TradePrice: 'tp',             // Not convinced this is needed fo WOs...\n                TrailingStopsOn: 'tso',\n                TrailingStopsIncrementSize: 'tsis',\n                TransactionTime: 'tt',\n                XRefType: 'xr'\n            },\n\n            /**\n             * Defines the constants for working order subscription messages.\n             * @property {Object} WorkingOrderSubscription\n             * @member ETX.clientAPI.Constants.messages\n             * @static\n             * @readonly\n             */\n            WorkingOrderSubscription: {\n                MessageType: 'WOS',\n\n                SubscribeType: '$st',\n                SubscribeType_Subscribe: 's',\n                SubscribeType_Unsubscribe: 'u'\n            }\n            // #endregion\n        },\n\n        // NOTE: These have deliberately been anotated WITHOUT '/**' comment tags, as they\n        //       should NOT be included in the documentation.\n        /*\n         * Defines the constants for transport type (e.g. websocket, long poll)\n         * @property {Object} TransportType\n         * @member ETX.clientAPI.Constants.TransportType\n         * @static\n         * @readonly\n         */\n        TransportType: {\n            LongPoll: 'LongPoll',\n            None: 'None',\n            WebSocket: 'WebSocket'\n        }\n    };\n    // #endregion\n    //----END-PUBLIC----------\n\n    return _constants;\n    // #endregion\n    //-END-CONSTRUCTOR--------\n\n})();\n\n/// <reference path=\"../../_references.js\" />\n\nETX.namespace('clientAPI');\n\n/**\n * @class ETX.clientAPI.Helpers \n *\n * @static\n * @singleton\n * @readonly\n *\n * @requires ETX\n * @requires ETX.logging.Logger\n * @requires CryptoJS.SHA256\n * @requires jQuery\n * @requires Moment.js\n *\n * `ETX.clientAPI.Helpers` singleton contains helper functions for the `ETX` modules.   \n *    \n * **NOTE:** Requires the following third-party JavaScript libraries:   \n *\n *  +  [CryptoJS.SHA256](https://code.google.com/p/crypto-js/)\n *  +  [jQuery](http://api.jquery.com/)\n *  +  [Moment.js](http://momentjs.com/)\n */\nETX.clientAPI.Helpers = (function () {\n\n    'use strict';\n\n    //-CONSTRUCTOR------------\n    // #region\n    //----PRIVATE-------------\n    var _helpers = {},\n        _customDateFormats = [\"YYYYMMDD-HH:mm:ss\"];\n    //----END-PRIVATE---------\n\n    //----PUBLIC--------------\n    _helpers = {\n\n        // Converters\n        // #region\n        /** \n         * Gets the (read only) section for conversion helpers.\n         * @property {ETX.clientAPI.Helpers.convert} convert\n         * @static\n         * @readonly\n         */\n        convert: {\n            toBoolean: toBoolean,\n            toDate: toDate,\n            toHash: toHash\n        },\n        // #endregion\n        // Converters\n\n\n        // Comparers\n        // #region\n        /** \n         * Gets the (read only) section for comparison helpers.\n         * @property {ETX.clientAPI.Helpers.compare} compare\n         * @static\n         * @readonly\n         */\n        compare: {\n            isIdentifier: isIdentifier,\n            isNullOrEmpty: isNullOrEmpty\n        },\n        // #endregion\n        // Comparers\n\n\n        // Formatters\n        // #region\n        /** \n         * Gets the (read only) section for formatting helpers.\n         * @property {ETX.clientAPI.Helpers.format} format\n         * @static\n         * @readonly\n         */\n        format: {\n            asAssetClassText: asAssetClassText,\n            asString: asString,\n            asYesNoFlag: asYesNoFlag,\n            asYesNoUndeterminedFlag: asYesNoUndeterminedFlag\n        },\n        // #endregion\n        // Formatters\n\n\n        // Utilities\n        // #region\n        /** \n         * Gets the (read only) section for utility helpers.\n         * @property {ETX.clientAPI.Helpers.utility} utilities\n         * @static\n         * @readonly\n         */\n        utility: {\n            ieVersion: ieVersion\n        }\n        // #endregion\n        // Utilities\n\n    };\n    //----END-PUBLIC----------\n\n    return _helpers;\n    // #endregion\n    //-END-CONSTRUCTOR--------\n\n\n    //-METHODS----------------\n    // #region\n    // Converters\n    // #region\n    /**\n     * Resolves the value provided to a Boolean value.\n     *\n     * @method toBoolean\n     * @param {Object} value - Value to resolve to a Boolean value.\n     * @returns {Boolean}\n     *\n     * @member ETX.clientAPI.Helpers.convert\n     * @static\n     */\n    function toBoolean(value) {\n        if (value === true) {\n            return true;\n        }\n        if (_helpers.compare.isNullOrEmpty(value) === false) {\n            switch (value.toString().toUpperCase()[0]) {\n                case 'Y':\n                case 'T':\n                case '1':\n                    return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Resolves the value provided to a Date value.\n     *\n     * @method toDate\n     * @param {Object} value - Value to resolve to a Date value.\n     * @param {String|Array} [formats] - (Optional) Array or individual date format string(s).\n     * @returns {Date}\n     *\n     * @member ETX.clientAPI.Helpers.convert\n     * @static\n     */\n    function toDate(value, formats) {\n        // Perform default\n        var date = moment(value);\n        if (date.isValid()) {\n            return date.toDate();\n        }\n        var fmts = [].concat(_customDateFormats);\n        if (formats) {\n            fmts = [].concat(fmts, formats);\n        }\n        date = moment(value, fmts.length == 1 ? fmts[0] : fmts);\n        if (date.isValid()) {\n            return date.toDate();\n        }\n        return undefined;\n    }\n\n    /**\n     * Encrypts the value provided using SHA256 hashing algorithm.\n     *\n     * @method toHash\n     * @param {Object} value - Value to SHA256 hash encrypt.\n     * @returns {String}\n     *\n     * @member ETX.clientAPI.Helpers.convert\n     * @static\n     */\n    function toHash(value) {\n        var hash = '',\n            hashDigest = CryptoJS.SHA256(value);\n        if (hashDigest) {\n            hash = hashDigest.toString();\n        }\n        return hash;\n    }\n    // #endregion\n    // Converters\n\n\n    // Comparers\n    // #region\n    /**\n     * Determines whether the value provided could potentially be an entity identifier.\n     *\n     * @method isIdentifier\n     * @param {Object} value - Value to test as an entity identifier.\n     * @returns {Boolean} - If true, then value could be an entity identifier, else the value is almost deifinitely not an entity identifier.\n     *\n     * @member ETX.clientAPI.Helpers.compare\n     * @static\n     */\n    function isIdentifier(value) {\n        if ((_helpers.compare.isNullOrEmpty(value) === false) && (value !== '0')) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Determines whether the value provided is `undefined`, `null` or an empty `String`.\n     *\n     * @method isNullOrEmpty\n     * @param {Object} value - Value to test.\n     * @returns {Boolean}\n     *\n     * @member ETX.clientAPI.Helpers.compare\n     * @static\n     */\n    function isNullOrEmpty(value) {\n        if ((value === undefined) || (value === null) || (value === '')) {\n            return true;\n        }\n        return false;\n    }\n    // #endregion\n    // Comparers\n\n\n    // Formatters\n    // #region\n    /**\n     * Formats the asset class provided as user friendly display text.\n     *\n     * @method asAssetClassText\n     * @param {Object} assetClass - Asset class to format as user friendly display text.\n     * @returns {String} - Formatted user friendly display text.\n     *\n     * @member ETX.clientAPI.Helpers.format\n     * @static\n     */\n    function asAssetClassText(assetClass) {\n        switch (assetClass) {\n            case 'cfd':\n            case '1':\n                { return 'CFD'; }\n            case 'fx':\n            case '2':\n                { return 'FX'; }\n            case 'sb':\n            case '3':\n                { return 'Spread'; }\n            default:\n                { return assetClass; }\n        }\n    }\n\n    /**\n     * Formats the value provided as a `String`.\n     *\n     * @method asString\n     * @param {Object} value - Value to format as a `String`.\n     * @returns {String} - Formatted `String`.\n     *\n     * @member ETX.clientAPI.Helpers.format\n     * @static\n     */\n    function asString(value) {\n        if (_helpers.compare.isNullOrEmpty(value) === false) {\n            return value.toString();\n        }\n        return '';\n    }\n\n    /**\n     * Formats the value provided as a yes/no flag (i.e. `'Y'` or `'N'`).\n     *\n     * @method asYesNoFlag\n     * @param {Object} value - Value to format as a yes/no flag.\n     * @returns {String} - Formatted yes/no flag.\n     *\n     * @member ETX.clientAPI.Helpers.format\n     * @static\n     */\n    function asYesNoFlag(value) {\n        if (_helpers.convert.toBoolean(value)) {\n            return 'Y';\n        }\n        return 'N';\n    }\n\n    /**\n     * Formats the value provided as a yes/no/undetermined flag (i.e. `'Y'`, `'N'` or `'?'`).\n     *\n     * @method asYesNoUndeterminedFlag\n     * @param {Object} value - Value to format as a yes/no flag.\n     * @param {String} [defaultUndeterminedFlag='?'] - (Optional) Default flag value to use for undetermined values.\n     * @returns {String} - Formatted yes/no/undetermined flag.\n     *\n     * @member ETX.clientAPI.Helpers.format\n     * @static\n     */\n    function asYesNoUndeterminedFlag(value, defaultUndeterminedFlag) {\n        if (defaultUndeterminedFlag === undefined) {\n            defaultUndeterminedFlag = '?';\n        }\n        if ((_helpers.compare.isNullOrEmpty(value) === false) && (value !== defaultUndeterminedFlag)) {\n            return _helpers.format.asYesNoFlag(value);\n        }\n        return defaultUndeterminedFlag;\n    }\n    // #endregion\n    // Formatters\n\n\n    // Utilities\n    // #region\n    /**\n     * Returns the version of Internet Explorer (or undefined if IE not detected or IE version is less than 5)\n     *\n     * @method ieVersion\n     * @returns {Number} - The IE version detected (or undefined if IE not detected or IE version is less than 5)\n     *\n     * @member ETX.clientAPI.Helpers.utility\n     * @static\n     */\n    function ieVersion() {\n        var undef, rv = -1; // Return value assumes failure.\n        var ua = window.navigator.userAgent;\n        var msie = ua.indexOf('MSIE ');\n        var trident = ua.indexOf('Trident/');\n\n        if (msie > 0) {\n            // IE 10 or older => return version number\n            rv = parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n        } else if (trident > 0) {\n            // IE 11 (or newer) => return version number\n            var rvNum = ua.indexOf('rv:');\n            rv = parseInt(ua.substring(rvNum + 3, ua.indexOf('.', rvNum)), 10);\n        }\n        return ((rv > -1) ? rv : undef);\n    }\n    // #endregion\n    // Utilities\n    // #endregion\n    //-END-METHODS------------\n\n})();\n\n/// <reference path=\"../../_references.js\" />\n\nETX.namespace('clientAPI');\n\nETX.clientAPI.Messages = (function () {\n\n    'use strict';\n\n    //-CONSTRUCTOR------------\n    // #region\n    //----PRIVATE-------------\n    // #region\n    var _messages = {},\n        _constMsgs = ETX.clientAPI.Constants.messages,\n        _helpers = ETX.clientAPI.Helpers;\n    // #endregion\n    //----END-PRIVATE---------\n\n    //----PUBLIC--------------\n    // #region\n    _messages.buildUniqueClientIdentifier = function (messageType, uniqueToken) {\n        var uid = messageType + '_' + uniqueToken;\n        return uid;\n    }\n    _messages.createAccountSubscribeMessage = function () {\n        var msg = { T: _constMsgs.AccountSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.AccountSubscription.SubscribeType] = _constMsgs.AccountSubscription.SubscribeType_Subscribe;\n        return msg;\n    };\n    _messages.createAccountUnsubscribeMessage = function () {\n        var msg = { T: _constMsgs.AccountSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.AccountSubscription.SubscribeType] = _constMsgs.AccountSubscription.SubscribeType_Unsubscribe;\n        return msg;\n    };\n    _messages.createAccountTransactionSubscribeMessage = function () {\n        var msg = { T: _constMsgs.AccountTransactionSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.AccountTransactionSubscription.SubscribeType] = _constMsgs.AccountTransactionSubscription.SubscribeType_Subscribe;\n        return msg;\n    };\n    _messages.createAccountTransactionUnsubscribeMessage = function () {\n        var msg = { T: _constMsgs.AccountTransactionSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.AccountTransactionSubscription.SubscribeType] = _constMsgs.AccountTransactionSubscription.SubscribeType_Unsubscribe;\n        return msg;\n    };\n    _messages.createAggregateAccountSubscribeMessage = function (subAccountIDs) {\n        var msg = { T: _constMsgs.AggregateAccountSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.AggregateAccountSubscription.SubscribeType] = _constMsgs.AggregateAccountSubscription.SubscribeType_Subscribe;\n        tags[_constMsgs.AggregateAccountSubscription.SubAccountArray] = [];\n\n        var idArray = tags[_constMsgs.AggregateAccountSubscription.SubAccountArray];\n        for (var n = 0; n < subAccountIDs.length; n++) {\n            var sa = {};\n            sa[_constMsgs.AggregateAccountSubscription.SubAccountArray_Object.SubAccountID] = subAccountIDs[n];\n            idArray.push(sa);\n        }\n        return msg;\n    };\n    _messages.createAggregateAccountUnsubscribeMessage = function (subAccountIDs) {\n        var msg = { T: _constMsgs.AggregateAccountSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.AggregateAccountSubscription.SubscribeType] = _constMsgs.AggregateAccountSubscription.SubscribeType_Unsubscribe;\n        tags[_constMsgs.AggregateAccountSubscription.SubAccountArray] = [];\n\n        var idArray = tags[_constMsgs.AggregateAccountSubscription.SubAccountArray];\n        for (var n = 0; n < subAccountIDs.length; n++) {\n            var sa = {};\n            sa[_constMsgs.AggregateAccountSubscription.SubAccountArray_Object.SubAccountID] = subAccountIDs[n];\n            idArray.push(sa);\n        }\n        return msg;\n    };\n    _messages.createClosedTradesSubscribeMessage = function () {\n        var msg = { T: _constMsgs.ClosedTradeSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.ClosedTradeSubscription.SubscribeType] = _constMsgs.ClosedTradeSubscription.SubscribeType_Subscribe;\n        return msg;\n    };\n    _messages.createClosedTradesUnsubscribeMessage = function () {\n        var msg = { T: _constMsgs.ClosedTradeSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.ClosedTradeSubscription.SubscribeType] = _constMsgs.ClosedTradeSubscription.SubscribeType_Unsubscribe;\n        return msg;\n    };\n    _messages.createExchangeRateSubscribeMessage = function (currencyPairs) {\n        var msg = { T: _constMsgs.ExchangeRateSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.ExchangeRateSubscription.SubscribeType] = _constMsgs.ExchangeRateSubscription.SubscribeType_Subscribe;\n        tags[_constMsgs.ExchangeRateSubscription.CurrencyPairArray] = [];\n\n        // Add each currency pair to the array\n        var repeatingGroupParent = tags[_constMsgs.ExchangeRateSubscription.CurrencyPairArray];\n        for (var n = 0; n < currencyPairs.length; n++) {\n            var exchangeRate = {};\n            exchangeRate[_constMsgs.ExchangeRate.CurrencyPair] = currencyPairs[n];\n            repeatingGroupParent.push(exchangeRate);\n        };\n        return msg;\n    };\n    _messages.createExchangeRateUnsubscribeMessage = function (currencyPairs) {\n        var msg = { T: _constMsgs.ExchangeRateSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.ExchangeRateSubscription.SubscribeType] = _constMsgs.ExchangeRateSubscription.SubscribeType_Unsubscribe;\n        tags[_constMsgs.ExchangeRateSubscription.CurrencyPairArray] = [];\n\n        // Add each currency pair to the array\n        var repeatingGroupParent = tags[_constMsgs.ExchangeRateSubscription.CurrencyPairArray];\n        for (var n = 0; n < currencyPairs.length; n++) {\n            var exchangeRate = {};\n            exchangeRate[_constMsgs.ExchangeRate.CurrencyPair] = currencyPairs[n];\n            repeatingGroupParent.push(exchangeRate);\n        };\n        return msg;\n    };\n    _messages.createGroupMarketSubscribeMessage = function (groupIDs) {\n        var msg = { T: _constMsgs.GroupMarketsSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.GroupMarketsSubscription.SubscribeType] = _constMsgs.GroupMarketsSubscription.SubscribeType_Subscribe;\n        tags[_constMsgs.GroupMarketsSubscription.GroupsArray] = [];\n\n        // Add each group to the array\n        var repeatingGroupParent = tags[_constMsgs.GroupMarketsSubscription.GroupsArray];\n        for (var n = 0; n < groupIDs.length; n++) {\n            var group = {};\n            group[_constMsgs.GroupMarketsSubscription.GroupsArray_Object.GroupID] = groupIDs[n];\n            repeatingGroupParent.push(group);\n        };\n        return msg;\n    };\n    _messages.createGroupMarketUnsubscribeMessage = function (groupIDs) {\n        var msg = { T: _constMsgs.GroupMarketsSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.GroupMarketsSubscription.SubscribeType] = _constMsgs.GroupMarketsSubscription.SubscribeType_Unsubscribe;\n        tags[_constMsgs.GroupMarketsSubscription.GroupsArray] = [];\n\n        // Add each group to the array\n        var repeatingGroupParent = tags[_constMsgs.GroupMarketsSubscription.GroupsArray];\n        for (var n = 0; n < groupIDs.length; n++) {\n            var group = {};\n            group[_constMsgs.GroupMarketsSubscription.GroupsArray_Object.GroupID] = groupIDs[n];\n            repeatingGroupParent.push(group);\n        };\n        return msg;\n    };\n    _messages.createGroupSearchMessage = function (uniqueClientIdentifier, parentGroupID) {\n        var msg = { T: _constMsgs.GroupSearch.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.GroupSearch.UniqueClientIdentifier] = uniqueClientIdentifier;\n        if (_helpers.compare.isIdentifier(parentGroupID)) {\n            tags[_constMsgs.GroupSearch.ParentGroupID] = parentGroupID;\n        }\n        return msg;\n    };\n    _messages.createHistoricTradesSubscribeMessage = function () {\n        var msg = { T: _constMsgs.HistoricTradeSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.HistoricTradeSubscription.SubscribeType] = _constMsgs.HistoricTradeSubscription.SubscribeType_Subscribe;\n        return msg;\n    };\n    _messages.createHistoricTradesUnsubscribeMessage = function () {\n        var msg = { T: _constMsgs.HistoricTradeSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.HistoricTradeSubscription.SubscribeType] = _constMsgs.HistoricTradeSubscription.SubscribeType_Unsubscribe;\n        return msg;\n    };\n    _messages.createLogOffMessage = function () {\n        var msg = { T: _constMsgs.LogOff.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.LogOff.ReasonCode] = _constMsgs.LogOff.ReasonCode_UserLoggedOut;\n        tags[_constMsgs.LogOff.Text] = 'User requested log off';\n        return msg;\n    };\n    _messages.createLogOnMessage = function (username, password, brokerID, anonymityToken, version, authenticationKey) {\n        var msg = { T: _constMsgs.LogOn.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.LogOn.Username] = username;\n        tags[_constMsgs.LogOn.Password] = password;\n        tags[_constMsgs.LogOn.Broker] = brokerID;\n        tags[_constMsgs.LogOn.AnonymityToken] = anonymityToken;\n        tags[_constMsgs.LogOn.APIType] = 'clientapi-js';\n        tags[_constMsgs.LogOn.APIVersion] = version || '1.00.00';\n        tags[_constMsgs.LogOn.AuthenticationKey] = authenticationKey;\n        return msg;\n    };\n    _messages.createLogOnMessageWithAuthKey = function (username, password, brokerID, anonymityToken, version, authenticationKey) {\n        var msg = { T: _constMsgs.LogOn.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.LogOn.Username] = username;\n        tags[_constMsgs.LogOn.AuthenticationKey] = authenticationKey;\n        tags[_constMsgs.LogOn.Password] = password;\n        tags[_constMsgs.LogOn.Broker] = brokerID;\n        tags[_constMsgs.LogOn.AnonymityToken] = anonymityToken;\n        tags[_constMsgs.LogOn.APIType] = 'clientapi-js';\n        tags[_constMsgs.LogOn.APIVersion] = version || '1.00.00';\n        return msg;\n    };\n    _messages.createMarketSearchMessage = function (uniqueClientIdentifier, searchTerm, searchConstraint) {\n        var msg = { T: _constMsgs.MarketSearch.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.MarketSearch.UniqueClientIdentifier] = uniqueClientIdentifier;\n        tags[_constMsgs.MarketSearch.SearchTerm] = searchTerm;\n        if (searchConstraint === _constMsgs.MarketSearch.SearchConstraint_StartsWith) {\n            tags[_constMsgs.MarketSearch.SearchConstraint] = _constMsgs.MarketSearch.SearchConstraint_StartsWith;\n        } else {\n            tags[_constMsgs.MarketSearch.SearchConstraint] = _constMsgs.MarketSearch.SearchConstraint_Contains;\n        }\n        return msg;\n    };\n    _messages.createMarketSubscribeMessage = function (saMarkets) {\n        var msg = { T: _constMsgs.MarketSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.MarketSubscription.SubscribeType] = _constMsgs.MarketSubscription.SubscribeType_Subscribe;\n        tags[_constMsgs.MarketSubscription.MarketsArray] = [];\n\n        // Add each market to the array\n        var repeatingGroupParent = tags[_constMsgs.MarketSubscription.MarketsArray];\n        for (var n = 0; n < saMarkets.length; n++) {\n            var market = {};\n            market[_constMsgs.MarketSubscription.MarketsArray_Object.MarketID] = saMarkets[n];\n            repeatingGroupParent.push(market);\n        };\n        return msg;\n    };\n    _messages.createMarketUnsubscribeMessage = function (saMarkets) {\n        var msg = { T: _constMsgs.MarketSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.MarketSubscription.SubscribeType] = _constMsgs.MarketSubscription.SubscribeType_Unsubscribe;\n        tags[_constMsgs.MarketSubscription.MarketsArray] = [];\n\n        // Add each market to the array\n        var repeatingGroupParent = tags[_constMsgs.MarketSubscription.MarketsArray];\n        for (var n = 0; n < saMarkets.length; n++) {\n            var market = {};\n            market[_constMsgs.MarketSubscription.MarketsArray_Object.MarketID] = saMarkets[n];\n            repeatingGroupParent.push(market);\n        };\n        return msg;\n    };\n    _messages.createOpenTradesSubscribeMessage = function () {\n        var msg = { T: _constMsgs.OpenTradeSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.OpenTradeSubscription.SubscribeType] = _constMsgs.OpenTradeSubscription.SubscribeType_Subscribe;\n        return msg;\n    };\n    _messages.createOpenTradesUnsubscribeMessage = function () {\n        var msg = { T: _constMsgs.OpenTradeSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.OpenTradeSubscription.SubscribeType] = _constMsgs.OpenTradeSubscription.SubscribeType_Unsubscribe;\n        return msg;\n    };\n    _messages.createOrderRequestMessage = function (uniqueClientIdentifier, transactiontime, orderRequest) {\n        var msg = { T: _constMsgs.OrderRequest.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.OrderRequest.UniqueClientIdentifier] = uniqueClientIdentifier;\n        tags[_constMsgs.OrderRequest.TransactionTime] = transactiontime;\n\n        // Core\n        // #region\n        switch ((orderRequest.orderRequestType || '').toLowerCase()) {\n            case 'new':\n            case ETX.clientAPI.requests.OrderRequest.requestTypes.NEW:\n                tags[_constMsgs.OrderRequest.OrderRequestType] = _constMsgs.OrderRequest.OrderRequestType_New;\n                break;\n\n            case 'amend':\n            case ETX.clientAPI.requests.OrderRequest.requestTypes.AMEND:\n                tags[_constMsgs.OrderRequest.OrderRequestType] = _constMsgs.OrderRequest.OrderRequestType_Amend;\n                break;\n\n            case 'cancel':\n            case ETX.clientAPI.requests.OrderRequest.requestTypes.CANCEL:\n                tags[_constMsgs.OrderRequest.OrderRequestType] = _constMsgs.OrderRequest.OrderRequestType_Cancel;\n                break;\n        }\n        tags[_constMsgs.OrderRequest.MarketID] = orderRequest.marketID;\n        // #endregion\n        // Core\n\n        switch (tags[_constMsgs.OrderRequest.OrderRequestType]) {\n\n            // ORDER NEW/AMEND\n            case _constMsgs.OrderRequest.OrderRequestType_New:\n            case _constMsgs.OrderRequest.OrderRequestType_Amend:\n                {\n                    // Core\n                    // #region\n                    tags[_constMsgs.OrderRequest.SubAccountID] = orderRequest.subAccountID;\n                    // #endregion\n                    // Core\n\n                    // Include the trade ID of the closing order(s) to be cancelled, if any...\n                    if (_helpers.compare.isIdentifier(orderRequest.closingOrders.tradeID) == false) {\n\n                        // OCO specific\n                        // #region\n                        if (_helpers.compare.isIdentifier(orderRequest.newOrders.orderGroupID)) {\n                            tags[_constMsgs.OrderRequest.OrderGroupID] = orderRequest.newOrders.orderGroupID;\n                        }\n                        // #endregion\n                        // OCO specific\n\n                        // Primary Order specific\n                        // #region\n                        // Include the primary order details...\n                        if (_helpers.compare.isIdentifier(orderRequest.newOrders.primaryOrder.orderID)) {\n                            tags[_constMsgs.OrderRequest.NewOrders.Primary.OrderID] = orderRequest.newOrders.primaryOrder.orderID;\n                        }\n                        switch ((orderRequest.newOrders.primaryOrder.side || '').toLowerCase()) {\n                            case 'buy':\n                            case ETX.clientAPI.requests.OrderRequest.sides.BUY:\n                                tags[_constMsgs.OrderRequest.NewOrders.Primary.Side] = _constMsgs.OrderRequest.NewOrders.Primary.Side_Buy;\n                                break;\n\n                            case 'sell':\n                            case ETX.clientAPI.requests.OrderRequest.sides.SELL:\n                                tags[_constMsgs.OrderRequest.NewOrders.Primary.Side] = _constMsgs.OrderRequest.NewOrders.Primary.Side_Sell;\n                                break;\n                        }\n                        tags[_constMsgs.OrderRequest.NewOrders.Primary.Level] = _helpers.format.asString(orderRequest.newOrders.primaryOrder.level);\n                        tags[_constMsgs.OrderRequest.NewOrders.Primary.Quantity] = _helpers.format.asString(orderRequest.newOrders.primaryOrder.quantity);\n                        // Include the primary stop order details...\n                        tags[_constMsgs.OrderRequest.NewOrders.Primary.StopOrderOn] = _helpers.convert.toBoolean(orderRequest.newOrders.primaryOrder.stopOrderOn);\n                        if (tags[_constMsgs.OrderRequest.NewOrders.Primary.StopOrderOn]) {\n                            tags[_constMsgs.OrderRequest.NewOrders.Primary.StopOrderLevel] = _helpers.format.asString(orderRequest.newOrders.primaryOrder.stopOrderLevel);\n                            tags[_constMsgs.OrderRequest.NewOrders.Primary.StopOrderGuaranteedOn] = _helpers.convert.toBoolean(orderRequest.newOrders.primaryOrder.stopOrderGuaranteedOn);\n                            tags[_constMsgs.OrderRequest.NewOrders.Primary.StopOrderTrailingOn] = _helpers.convert.toBoolean(orderRequest.newOrders.primaryOrder.stopOrderTrailingOn);\n                            tags[_constMsgs.OrderRequest.NewOrders.Primary.StopOrderTrailingIncrementSize] = _helpers.format.asString(orderRequest.newOrders.primaryOrder.stopOrderTrailingIncrementSize);\n                        }\n                        // Include the primary limit order details...\n                        tags[_constMsgs.OrderRequest.NewOrders.Primary.LimitOrderOn] = _helpers.convert.toBoolean(orderRequest.newOrders.primaryOrder.limitOrderOn);\n                        if (tags[_constMsgs.OrderRequest.NewOrders.Primary.LimitOrderOn]) {\n                            tags[_constMsgs.OrderRequest.NewOrders.Primary.LimitOrderLevel] = _helpers.format.asString(orderRequest.newOrders.primaryOrder.limitOrderLevel);\n                        }\n                        // #endregion\n                        // Primary Order specific\n\n                        // OCO Order specific\n                        // #region\n                        tags[_constMsgs.OrderRequest.NewOrders.OCOOn] = _helpers.convert.toBoolean(orderRequest.newOrders.ocoOrderOn);\n                        if (tags[_constMsgs.OrderRequest.NewOrders.OCOOn]) {\n                            // Include the OCO order details...\n                            if (_helpers.compare.isIdentifier(orderRequest.newOrders.ocoOrder.orderID)) {\n                                tags[_constMsgs.OrderRequest.NewOrders.OCO.OrderID] = orderRequest.newOrders.ocoOrder.orderID;\n                            }\n                            switch ((orderRequest.newOrders.ocoOrder.side || '').toLowerCase()) {\n                                case 'buy':\n                                case ETX.clientAPI.requests.OrderRequest.sides.BUY:\n                                    tags[_constMsgs.OrderRequest.NewOrders.OCO.Side] = _constMsgs.OrderRequest.NewOrders.OCO.Side_Buy;\n                                    break;\n\n                                case 'sell':\n                                case ETX.clientAPI.requests.OrderRequest.sides.SELL:\n                                    tags[_constMsgs.OrderRequest.NewOrders.OCO.Side] = _constMsgs.OrderRequest.NewOrders.OCO.Side_Sell;\n                                    break;\n                            }\n                            tags[_constMsgs.OrderRequest.NewOrders.OCO.Side] = orderRequest.newOrders.ocoOrder.side;\n                            tags[_constMsgs.OrderRequest.NewOrders.OCO.Level] = _helpers.format.asString(orderRequest.newOrders.ocoOrder.level);\n                            tags[_constMsgs.OrderRequest.NewOrders.OCO.Quantity] = _helpers.format.asString(orderRequest.newOrders.ocoOrder.quantity);\n                            // Include the OCO stop order details...\n                            tags[_constMsgs.OrderRequest.NewOrders.OCO.StopOrderOn] = _helpers.convert.toBoolean(orderRequest.newOrders.ocoOrder.stopOrderOn);\n                            if (tags[_constMsgs.OrderRequest.NewOrders.OCO.StopOrderOn]) {\n                                tags[_constMsgs.OrderRequest.NewOrders.OCO.StopOrderLevel] = _helpers.format.asString(orderRequest.newOrders.ocoOrder.stopOrderLevel);\n                                tags[_constMsgs.OrderRequest.NewOrders.OCO.StopOrderGuaranteedOn] = _helpers.convert.toBoolean(orderRequest.newOrders.ocoOrder.stopOrderGuaranteedOn);\n                                tags[_constMsgs.OrderRequest.NewOrders.OCO.StopOrderTrailingOn] = _helpers.convert.toBoolean(orderRequest.newOrders.ocoOrder.stopOrderTrailingOn);\n                                tags[_constMsgs.OrderRequest.NewOrders.OCO.StopOrderTrailingIncrementSize] = _helpers.format.asString(orderRequest.newOrders.ocoOrder.stopOrderTrailingIncrementSize);\n                            }\n                            // Include the OCO limit order details...\n                            tags[_constMsgs.OrderRequest.NewOrders.OCO.LimitOrderOn] = _helpers.convert.toBoolean(orderRequest.newOrders.ocoOrder.limitOrderOn);\n                            if (tags[_constMsgs.OrderRequest.NewOrders.OCO.LimitOrderOn]) {\n                                tags[_constMsgs.OrderRequest.NewOrders.OCO.LimitOrderLevel] = _helpers.format.asString(orderRequest.newOrders.ocoOrder.limitOrderLevel);\n                            }\n                        }\n                        // #endregion\n                        // OCO Order specific\n\n                        // Misc\n                        // #region\n                        // Include the good til details...\n                        switch ((orderRequest.newOrders.goodTilType || '').toLowerCase()) {\n                            case 'cancelled':\n                            case ETX.clientAPI.requests.OrderRequest.goodTilTypes.CANCELLED:\n                                tags[_constMsgs.OrderRequest.NewOrders.GoodTilType] = _constMsgs.OrderRequest.NewOrders.GoodTilType_Cancelled;\n                                break;\n\n                            case 'endofday':\n                            case ETX.clientAPI.requests.OrderRequest.goodTilTypes.END_OF_DAY:\n                                tags[_constMsgs.OrderRequest.NewOrders.GoodTilType] = _constMsgs.OrderRequest.NewOrders.GoodTilType_EndOfDay;\n                                break;\n\n                            case 'date':\n                            case ETX.clientAPI.requests.OrderRequest.goodTilTypes.DATE:\n                                tags[_constMsgs.OrderRequest.NewOrders.GoodTilType] = _constMsgs.OrderRequest.NewOrders.GoodTilType_DateTime;\n                                var goodTilDateTime = moment(orderRequest.newOrders.goodTilDateTime);\n                                tags[_constMsgs.OrderRequest.NewOrders.GoodTilDateTime] = goodTilDateTime.isValid() ? goodTilDateTime.toISOString() : orderRequest.newOrders.goodTilDateTime;\n                                break;\n                        }\n                        // Include the alert details...\n                        tags[_constMsgs.OrderRequest.EmailAlertOn] = _helpers.convert.toBoolean(orderRequest.emailAlertOn);\n                        tags[_constMsgs.OrderRequest.SMSAlertOn] = _helpers.convert.toBoolean(orderRequest.smsAlertOn);\n                        tags[_constMsgs.OrderRequest.AlertMessage] = orderRequest.alertMessage;\n                        // #endregion\n                        // Misc\n\n                    } else {\n\n                        // Closing Order specific\n                        // #region\n                        // Include the trade ID of the closing order(s) to be cancelled, if any...\n                        if (_helpers.compare.isIdentifier(orderRequest.closingOrders.tradeID)) {\n                            tags[_constMsgs.OrderRequest.ClosingOrders.TradeID] = orderRequest.closingOrders.tradeID;\n                        }\n                        // Include the primary stop order details...\n                        tags[_constMsgs.OrderRequest.ClosingOrders.StopOrderOn] = _helpers.convert.toBoolean(orderRequest.closingOrders.stopOrderOn);\n                        if (tags[_constMsgs.OrderRequest.ClosingOrders.StopOrderOn]) {\n                            tags[_constMsgs.OrderRequest.ClosingOrders.StopOrderLevel] = _helpers.format.asString(orderRequest.closingOrders.stopOrderLevel);\n                            tags[_constMsgs.OrderRequest.ClosingOrders.StopOrderGuaranteedOn] = _helpers.convert.toBoolean(orderRequest.closingOrders.stopOrderGuaranteedOn);\n                            tags[_constMsgs.OrderRequest.ClosingOrders.StopOrderTrailingOn] = _helpers.convert.toBoolean(orderRequest.closingOrders.stopOrderTrailingOn);\n                            tags[_constMsgs.OrderRequest.ClosingOrders.StopOrderTrailingIncrementSize] = _helpers.format.asString(orderRequest.closingOrders.stopOrderTrailingIncrementSize);\n                        }\n                        // Include the primary limit order details...\n                        tags[_constMsgs.OrderRequest.ClosingOrders.LimitOrderOn] = _helpers.convert.toBoolean(orderRequest.closingOrders.limitOrderOn);\n                        if (tags[_constMsgs.OrderRequest.ClosingOrders.LimitOrderOn]) {\n                            tags[_constMsgs.OrderRequest.ClosingOrders.LimitOrderLevel] = _helpers.format.asString(orderRequest.closingOrders.limitOrderLevel);\n                        }\n                        // #endregion\n                        // Closing Order specific\n\n                        // Misc\n                        // #region\n                        // Include the alert details...\n                        tags[_constMsgs.OrderRequest.EmailAlertOn] = _helpers.convert.toBoolean(orderRequest.emailAlertOn);\n                        tags[_constMsgs.OrderRequest.SMSAlertOn] = _helpers.convert.toBoolean(orderRequest.smsAlertOn);\n                        tags[_constMsgs.OrderRequest.AlertMessage] = orderRequest.alertMessage;\n                        // #endregion\n                        // Misc\n\n                    }\n                }\n                break;\n\n                // ORDER CANCEL\n            case _constMsgs.OrderRequest.OrderRequestType_Cancel:\n                {\n                    // Include the order ID to be cancelled...\n                    tags[_constMsgs.OrderRequest.CancellingOrderID] = orderRequest.cancellingOrderID;\n                }\n                break;\n        }\n\n        return msg;\n    };\n    _messages.createPollMessage = function () {\n        var msg = { T: _constMsgs.Poll.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.Poll.ClientTime] = new Date().getTime();\n        return msg;\n    };\n    _messages.createPortfolioAddMarketMessage = function (portfolioID, marketID) {\n        var msg = { T: _constMsgs.PortfolioAddMarket.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.PortfolioAddMarket.PortfolioID] = portfolioID;\n        tags[_constMsgs.PortfolioAddMarket.MarketID] = marketID;\n        return msg;\n    };\n    _messages.createPortfolioRemoveMarketMessage = function (portfolioID, marketID) {\n        var msg = { T: _constMsgs.PortfolioRemoveMarket.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.PortfolioRemoveMarket.PortfolioID] = portfolioID;\n        tags[_constMsgs.PortfolioRemoveMarket.MarketID] = marketID;\n        return msg;\n    };\n    _messages.createPortfolioSubscribeMessage = function (portfolioIDs) {\n        var msg = { T: _constMsgs.PortfolioSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.PortfolioSubscription.SubscribeType] = _constMsgs.PortfolioSubscription.SubscribeType_Subscribe;\n        tags[_constMsgs.PortfolioSubscription.PortfoliosArray] = [];\n\n        // Add each portfolio to the array\n        var repeatingPortfolio = tags[_constMsgs.PortfolioSubscription.PortfoliosArray];\n        for (var n = 0; n < portfolioIDs.length; n++) {\n            var portfolio = {};\n            portfolio[_constMsgs.PortfolioSubscription.PortfoliosArray_Object.PortfolioID] = portfolioIDs[n];\n            repeatingPortfolio.push(portfolio);\n        };\n        return msg;\n    };\n    _messages.createPortfolioUnsubscribeMessage = function (portfolioIDs) {\n        var msg = { T: _constMsgs.PortfolioSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.PortfolioSubscription.SubscribeType] = _constMsgs.PortfolioSubscription.SubscribeType_Unsubscribe;\n        tags[_constMsgs.PortfolioSubscription.PortfoliosArray] = [];\n\n        // Add each portfolio to the array\n        var repeatingPortfolio = tags[_constMsgs.PortfolioSubscription.PortfoliosArray];\n        for (var n = 0; n < portfolioIDs.length; n++) {\n            var portfolio = {};\n            portfolio[_constMsgs.PortfolioSubscription.PortfoliosArray_Object.PortfolioID] = portfolioIDs[n];\n            repeatingPortfolio.push(portfolio);\n        };\n        return msg;\n    };\n    _messages.createPriceAlertRequestMessage = function (uniqueClientIdentifier, transactiontime, priceAlertRequest) {\n        var msg = { T: _constMsgs.PriceAlertRequest.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.PriceAlertRequest.UniqueClientIdentifier] = uniqueClientIdentifier;\n        tags[_constMsgs.PriceAlertRequest.TransactionTime] = transactiontime;\n        switch ((priceAlertRequest.priceAlertRequestType || '').toLowerCase()) {\n            case 'new':\n            case ETX.clientAPI.requests.PriceAlertRequest.requestTypes.NEW:\n                tags[_constMsgs.PriceAlertRequest.PriceAlertRequestType] = _constMsgs.PriceAlertRequest.PriceAlertRequestType_New;\n                break;\n\n            case 'amend':\n            case ETX.clientAPI.requests.PriceAlertRequest.requestTypes.AMEND:\n                tags[_constMsgs.PriceAlertRequest.PriceAlertRequestType] = _constMsgs.PriceAlertRequest.PriceAlertRequestType_Amend;\n                break;\n\n            case 'cancel':\n            case ETX.clientAPI.requests.PriceAlertRequest.requestTypes.CANCEL:\n                tags[_constMsgs.PriceAlertRequest.PriceAlertRequestType] = _constMsgs.PriceAlertRequest.PriceAlertRequestType_Cancel;\n                break;\n\n                //case 'reactivate':\n                //case ETX.clientAPI.requests.PriceAlertRequest.requestTypes.REACTIVATE:\n                //    tags[_constMsgs.PriceAlertRequest.PriceAlertRequestType] = _constMsgs.PriceAlertRequest.PriceAlertRequestType_Reactivate;\n                //    break;\n        }\n        if (priceAlertRequest.alertID) {\n            // Only include the alert ID if it has been provided...\n            tags[_constMsgs.PriceAlertRequest.AlertID] = priceAlertRequest.alertID;\n        }\n        tags[_constMsgs.PriceAlertRequest.MarketID] = priceAlertRequest.marketID;\n        switch ((priceAlertRequest.side || '').toLowerCase()) {\n            case 'buy':\n            case ETX.clientAPI.requests.PriceAlertRequest.sides.BUY:\n                tags[_constMsgs.PriceAlertRequest.Side] = _constMsgs.PriceAlertRequest.Side_Buy;\n                break;\n\n            case 'sell':\n            case ETX.clientAPI.requests.PriceAlertRequest.sides.SELL:\n                tags[_constMsgs.PriceAlertRequest.Side] = _constMsgs.PriceAlertRequest.Side_Sell;\n                break;\n        }\n        tags[_constMsgs.PriceAlertRequest.TriggerPrice] = (priceAlertRequest.triggerPrice || '').toString();\n        tags[_constMsgs.PriceAlertRequest.EmailAlertOn] = (priceAlertRequest.emailAlertOn === true ? 'Y' : 'N');\n        tags[_constMsgs.PriceAlertRequest.SMSAlertOn] = (priceAlertRequest.smsAlertOn === true ? 'Y' : 'N');\n        tags[_constMsgs.PriceAlertRequest.AlertMessage] = priceAlertRequest.alertMessage;\n        return msg;\n    };\n    _messages.createPriceAlertsSubscribeMessage = function () {\n        var msg = { T: _constMsgs.PriceAlertSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.PriceAlertSubscription.SubscribeType] = _constMsgs.PriceAlertSubscription.SubscribeType_Subscribe;\n        return msg;\n    };\n    _messages.createPriceAlertsUnsubscribeMessage = function () {\n        var msg = { T: _constMsgs.PriceAlertSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.PriceAlertSubscription.SubscribeType] = _constMsgs.PriceAlertSubscription.SubscribeType_Unsubscribe;\n        return msg;\n    };\n    _messages.createProcessedOrdersSubscribeMessage = function () {\n        var msg = { T: _constMsgs.ProcessedOrderSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.ProcessedOrderSubscription.SubscribeType] = _constMsgs.ProcessedOrderSubscription.SubscribeType_Subscribe;\n        return msg;\n    };\n    _messages.createProcessedOrdersUnsubscribeMessage = function () {\n        var msg = { T: _constMsgs.ProcessedOrderSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.ProcessedOrderSubscription.SubscribeType] = _constMsgs.ProcessedOrderSubscription.SubscribeType_Unsubscribe;\n        return msg;\n    };\n    _messages.createTradeQuoteRequestMessage = function (uniqueClientIdentifier, transactiontime, tradeQuoteRequest) {\n        var msg = { T: _constMsgs.TradeQuoteRequest.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.TradeQuoteRequest.UniqueClientIdentifier] = uniqueClientIdentifier;\n        tags[_constMsgs.TradeQuoteRequest.TransactionTime] = transactiontime;\n        tags[_constMsgs.TradeQuoteRequest.MarketID] = tradeQuoteRequest.marketID;\n        switch (tradeQuoteRequest.side) {\n            case 'buy':\n            case ETX.clientAPI.requests.TradeQuoteRequest.sides.BUY:\n                tags[_constMsgs.TradeQuoteRequest.Side] = _constMsgs.TradeQuoteRequest.Side_Buy;\n                break;\n\n            case 'sell':\n            case ETX.clientAPI.requests.TradeQuoteRequest.sides.SELL:\n                tags[_constMsgs.TradeQuoteRequest.Side] = _constMsgs.TradeQuoteRequest.Side_Buy;\n                break;\n        }\n        tags[_constMsgs.TradeQuoteRequest.Quantity] = tradeQuoteRequest.quantity;\n        return msg;\n    };\n    _messages.createTradeQuoteDeclineMessage = function (uniqueClientIdentifier, quoteID) {\n        var msg = { T: _constMsgs.TradeQuoteDecline.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.TradeQuoteDecline.UniqueClientIdentifier] = uniqueClientIdentifier;\n        tags[_constMsgs.TradeQuoteDecline.QuoteID] = quoteID;\n        return msg;\n    };\n    _messages.createTradeRequestMessage = function (uniqueClientIdentifier, transactiontime, tradeRequest) {\n        var msg = { T: _constMsgs.TradeRequest.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.TradeRequest.UniqueClientIdentifier] = uniqueClientIdentifier;\n        tags[_constMsgs.TradeRequest.TransactionTime] = transactiontime;\n        tags[_constMsgs.TradeRequest.MarketID] = tradeRequest.marketID;\n        if (tradeRequest.currencyName) {\n            // Only include the Currency Name if it has been provided...\n            tags[_constMsgs.TradeRequest.CurrencyName] = tradeRequest.currencyName;\n        }\n        if (tradeRequest.subAccountID) {\n            // Only include the Sub-Account ID if it has been provided...\n            tags[_constMsgs.TradeRequest.SubAccountID] = tradeRequest.subAccountID;\n        }\n        switch ((tradeRequest.side || '').toLowerCase()) {\n            case 'buy':\n            case ETX.clientAPI.requests.TradeRequest.sides.BUY:\n                tags[_constMsgs.TradeRequest.Side] = _constMsgs.TradeRequest.Side_Buy;\n                break;\n\n            case 'sell':\n            case ETX.clientAPI.requests.TradeRequest.sides.SELL:\n                tags[_constMsgs.TradeRequest.Side] = _constMsgs.TradeRequest.Side_Sell;\n                break;\n        }\n        tags[_constMsgs.TradeRequest.Quantity] = (tradeRequest.quantity || '').toString();\n        if (tradeRequest.isMarketOrder() === false) {\n            // If a price has been provided, then use it, else leave it out and the server should use the market's live price...\n            tags[_constMsgs.TradeRequest.Price] = (tradeRequest.price || '').toString();\n        }\n        if (tradeRequest.quoteID) {\n            // Only include the quote ID if it has been provided...\n            tags[_constMsgs.TradeRequest.QuoteID] = tradeRequest.quoteID;\n        }\n        if (tradeRequest.stopOrderLevel) {\n            // Include the stop order details...\n            tags[_constMsgs.TradeRequest.StopOrderLevel] = (tradeRequest.stopOrderLevel || '').toString();\n            tags[_constMsgs.TradeRequest.StopOrderGuaranteedOn] = (tradeRequest.stopOrderGuaranteedOn === true ? true : false);\n            tags[_constMsgs.TradeRequest.StopOrderTrailingOn] = tradeRequest.stopOrderTrailingOn;\n            tags[_constMsgs.TradeRequest.StopOrderTrailingIncrementSize] = (tradeRequest.stopOrderTrailingIncrementSize || '').toString();\n        }\n        if (tradeRequest.limitOrderLevel) {\n            // Include the limit order details...\n            tags[_constMsgs.TradeRequest.LimitOrderLevel] = (tradeRequest.limitOrderLevel || '').toString();\n        }\n        if (tradeRequest.closingTradeID) {\n            // Only include the closing trade ID if it has been provided...\n            tags[_constMsgs.TradeRequest.ClosingTradeID] = tradeRequest.closingTradeID;\n        }\n        if (tradeRequest.emailAlertOn || tradeRequest.smsAlertOn) {\n            // Include the alert details...\n            tags[_constMsgs.TradeRequest.EmailAlertOn] = tradeRequest.emailAlertOn;\n            tags[_constMsgs.TradeRequest.SMSAlertOn] = tradeRequest.smsAlertOn;\n            tags[_constMsgs.TradeRequest.AlertMessage] = tradeRequest.alertMessage;\n        }\n        return msg;\n    };\n    _messages.createTradeRequoteResponseMessage = function (uniqueClientIdentifier, quoteID, acceptRequote) {\n        var msg = { T: _constMsgs.TradeRequoteResponse.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.TradeRequoteResponse.UniqueClientIdentifier] = uniqueClientIdentifier;\n        tags[_constMsgs.TradeRequoteResponse.QuoteID] = quoteID;\n        tags[_constMsgs.TradeRequoteResponse.Response] = (acceptRequote === true ? true : false);\n        return msg;\n    };\n    _messages.createWorkingOrdersSubscribeMessage = function () {\n        var msg = { T: _constMsgs.WorkingOrderSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.WorkingOrderSubscription.SubscribeType] = _constMsgs.WorkingOrderSubscription.SubscribeType_Subscribe;\n        return msg;\n    };\n    _messages.createWorkingOrdersUnsubscribeMessage = function () {\n        var msg = { T: _constMsgs.WorkingOrderSubscription.MessageType, t: {} };\n        var tags = msg.t;\n        tags[_constMsgs.WorkingOrderSubscription.SubscribeType] = _constMsgs.WorkingOrderSubscription.SubscribeType_Subscribe;\n        return msg;\n    };\n    _messages.createUserSettingsRequestMessage = function (uniqueClientIdentifier, userSettingsRequestType, userSettings) {\n        var msg = { T: _constMsgs.UserSettingsRequest.MessageType, t: {} },\n            tags = msg.t;\n        tags[_constMsgs.UserSettingsRequest.UniqueClientIdentifier] = uniqueClientIdentifier;\n        switch (userSettingsRequestType) {\n            case 'get':\n            case _constMsgs.UserSettingsRequest.UserSettingsRequestType_Get:\n                tags[_constMsgs.UserSettingsRequest.UserSettingsRequestType] = _constMsgs.UserSettingsRequest.UserSettingsRequestType_Get;\n                break;\n            case 'overwrite':\n            case _constMsgs.UserSettingsRequest.UserSettingsRequestType_Overwrite:\n                tags[_constMsgs.UserSettingsRequest.UserSettingsRequestType] = _constMsgs.UserSettingsRequest.UserSettingsRequestType_Overwrite;\n                tags[_constMsgs.UserSettingsRequest.UserSettingsArray] = [];\n                break;\n            case 'update':\n            case _constMsgs.UserSettingsRequest.UserSettingsRequestType_Update:\n                tags[_constMsgs.UserSettingsRequest.UserSettingsRequestType] = _constMsgs.UserSettingsRequest.UserSettingsRequestType_Update;\n                tags[_constMsgs.UserSettingsRequest.UserSettingsArray] = [];\n                break;\n\n        }\n        if ($.isArray(tags[_constMsgs.UserSettingsRequest.UserSettingsArray])) {\n            if ($.isArray(userSettings)) {\n                for (var i in userSettings) {\n                    var aUserSetting = userSettings[i];\n                    if (aUserSetting) {\n                        var userSetting = {};\n                        userSetting[_constMsgs.UserSettingsRequest.UserSettingsArray_Object.Key] = aUserSetting[_constMsgs.UserSettingsRequest.UserSettingsArray_Object.Key];\n                        userSetting[_constMsgs.UserSettingsRequest.UserSettingsArray_Object.Value] = aUserSetting[_constMsgs.UserSettingsRequest.UserSettingsArray_Object.Value];\n                        if (aUserSetting.hasOwnProperty(_constMsgs.UserSettingsRequest.UserSettingsArray_Object.Deleted)) {\n                            userSetting[_constMsgs.UserSettingsRequest.UserSettingsArray_Object.Deleted] = _constMsgs.UserSettingsRequest.UserSettingsArray_Object.Deleted;\n                        }\n                        /*if (_helpers.compare.isNullOrEmpty(userSetting[_constMsgs.UserSettingsRequest.UserSettingsArray_Object.Key]) === false)*/ {\n                            tags[_constMsgs.UserSettingsRequest.UserSettingsArray].push(userSetting);\n                        }\n                    }\n                }\n            }\n        }\n        return msg;\n    };\n    _messages.generateUniqueClientIdentifier = function (messageType) {\n        return _messages.buildUniqueClientIdentifier(messageType, new Date().toISOString());\n    }\n    // #endregion\n    //----END-PUBLIC----------\n\n    return _messages;\n    // #endregion\n    //-END-CONSTRUCTOR--------\n\n})();\n\n/// <reference path=\"../../_references.js\" />\n\nETX.namespace('clientAPI');\n\nETX.clientAPI.Session = function (options) {\n\n    'use strict';\n\n    //-CONSTRUCTOR-------------\n    // #region\n    //----PRIVATE--------------\n    // #region\n    var _session = this,\n        _options = options || {},\n        $ = _options.jQuery || jQuery,\n        _transportFactory = _options.transportFactory || new ETX.clientAPI.TransportFactory(),\n        _webSocketFactory = _options.webSocketFactory || new ETX.clientAPI.WebSocketFactory(),\n        _helpers = _options.helpers || ETX.clientAPI.Helpers,\n        _logger = _options.logger || new ETX.logging.Logger(),\n        _logSource = 'Session',\n        _tryWebSocket = _options.tryWebSocket === false ? false : true,\n        _webSocketRootURL = _options.webSocketRootURL || '',\n        _webAPIRootURL = _options.webAPIRootURL || '',\n        _transportFactory = _options.transportFactory,\n        _transport,\n        _pendingMessageCache = [],\n        // Callbacks\n        _onConnect = _options.onConnect,\n        _onMessage = _options.onMessage,\n        _onError = _options.onError,\n        _onDisconnect = _options.onDisconnect,\n        _onQoS = _options.onQoS,\n        // Connectivity\n        _isAuthenticated = false,\n        _isConnected = false,\n        _autoConnect = false,\n        _connectLastAttempt,\n        _reconnectIntervalTimer,\n        _reconnectIntervalInterval = _options.reconnectInterval || 5000,\n        // Timer for poll\n        _pollIntervalIntervalTimer,\n        _pollIntervalInterval = _options.pollInterval || 1500,\n        _pollThreshold = _options.pollThreshold || 10000,     // default poll threshold to 10 seconds\n        _pollLastReceived,\n        _ttl = 0;\n    // #endregion\n    //----END-PRIVATE---------  \n\n    //----PUBLIC--------------\n    // #region\n    _session.transportType = function () { return _transport ? _transport.type() : ETX.clientAPI.Constants.TransportType.None; };\n    _session.getSessionID = function () { return _transport ? _transport.getSessionID() : ''; };\n    _session.isConnected = function () { return _isConnected; };\n    _session.isAuthenticated = function () { return _isAuthenticated; };\n    _session.logger = _logger;\n    _session.send = send;\n    _session.start = start;\n    _session.stop = stop;\n    _session.destroy = destroy;\n    // #endregion\n    //----END-PUBLIC----------\n\n    _logger.debug('Created ETX.clientAPI.Session', _logSource);\n\n    return _session;\n    // #endregion\n    //-END-CONSTRUCTOR--------\n\n\n    //-METHODS----------------\n    // #region\n    function clearPollIntervalTimer() {\n        if (_pollIntervalIntervalTimer) {\n            clearInterval(_pollIntervalIntervalTimer);\n            _pollIntervalIntervalTimer = undefined;\n            _logger.verbose('Cleared poll timer', _logSource);\n        }\n    }\n\n    function clearReconnectionTimer() {\n        // Cancel any existing reconnect timer\n        if (_reconnectIntervalTimer) {\n            clearInterval(_reconnectIntervalTimer);\n            _reconnectIntervalTimer = undefined;\n            _logger.verbose('Cleared reconnect timer', _logSource);\n        }\n    }\n\n    function connectionClosed(disconnectReason, disconnectData) {\n        // Mark connection as down\n        _isConnected = false;\n        _isAuthenticated = false;\n\n        // Cancel reconnect timer\n        clearReconnectionTimer();\n\n        // Cancel poll timer\n        clearPollIntervalTimer();\n\n        // Trigger QoS callback\n        if (_onQoS) {\n            _onQoS(_session, -1);\n        }\n\n        // Trigger Disconnect callback\n        if (_onDisconnect) {\n            _onDisconnect(_session, (disconnectReason || 'Disconnected from server'), disconnectData);\n        }\n\n        if (_autoConnect === true) {\n            // restart reconnection timer\n            resetReconnectionTimer();\n        }\n    }\n\n    function createAndStartTransport(transportType) {\n        var success = false;\n\n        destroyTransport();\n\n        // have we specified a transport to try\n        if (transportType === ETX.clientAPI.Constants.TransportType.WebSocket) {\n            success = createAndStartTransportWS();\n        } else if (transportType === ETX.clientAPI.Constants.TransportType.LongPoll) {\n            success = createAndStartTransportLP();\n        } else {\n            // no, so try both\n            if (_tryWebSocket === true) {\n                // first try web socket transport\n                success = createAndStartTransportWS();\n            }\n            if (success === false) {\n                if (_tryWebSocket === true) {\n                    // Fallback to long poll transport, as websocket transport failed\n                    _logger.error('WebSocket transport unavailable, falling back to using HTTP long-poll transport instead...', _logSource);\n                }\n                // Try long poll transport\n                success = createAndStartTransportLP();\n            }\n        }\n\n        return success;\n    }\n\n    function createAndStartTransportLP() {\n        _logger.debug('Attempting to connect using HTTP long-poll transport...', _logSource);\n\n        var success = false;\n        if (_helpers.compare.isNullOrEmpty(_webAPIRootURL) === false) {\n            try {\n                // Create a long-poll transport...\n                _transport = _transportFactory.create(ETX.clientAPI.Constants.TransportType.LongPoll, {\n                    jQuery: $,\n                    logger: _logger,\n                    rootURL: _webAPIRootURL + 'stream',\n                    onOpen: onOpen,\n                    onMessage: onMessage,\n                    onError: onError\n                });\n\n                success = _transport.start();\n                if (success) {\n                    _logger.debug('Using HTTP long-poll transport', _logSource);\n                }\n            } catch (ex) {\n                _logger.error('Error creating/starting HTTP long-poll transport | Exception = ' + ex, _logSource, ex);\n                success = false;\n                _transport = undefined;\n                if (_onError) { _onError(_session, ex); }\n            }\n        }\n        return success;\n    }\n\n    function createAndStartTransportWS() {\n        _logger.debug('Attempting to connect using WebSocket transport...', _logSource);\n\n        var success = false;\n        if (\"WebSocket\" in window) {\n            if (_helpers.compare.isNullOrEmpty(_webSocketRootURL) === false) {\n                try {\n                    // We need to create our transportation service...\n                    // Create a WebSocket transport, if supported...\n                    _transport = _transportFactory.create(ETX.clientAPI.Constants.TransportType.WebSocket, {\n                        webSocketFactory: _webSocketFactory,\n                        logger: _logger,\n                        URI: _webSocketRootURL,\n                        onOpen: onOpen,\n                        onMessage: onMessage,\n                        onError: onError,\n                        onClose: onClose\n                    });\n\n                    success = _transport.start();\n                    if (success) {\n                        _logger.debug('Using WebSocket transport', _logSource);\n                    }\n                } catch (ex) {\n                    _logger.error('Error creating/starting WebSocket transport | Exception = ' + ex, _logSource, ex);\n                    success = false;\n                    _transport = undefined;\n                    if (_onError) { _onError(_session, ex); }\n                }\n            }\n        }\n        return success;\n    }\n\n    function destroy() {\n        // Clear all callbacks...\n        _onConnect = undefined;\n        _onMessage = undefined;\n        _onError = undefined;\n        _onDisconnect = undefined;\n        _onQoS = undefined;\n\n        stop();\n\n        if (_transport) {\n            _transport.destroy();\n            _transport = undefined;\n        }\n\n        _logger.debug('Destroyed ETX.clientAPI.Session', _logSource);\n    }\n\n    function destroyTransport() {\n        if (_transport) {\n            _transport.destroy();\n            _transport = undefined;\n        }\n    }\n\n    function onClose(transport, event) {\n        _logger.debug('Connection closed', _logSource);\n\n        connectionClosed('Disconnected from server', event);\n    }\n\n    function onError(transport, errorMessage, errorData) {\n        _logger.debug('Connection error: ' + errorMessage, _logSource, errorData);\n\n        if (_session.transportType() === ETX.clientAPI.Constants.TransportType.WebSocket) {\n            if (_isConnected === false) {\n                // If we get an error before we have even connected, \n                // then we must not be able to connect to the server.\n                // So, disable auto-reconnections for now...\n                _autoConnect = false;\n                _logger.warning('WebSocket connection failed to open, attempting to establish session with server using HTTP long-poll transport instead...', _logSource);\n                var tryWebSocket = _tryWebSocket;\n                _tryWebSocket = false;\n                start();\n                _tryWebSocket = tryWebSocket;\n            }\n            return;\n        }\n\n        if (_onError) {\n            _onError(_session, errorMessage, errorData);\n        }\n\n        if (_session.transportType() === ETX.clientAPI.Constants.TransportType.LongPoll) {\n            onClose(transport, /*event*/undefined);\n        }\n    }\n\n    function onMessage(transport, message) {\n        _logger.debug('Received message | Msg = ' + JSON.stringify(message), _logSource);\n\n        var messageType = message.T;\n        var messageTags = message.t;\n\n        // Switch on message type\n        switch (messageType) {\n            case ETX.clientAPI.Constants.messages.SessionID:\n                _logger.debug('Connection session ID is \"' + _session.getSessionID() + '\"', _logSource);\n                break;\n\n            case ETX.clientAPI.Constants.messages.LogOffResponse.MessageType:\n                _logger.debug('Session : Handling messsage LogOffResponse (\"' + message.T + '\")...', _logSource);\n\n                // TODO: Check this is correct thing to-do...\n                // If we have a reconnect timer, cancel it\n                clearReconnectionTimer();\n\n                _autoConnect = false;\n\n                // Now we're done, allow this message to bubble up to the ClientAPI...\n                if (_onMessage) {\n                    _onMessage(_session, message);\n                }\n                break;\n\n            case ETX.clientAPI.Constants.messages.LogOnResponse.MessageType:\n                _logger.debug('Handling messsage LogOnResponse (\"' + message.T + '\")...', _logSource);\n\n                // If we have a reconnect timer, cancel it\n                clearReconnectionTimer();\n\n                // We are logged on, start the timer to start sending QoS poll messages...\n                _isAuthenticated = true;\n                _pollLastReceived = new Date();\n                onPollTimerElapsed();\n                _pollIntervalIntervalTimer = setInterval(onPollTimerElapsed, _pollIntervalInterval);\n\n                _logger.verbose('Started polling timer', _logSource);\n\n                // Now we're done, allow this message to bubble up to the ClientAPI...\n                if (_onMessage) {\n                    _onMessage(_session, message);\n                }\n                break;\n\n            case ETX.clientAPI.Constants.messages.Poll.MessageType:\n                _logger.debug('Handling messsage Poll (\"' + message.T + '\")...', _logSource);\n\n                // Poll response \n                _pollLastReceived = new Date();\n                // Compare timestamp in request to now, and work out TTL\n                var sentDate = new Date(parseInt(messageTags[ETX.clientAPI.Constants.messages.Poll.ClientTime]));\n                _ttl = _pollLastReceived.getTime() - sentDate.getTime();\n                _logger.debug('Poll latency ' + _ttl + 'ms', _logSource);\n                if (_onQoS) {\n                    _onQoS(_session, _ttl);\n                }\n                break;\n\n            default:\n                // We need to allow messages to bubble up to the ClientAPI...\n                if (_onMessage) {\n                    _onMessage(_session, message);\n                }\n                break;\n        }\n    }\n\n    function onOpen(transport, event) {\n        _logger.debug('Connection opened', _logSource);\n\n        if (_session.getSessionID()) {\n            _logger.debug('Connection session ID is \"' + _session.getSessionID() + '\"', _logSource);\n        }\n\n        // Mark connection as up\n        _isConnected = true;\n        // Trigger Connect callback\n        if (_onConnect) {\n            _onConnect(_session, 'Connected to server', event);\n        }\n\n        // Send any pending messages...\n        var pendingMsgCount = _pendingMessageCache.length;\n        if (pendingMsgCount > 0) {\n            _logger.info('Connection established, sending ' + pendingMsgCount + ' pending message(s)...', _logSource);\n            for (var i in _pendingMessageCache) {\n                if (_pendingMessageCache.hasOwnProperty(i)) {\n                    var message = _pendingMessageCache[i];\n                    send(message);\n                }\n            }\n            _pendingMessageCache = [];\n        }\n    }\n\n    function onPollTimerElapsed() {\n        if (_transport) {\n            // Check if we've received a poll response recently?\n            var lastPollDuration = (new Date() - _pollLastReceived);\n            if (lastPollDuration > _pollThreshold) {\n                _logger.warning('No poll has been received from server for ' + lastPollDuration + 'ms (exceeding threshold of ' + _pollThreshold + 'ms)', _logSource);\n\n                if (_session.transportType() === ETX.clientAPI.Constants.TransportType.LongPoll) {\n                    _logger.warning('Assuming session HTTP long-poll transport connection is down...', _logSource);\n\n                    connectionClosed('Timeout. No poll received for ' + lastPollDuration + 'ms');\n                } else {\n                    // Trigger QoS callback\n                    if (_onQoS) {\n                        _onQoS(_session, -1);\n                    }\n                }\n            } else {\n                send(ETX.clientAPI.Messages.createPollMessage());\n            }\n        }\n    }\n\n    function onReconnectTimerElapsed() {\n        if (_isConnected === false) {\n            if (_autoConnect === true) {\n                if (_transport) {\n                    // Try and connect again using the existing transport or re-create a new one\n                    _logger.warning('Connection is down, attempting to re-establish session with server, using existing transport...', _logSource);\n                    _transport.stop();\n                    var success = _transport.start();\n                    if (success) {\n                        return;\n                    }\n                }\n\n                // no transport so re-create a new one\n                _logger.warning('Connection is down, attempting to re-establish session with server, using new transport...', _logSource);\n                start();\n            }\n        }\n    }\n\n    function resetReconnectionTimer() {\n        // Start a new reconnect timer\n        clearReconnectionTimer();\n        _reconnectIntervalTimer = setInterval(function () { onReconnectTimerElapsed() }, _reconnectIntervalInterval);\n        _logger.verbose('Started reconnect timer', _logSource);\n    }\n\n    function send(message) {\n        message[ETX.clientAPI.Constants.messages.SessionID] = _session.getSessionID();\n\n        if (_transport) {\n            if (_isConnected === true) {\n                _transport.send(message);\n                _logger.debug('Sent message | Msg= ' + JSON.stringify(message), _logSource);\n                return;\n            } else {\n                //// NOTE: Not so sure that this is a good idea anymore, because you may get duplicated (e.g. subscription)\n                ////       messages unless the ClientAPI tracks what was/wasn't sent successfully...\n                //_pendingMessageCache.push(message);\n                //_logger.warning('Message cannot be sent whilst the connection is down and will be sent once the connection is established | Msg = ' + JSON.stringify(message), _logSource);\n\n                _logger.warning('Failed to send message, no connection established | Msg = ' + JSON.stringify(message), _logSource);\n            }\n        }\n\n        _logger.warning('Failed to send message, no transport | Msg = ' + JSON.stringify(message), _logSource);\n    }\n\n    function start() {\n        _logger.debug('Starting session...', _logSource);\n\n        if (createAndStartTransport() === false) {\n            _logger.fatal('ERROR: Failed to create and start transport', _logSource);\n            return false;       // failed to start any transport!\n        }\n\n        var success = false;\n        if (_transport) {\n            success = true;\n\n            // start testing connection every few seconds...\n            _autoConnect = true;\n            _connectLastAttempt = new Date();\n            resetReconnectionTimer();\n\n            _logger.debug('Started session', _logSource);\n        }\n        return success;\n    }\n\n    function stop() {\n        _logger.debug('Stopping session...', _logSource);\n\n        // Disable auto-reconnections\n        _autoConnect = false;\n        _connectLastAttempt = undefined;\n\n        // Stop the transport\n        if (_transport) {\n            _transport.stop();\n        }\n\n        // Mark connection as down\n        connectionClosed('Disconnected from server');\n\n        _logger.debug('Stopped session', _logSource);\n    }\n    // #endregion\n    //-END-METHODS------------\n\n};\n\n/// <reference path=\"../../_references.js\" />\n\nETX.namespace('clientAPI');\n\nETX.clientAPI.SessionFactory = function (options) {\n\n    'use strict';\n\n    //-CONSTRUCTOR-------------\n    // #region\n    //----PRIVATE--------------\n    // #region\n    var _sessionFactory = this,\n        _options = options || {};\n    // #endregion\n    //----END-PRIVATE---------  \n\n    //----PUBLIC--------------\n    // #region\n    _sessionFactory.create = function create(options) {\n        // Create session object\n        return new ETX.clientAPI.Session(options);\n    };\n    // #endregion\n    //----END-PUBLIC----------\n\n    return _sessionFactory;\n    // #endregion\n    //-END-CONSTRUCTOR--------\n\n};\n\n/// <reference path=\"../../_references.js\" />\n\nETX.namespace('clientAPI');\n\nETX.clientAPI.TransportFactory = function (options) {\n\n    'use strict';\n\n    //-CONSTRUCTOR-------------\n    // #region\n    //----PRIVATE--------------\n    // #region\n    var _transportFactory = this,\n        _options = options || {};\n    // #endregion\n    //----END-PRIVATE---------  \n\n    //----PUBLIC--------------\n    // #region\n\n    _transportFactory.create = function create(transportType, options) {\n        switch (transportType) {\n            default:\n            case ETX.clientAPI.Constants.TransportType.WebSocket:\n                // Create web socket transport object\n                return new ETX.clientAPI.TransportWS(options);\n                \n            case ETX.clientAPI.Constants.TransportType.LongPoll:\n                // Create long poll transport object\n                return new ETX.clientAPI.TransportLP(options);\n        }\n    };\n\n    // #endregion\n    //----END-PUBLIC----------\n\n    return _transportFactory;\n    // #endregion\n    //-END-CONSTRUCTOR--------\n\n};\n\n/// <reference path=\"../../_references.js\" />\n\nETX.namespace('clientAPI');\n\nETX.clientAPI.TransportLP = function (options) {\n\n    'use strict';\n\n    //-CONSTRUCTOR------------\n    // #region\n    //----PRIVATE-------------\n    // #region\n    var _transportLP = this,\n        _options = options || {},\n        $ = _options.jQuery || jQuery,\n        _logger = _options.logger || new ETX.logging.Logger(),\n        _logSource = 'TransportLP',\n        _rootURL = _options.rootURL || 'http://localhost:81',\n        _onOpen = _options.onOpen,\n        _onError = _options.onError,\n        _onMessage = _options.onMessage,\n        _helpers = _options.helpers || ETX.clientAPI.Helpers,\n        _requestMessagesTimer,\n        _sessionID,\n        _isConnected = false,\n        _currentRequestAJAX,\n        _messagesSent = 0,\n        _messagesReceived = 0;\n\n    // store the IE version (undefined if IE not detected)\n    var _ieVersion = _helpers.utility.ieVersion();\n\n    // IE9 fix flag for using XDomainRequest for ajax calls\n    var _ieFix = false;\n    if (_ieVersion) {\n        _logger.info('IE version ' + _ieVersion + ' detected');\n\n        _ieFix = ((_ieVersion < 10) && ('XDomainRequest' in window) && (window.XDomainRequest !== null));\n        if (_ieFix) {\n            _logger.info('Registering IE9 AjaxTransport');\n            registerIE9AjaxTransport();\n        }\n    }\n    // #endregion\n    //----END-PRIVATE---------\n\n    //----PUBLIC--------------\n    // #region\n    _transportLP.type = function () { return ETX.clientAPI.Constants.TransportType.LongPoll; }\n    _transportLP.getSessionID = function () { return _sessionID; }\n    _transportLP.isConnected = function () { return _isConnected; }\n    _transportLP.logger = _logger;\n    _transportLP.start = start;\n    _transportLP.send = send;\n    _transportLP.stop = stop;\n    _transportLP.destroy = destroy;\n    // #endregion\n    //----END-PUBLIC----------\n\n    return _transportLP;\n    // #endregion\n    //-END-CONSTRUCTOR--------\n\n\n    //-METHODS----------------\n    // #region\n    function destroy() {\n        // Clear all callbacks...\n        _onOpen = undefined;\n        _onError = undefined;\n        _onMessage = undefined;\n\n        stop();\n\n        _logger.debug('Destroyed ETX.clientAPI.TransportLP', _logSource);\n    }\n\n    function requestMessages() {\n        var url = _rootURL + '/g';\n        var ajaxOptions = {\n            url: url,\n            data: _sessionID,\n            dataType: 'json',\n            type: 'post',\n            cache: 'false'\n        };\n        // IE9 fix - send session ID as data body\n        if (_ieFix) {\n            ajaxOptions.data = _sessionID;\n        } else {\n            ajaxOptions.beforeSend = onBeforeSend;\n        }\n        _currentRequestAJAX = $.ajax(ajaxOptions)\n            .done(onRequestMessageReceived)\n            .fail(onRequestMessageFailed);\n    }\n\n    function onBeforeSend(xhr) {\n        if (_sessionID) {\n            xhr.setRequestHeader('session', _sessionID);\n        }\n    }\n\n    function onRequestMessageReceived(data, textStatus, xhr) {\n        if (!_sessionID) {\n            _sessionID = data['session'];\n            if (_sessionID) {\n                // Only if we now have a session, record it and mark the connection as UP\n                _isConnected = true;\n                _logger.verbose('Connection established | SessionID = ' + _sessionID, _logSource);\n                if (_onOpen) {\n                    _onOpen(_transportLP);\n                }\n            } else {\n                _logger.error('No session ID returned from server | Msg = ' + JSON.stringify(data), _logSource, data);\n            }\n        } else {\n            // We have a session established so handle these messages\n            if (_onMessage) {\n                _logger.verbose('Received | Msg = ' + JSON.stringify(data), _logSource);\n\n                if ($.isArray(data)) {\n                    for (var i = 0, n = data.length; i < n; i++) {\n                        var message = data[i];\n                        _onMessage(_transportLP, message);\n                        _messagesReceived++;\n                    }\n                } else if ($.isPlainObject(data) && $.isEmptyObject(data) === false && data.hasOwnProperty('error') === false) {\n                    _onMessage(_transportLP, data);\n                    _messagesReceived++;\n                } else {\n                    // No JSON data received, SessionID must have expired, mark the connection as DOWN\n                    _logger.error('Invalid message received | SessionID = ' + _sessionID + ' | Msg = ' + JSON.stringify(data), _logSource, data);\n                    _isConnected = false;\n                    _sessionID = undefined;\n                }\n            }\n        }\n        if (_isConnected) {\n            /* Start the next long poll. */\n            requestMessages();\n        }\n    }\n\n    function onRequestMessageFailed(xhr, textStatus, errorThrown) {\n        _logger.error('Error receiving message | SessionID = ' + _sessionID + ' | TextStatus = ' + textStatus + ' |  ErrorThrown = ' + JSON.stringify(errorThrown), _logSource, xhr);\n        // We'll never try to request messages again, mark the connection as DOWN\n        _isConnected = false;\n        if (_onError) {\n            _onError(_transportLP, errorThrown);\n        }\n    }\n\n    function send(message) {\n        if (_isConnected) {\n            var url = _rootURL + '/s';\n            var ajaxOptions = {\n                url: url,\n                dataType: 'json',\n                type: 'post',\n                cache: 'false'\n            };\n            if (_ieFix) {\n                // IE9 fix - send session ID in message\n                if (_sessionID != '') {\n                    message.t[ETX.clientAPI.Constants.messages.SessionID] = _sessionID;\n                }\n            } else {\n                ajaxOptions.beforeSend = onBeforeSend;\n            }\n            var msg = JSON.stringify(message);\n            ajaxOptions.data = msg;\n\n            _logger.verbose('Sent | SessionID = ' + _sessionID + ' | Msg = ' + msg, _logSource);\n\n            $.ajax(ajaxOptions)\n                .done(onSendMessageReceived)\n                .fail(onSendMessageFailed);\n        }\n    }\n\n    function onSendMessageReceived(data, textStatus, xhr) {\n        _messagesSent++;\n    }\n\n    function onSendMessageFailed(xhr, textStatus, errorThrown) {\n        _logger.error('Error sending message | SessionID = ' + _sessionID + ' | TextStatus = ' + textStatus + ' |  ErrorThrown = ' + JSON.stringify(errorThrown) + ' |  Msg = ' + msg, _logSource, xhr);\n        if (_onError) {\n            _onError(_transportLP, textStatus + ' | ' + errorThrown);\n        }\n    }\n\n    function start() {\n        _logger.debug('Starting transport...', _logSource);\n\n        // ensure transport is stopped\n        stop();\n\n        // Start long poll in 20ms\n        _requestMessagesTimer = setTimeout(function () { requestMessages(); }, 20);\n\n        _logger.debug('Started transport', _logSource);\n        return true;\n    }\n\n    function stop() {\n        // Abort pending initial request for messages\n        if (_requestMessagesTimer) {\n            clearTimeout(_requestMessagesTimer);\n        }\n\n        // Abort any pending request for messages\n        if (_currentRequestAJAX) {\n            _logger.debug('Stopping transport...', _logSource);\n\n            // Mark connection as DOWN\n            _isConnected = false;\n            _sessionID = undefined;\n\n            _currentRequestAJAX.abort();\n            _currentRequestAJAX = undefined;\n\n            _logger.debug('Stopped transport', _logSource);\n        }\n    }\n\n    function registerIE9AjaxTransport() {\n        var httpRegEx = /^https?:\\/\\//i;\n        var getOrPostRegEx = /^get|post$/i;\n        var sameSchemeRegEx = new RegExp('^' + location.protocol, 'i');\n\n        // ajaxTransport exists in jQuery 1.5+\n        $.ajaxTransport('* text html xml json', function (options, userOptions, jqXHR) {\n            // Only continue if the request is: asynchronous, uses GET or POST method, has HTTP or HTTPS protocol, and has the same scheme as the calling page\n            if (!options.crossDomain || !options.async || !getOrPostRegEx.test(options.type) || !httpRegEx.test(options.url) || !sameSchemeRegEx.test(options.url)) {\n                return;\n            }\n            var xdr = null;\n\n            return {\n                send: function (headers, complete) {\n                    var postData = '';\n                    var userType = (userOptions.dataType || '').toLowerCase();\n\n                    xdr = new XDomainRequest();\n                    if (/^\\d+$/.test(userOptions.timeout)) {\n                        xdr.timeout = userOptions.timeout;\n                    }\n\n                    xdr.ontimeout = function () {\n                        complete(500, 'timeout');\n                        // clear reference to XDomainRequest object\n                        xdr = undefined;\n                    };\n\n                    xdr.onload = function () {\n                        var allResponseHeaders = 'Content-Length: ' + xdr.responseText.length + '\\r\\nContent-Type: ' + xdr.contentType;\n                        var status = {\n                            code: 200,\n                            message: 'success'\n                        };\n                        var responses = {\n                            text: xdr.responseText\n                        };\n                        try {\n                            if (userType === 'html' || /text\\/html/i.test(xdr.contentType)) {\n                                responses.html = xdr.responseText;\n                            } else if (userType === 'json' || (userType !== 'text' && /\\/json/i.test(xdr.contentType))) {\n                                try {\n                                    responses.json = $.parseJSON(xdr.responseText);\n                                } catch (e) {\n                                    _logger.error('xdr.onload PARSE ERROR');\n                                    status.code = 500;\n                                    status.message = 'JSON parse error';\n                                    //throw 'Invalid JSON: ' + xdr.responseText;\n                                }\n                            } else if (userType === 'xml' || (userType !== 'text' && /\\/xml/i.test(xdr.contentType))) {\n                                var doc = new ActiveXObject('Microsoft.XMLDOM');\n                                doc.async = false;\n                                try {\n                                    doc.loadXML(xdr.responseText);\n                                } catch (e) {\n                                    doc = undefined;\n                                }\n                                if (!doc || !doc.documentElement || doc.getElementsByTagName('parsererror').length) {\n                                    _logger.error('Invalid XML: ' + xdr.responseText);\n                                    status.code = 500;\n                                    status.message = 'XML parse error';\n                                    // throw 'Invalid XML: ' + xdr.responseText;\n                                }\n                                responses.xml = doc;\n                            }\n                        } catch (parseMessage) {\n                            _logger.error('Caught parseMessage exception: ' + parseMessage.message);\n                            // throw parseMessage;\n                        } finally {\n                            complete(status.code, status.message, responses, allResponseHeaders);\n                            // clear reference to XDomainRequest object\n                            xdr = undefined;\n                        }\n                    };\n\n                    // set an empty handler for 'onprogress' so requests don't get aborted\n                    xdr.onprogress = function () { };\n                    xdr.onerror = function () {\n                        complete(500, 'error', {\n                            text: xdr.responseText\n                        });\n                        // clear reference to XDomainRequest object\n                        xdr = undefined;\n                    };\n\n                    if (userOptions.data) {\n                        postData = ($.type(userOptions.data) === 'string') ? userOptions.data : $.param(userOptions.data);\n                    }\n                    xdr.open(options.type, options.url);\n                    xdr.send(postData);\n                },\n                abort: function () {\n                    if (xdr) {\n                        xdr.abort();\n                    }\n                }\n            };\n        });\n    }\n    // #endregion\n    //-END-METHODS------------\n\n};\n\n/// <reference path=\"../../_references.js\" />\n\nETX.namespace('clientAPI');\n\nETX.clientAPI.TransportWS = function (options) {\n\n    'use strict';\n\n    //-CONSTRUCTOR-------------\n    // #region\n    //----PRIVATE--------------\n    // #region\n    var _transportWS = this,\n        _options = options || {},\n        _webSocketFactory = _options.webSocketFactory || new ETX.clientAPI.WebSocketFactory(),\n        _logger = _options.logger || new ETX.logging.Logger(),\n        _logSource = 'TransportWS',\n        _URI = _options.URI || '',\n        _onOpen = _options.onOpen,\n        _onError = _options.onError,\n        _onMessage = _options.onMessage,\n        _onClose = _options.onClose,\n        _websocket,\n        _isConnected = false,\n        _sessionID;\n    // #endregion\n    //----END-PRIVATE---------\n\n    //----PUBLIC--------------\n    // #region\n    _transportWS.type = function () { return ETX.clientAPI.Constants.TransportType.WebSocket; }\n    _transportWS.getSessionID = function () { return _sessionID; }\n    _transportWS.isConnected = function () { return _isConnected; };\n    _transportWS.logger = _logger;\n    _transportWS.start = start;\n    _transportWS.send = send;\n    _transportWS.stop = stop;\n    _transportWS.destroy = destroy;\n    // #endregion\n    //----END-PUBLIC----------\n\n    _logger.debug('Created ETX.clientAPI.TransportWS', _logSource);\n\n    return _transportWS;\n    // #endregion\n    //-END-CONSTRUCTOR--------\n\n\n    //-METHODS----------------\n    // #region\n    function destroy() {\n        // Clear all callbacks...\n        _onOpen = undefined;\n        _onError = undefined;\n        _onMessage = undefined;\n        _onClose = undefined;\n\n        stop();\n\n        _logger.debug('Destroyed ETX.clientAPI.TransportWS', _logSource);\n    }\n\n    function onClose(event) {\n        if (_websocket) {\n            _isConnected = false;\n            _logger.verbose('Websocket closing | State = ' + _websocket.readyState, _logSource, event);\n            if (_onClose) {\n                _onClose(_transportWS, event);\n            }\n        }\n    }\n\n    function onError(event) {\n        if (_websocket) {\n            if (_onError) {\n                _onError(_transportWS, 'Web socket error', event);\n            }\n        }\n    }\n\n    function onMessage(event) {\n        if (_websocket && _onMessage) {\n            var sMessage = event.data;\n            // Is this a valid message?\n            try {\n\n                if (/^[\\],:{}\\s]*$/.test(sMessage.replace(/\\\\[\"\\\\\\/bfnrtu]/g, '@')\n                                                 .replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']')\n                                                 .replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))) {\n                    var oMessage = JSON.parse(sMessage);\n\n                    if (oMessage.T == ETX.clientAPI.Constants.messages.SessionID) {\n                        _logger.debug('Handling messsage SessionID (\"' + oMessage.T + '\"): ' + sMessage, _logSource);\n                        _sessionID = oMessage.t[ETX.clientAPI.Constants.messages.SessionID];\n                    }\n\n                    _onMessage(_transportWS, oMessage);\n                } else {\n                    throw 'Invalid JSON received';\n                }\n            } catch (ex) {\n                _logger.error('Error receiving message | Exception = ' + ex + ' |  Msg = ' + sMessage, _logSource, [ex, event]);\n                if (_onError) {\n                    _onError(_transportWS, 'Error receiving message | Exception = ' + ex + ' |  Msg = ' + sMessage, sMessage);\n                }\n            }\n        }\n    }\n\n    function onOpen(event) {\n        if (_websocket) {\n            // As this event is fired mulitple times, only fire onOpen event once the web socket is actual ready to transmit data...\n            _logger.verbose('Websocket open | State = ' + _websocket.readyState, _logSource, event);\n            if (_websocket.readyState == 1) {\n                _isConnected = true;\n                if (_onOpen) {\n                    _onOpen(_transportWS, event);\n                }\n            }\n        }\n    }\n\n    function send(message) {\n        if (_websocket) {\n            try {\n                var sMsg = JSON.stringify(message);\n                if (_websocket.readyState != 1) {\n                    _logger.warning('Failed to send message, web socket not ready | State = ' + _websocket.readyState + ' | Msg = ' + sMsg, _logSource, _websocket);\n                }\n                if (_websocket.readyState == 1) {\n                    _websocket.send(sMsg);\n                }\n            } catch (ex) {\n                _logger.error('Error sending message | Exception = ' + ex + ' |  Msg = ' + message, _logSource, [ex, _websocket]);\n                if (_onError) {\n                    _onError(_transportWS, 'Error sending message | Exception = ' + ex + ' |  Msg = ' + message, message);\n                }\n            }\n        }\n    }\n\n    function start() {\n        _logger.debug('Starting transport...', _logSource);\n\n        // ensure transport is stopped\n        stop();\n\n        var success = false;\n        _websocket = _webSocketFactory.create(_URI);\n        if (_websocket) {\n            _websocket.onopen = onOpen;\n            _websocket.onclose = onClose;\n            _websocket.onerror = onError;\n            _websocket.onmessage = onMessage;\n            success = true;\n\n            _logger.debug('Started transport', _logSource);\n        }\n        return success;\n    }\n\n    function stop() {\n        if (_websocket) {\n            _logger.debug('Stopping transport...', _logSource);\n\n            _websocket.onopen = undefined;\n            _websocket.onmessage = undefined;\n            _websocket.onerror = undefined;\n            _websocket.onclose = undefined;\n            _websocket.close();\n            _websocket = undefined;\n\n            _isConnected = false;\n            _sessionID = undefined;\n\n            _logger.debug('Stopped transport', _logSource);\n        }\n    }\n    // #endregion\n    //-END-METHODS------------\n\n};\n\n/// <reference path=\"../../_references.js\" />\n\nETX.namespace('clientAPI');\n\nETX.clientAPI.WebSocketFactory = function (options) {\n\n    'use strict';\n\n    //-CONSTRUCTOR-------------\n    // #region\n    //----PRIVATE--------------\n    // #region\n    var _webSocketFactory = this,\n        _options = options || {};\n    // #endregion\n    //----END-PRIVATE---------  \n\n    //----PUBLIC--------------\n    // #region\n    _webSocketFactory.create = function create(url, protocols) {\n        // Create web socket transport object\n        if (protocols) {\n            return new WebSocket(url, protocols);\n        } else {\n            return new WebSocket(url);\n        }\n    };\n    // #endregion\n    //----END-PUBLIC----------\n\n    return _webSocketFactory;\n    // #endregion\n    //-END-CONSTRUCTOR--------\n\n};\n\n/// <reference path=\"../../../_references.js\" />\n\nETX.namespace('clientAPI.requests');\n\n/**\n * @class ETX.clientAPI.requests.OrderRequest\n *\n * @requires ETX\n * @requires ETX.clientAPI.Constants\n * @requires ETX.clientAPI.Helpers\n * @requires ETX.logging.Logger\n * @requires jQuery\n *\n * Creates a new `ETX.clientAPI.requests.OrderRequest`, which can be used to create, amend and cancel \n *    \n * **NOTE:** Requires the following third-party JavaScript libraries:   \n * \n *  +  [jQuery](http://api.jquery.com/)\n *   \n * ###Example:\n *      // Create new primary order with email and SMS alerts...\n *      var api = new ETX.clientAPI.ClientAPI({\n *          webSocketRootURL: 'ws://127.0.0.1:82',\n *          webAPIRootURL: 'http://127.0.0.1:81/',\n *          username: 'test_user',\n *          password: 'change_me',\n *          brokerID: '1'\n *      });\n *      var orderRequest = new ETX.clientAPI.requests.OrderRequest(ETX.clientAPI.requests.OrderRequest.requestTypes.NEW);\n *      orderRequest.marketID = '12345';\n *      orderRequest.subAccountID = '1';\n *      orderRequest.newOrders.primaryOrder.side = ETX.clientAPI.requests.OrderRequest.sides.BUY;\n *      orderRequest.newOrders.primaryOrder.quantity = 1;\n *      orderRequest.newOrders.primaryOrder.level = 123.45;\n *      orderRequest.smsAlertOn = true;\n *      orderRequest.emailAlertOn = true;\n *      orderRequest.alertMessage = 'This is a custom order message for Market \"12345\"!!!';\n *      // NOTE: Returns a jQuery Promise object, as this is an async request\n *      api.sendOrderRequest(orderRequest)\n *          .done(function (api, executionReport) {\n *              // Execution report should contain the created/amended/cancelled order's order status and text describing the details of the operation\n *              var orderStatus = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus];\n *              var text = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.Text];\n *          })\n *          .fail(function (api, executionReport) {\n *              // Execution report should contain the failed order's order status and text describing the failure\n *              var orderStatus = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus];\n *              var text = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.Text];\n *          });\n */\n/**\n * @constructor\n * @param {String} orderRequestType - Defines the type of order request action.\n * @param {Object} [options] - (Optional) Allows certain optional settings to be initialised upon instantiation.\n * @returns {ETX.clientAPI.requests.OrderRequest}\n */\nETX.clientAPI.requests.OrderRequest = function (orderRequestType, options) {\n\n    'use strict';\n\n    //-CONSTRUCTOR------------\n    //----PRIVATE-------------\n    var _orderRequest = this,\n        _options = options || {},\n        _helpers = _options.helpers || ETX.clientAPI.Helpers;\n    //----END-PRIVATE---------  \n\n    //----PUBLIC--------------\n    /** \n     * Gets or sets the type of order request action.\n     * @property {String} orderRequestType\n     */\n    _orderRequest.orderRequestType = orderRequestType;\n    /** \n     * Gets or sets the unique identifier of the market of the orders.\n     * @property {String} marketID\n     */\n    _orderRequest.marketID = undefined;\n    /** \n     * Gets or sets the unique identifier of the account's sub-account of the orders.\n     * @property {String} subAccountID\n     */\n    _orderRequest.subAccountID = undefined;\n    /** \n     * Gets the (read only) section for new orders.\n     *\n     * ###Example:\n     *      // Create new primary/oco order pair, each with stop and limit closing orders and email and SMS alerts...\n     *      var api = new ETX.clientAPI.ClientAPI({\n     *          webSocketRootURL: 'ws://127.0.0.1:82',\n     *          webAPIRootURL: 'http://127.0.0.1:81/',\n     *          username: 'test_user',\n     *          password: 'change_me',\n     *          brokerID: '1'\n     *      });\n     *      var orderRequest = new ETX.clientAPI.requests.OrderRequest(ETX.clientAPI.requests.OrderRequest.requestTypes.NEW);\n     *      orderRequest.marketID = '12345';\n     *      orderRequest.subAccountID = '1';\n     *      orderRequest.newOrders.primaryOrder.side = ETX.clientAPI.requests.OrderRequest.sides.BUY;\n     *      orderRequest.newOrders.primaryOrder.quantity = 1;\n     *      orderRequest.newOrders.primaryOrder.level = 123.45;\n     *      orderRequest.newOrders.primaryOrder.stopOrderOn = true;\n     *      orderRequest.newOrders.primaryOrder.stopOrderLevel = 123.21;\n     *      orderRequest.newOrders.primaryOrder.stopOrderGuaranteedOn = true;\n     *      orderRequest.newOrders.primaryOrder.stopOrderTrailingOn = true;\n     *      orderRequest.newOrders.primaryOrder.stopOrderTrailingIncrementSize = 15;\n     *      orderRequest.newOrders.primaryOrder.limitOrderOn = true;\n     *      orderRequest.newOrders.primaryOrder.limitOrderLevel = 125.21;\n     *      orderRequest.newOrders.ocoOrderOn = true;\n     *      orderRequest.newOrders.ocoOrder.side = ETX.clientAPI.requests.OrderRequest.sides.SELL;\n     *      orderRequest.newOrders.ocoOrder.quantity = 1;\n     *      orderRequest.newOrders.ocoOrder.level = 111.11;\n     *      orderRequest.newOrders.ocoOrder.stopOrderOn = true;\n     *      orderRequest.newOrders.ocoOrder.stopOrderLevel = 112.34;\n     *      orderRequest.newOrders.ocoOrder.stopOrderGuaranteedOn = true;\n     *      orderRequest.newOrders.ocoOrder.stopOrderTrailingOn = true;\n     *      orderRequest.newOrders.ocoOrder.stopOrderTrailingIncrementSize = 15;\n     *      orderRequest.newOrders.ocoOrder.limitOrderOn = true;\n     *      orderRequest.newOrders.ocoOrder.limitOrderLevel = 110.12;\n     *      // NOTE: Returns a jQuery Promise object, as this is an async request\n     *      api.sendOrderRequest(orderRequest)\n     *          .done(function (api, executionReport) {\n     *              // Execution report should contain the created/amended/cancelled order's order status and text describing the details of the operation\n     *              var orderStatus = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus];\n     *              var text = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.Text];\n     *          })\n     *          .fail(function (api, executionReport) {\n     *              // Execution report should contain the failed order's order status and text describing the failure\n     *              var orderStatus = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus];\n     *              var text = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.Text];\n     *          });\n     *\n     * @property {Object} newOrders\n     * @readonly\n     */\n    _orderRequest.newOrders = {\n        /** \n         * Gets or sets the unique identifier of the order group of the new order(s).\n         * @property {String} orderGroupID\n         * @member ETX.clientAPI.requests.OrderRequest.newOrders\n         */\n        orderGroupID: undefined,\n        /** \n         * Gets the (read only) section for the new primary order.\n         * @property {Object} primaryOrder\n         * @member ETX.clientAPI.requests.OrderRequest.newOrders\n         * @readonly\n         */\n        primaryOrder: {\n            /** \n             * Gets or sets the unique identifier of the new primary order.\n             * @property {String} orderID\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.primaryOrder\n             */\n            orderID: undefined,\n            /** \n             * Gets or sets the direction of the new primary order, which should be a value defined in `ETX.clientAPI.requests.OrderRequest.sides`.\n             * @property {String} side\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.primaryOrder\n             */\n            side: undefined,\n            /** \n             * Gets or sets the new primary order quantity.\n             * @property {Number} quantity\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.primaryOrder\n             */\n            quantity: undefined,\n            /** \n             * Gets or sets the new primary order level.\n             * @property {Number} level\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.primaryOrder\n             */\n            level: undefined,\n            /** \n             * Gets or sets whether the new primary order requires a stop order.\n             * @property {Boolean} stopOrderOn\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.primaryOrder\n             */\n            stopOrderOn: false,\n            /** \n             * Gets or sets the new primary order's stop order level.\n             * @property {Number} stopOrderLevel\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.primaryOrder\n             */\n            stopOrderLevel: undefined,\n            /** \n             * Gets or sets whether the new primary order's stop order is guaranteed.\n             * @property {Boolean} stopOrderGuaranteedOn\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.primaryOrder\n             */\n            stopOrderGuaranteedOn: false,\n            /** \n             * Gets or sets whether the new primary order's stop order is trailing.\n             * @property {Boolean} stopOrderTrailingOn\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.primaryOrder\n             */\n            stopOrderTrailingOn: false,\n            /** \n             * Gets or sets the new primary order's stop order trailing increment size.\n             * @property {Number} stopOrderTrailingIncrementSize\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.primaryOrder\n             */\n            stopOrderTrailingIncrementSize: undefined,\n            /** \n             * Gets or sets whether the new primary order requires a limit order.\n             * @property {Boolean} limitOrderOn\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.primaryOrder\n             */\n            limitOrderOn: false,\n            /** \n             * Gets or sets the new primary order's limit order level.\n             * @property {Number} limitOrderLevel\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.primaryOrder\n             */\n            limitOrderLevel: undefined\n        },\n        /** \n         * Gets or sets whether a new OCO order is required.\n         * @property {String} ocoOrderOn\n         * @member ETX.clientAPI.requests.OrderRequest.newOrders\n         */\n        ocoOrderOn: false,\n        /** \n         * Gets the (read only) section for the new OCO order.\n         * @property {Object} ocoOrder\n         * @member ETX.clientAPI.requests.OrderRequest.newOrders\n         * @readonly\n         */\n        ocoOrder: {\n            /** \n             * Gets or sets the unique identifier of the new OCO order.\n             * @property {String} orderID\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.ocoOrder\n             */\n            orderID: undefined,\n            /** \n             * Gets or sets the direction of the new oco order, which should be a value defined in `ETX.clientAPI.requests.OrderRequest.sides`.\n             * @property {String} side\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.ocoOrder\n             */\n            side: undefined,\n            /** \n             * Gets or sets the new oco order quantity.\n             * @property {Number} quantity\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.ocoOrder\n             */\n            quantity: undefined,\n            /** \n             * Gets or sets the new oco order level.\n             * @property {Number} level\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.ocoOrder\n             */\n            level: undefined,\n            /** \n             * Gets or sets whether the new oco order requires a stop order.\n             * @property {Boolean} stopOrderOn\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.ocoOrder\n             */\n            stopOrderOn: false,\n            /** \n             * Gets or sets the new oco order's stop order level.\n             * @property {Number} stopOrderLevel\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.ocoOrder\n             */\n            stopOrderLevel: undefined,\n            /** \n             * Gets or sets whether the new oco order's stop order is guaranteed.\n             * @property {Boolean} stopOrderGuaranteedOn\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.ocoOrder\n             */\n            stopOrderGuaranteedOn: false,\n            /** \n             * Gets or sets whether the new oco order's stop order is trailing.\n             * @property {Boolean} stopOrderTrailingOn\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.ocoOrder\n             */\n            stopOrderTrailingOn: false,\n            /** \n             * Gets or sets the new oco order's stop order trailing increment size.\n             * @property {Number} stopOrderTrailingIncrementSize\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.ocoOrder\n             */\n            stopOrderTrailingIncrementSize: undefined,\n            /** \n             * Gets or sets whether the new oco order requires a limit order.\n             * @property {Boolean} limitOrderOn\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.ocoOrder\n             */\n            limitOrderOn: false,\n            /** \n             * Gets or sets the new oco order's limit order level.\n             * @property {Number} limitOrderLevel\n             * @member ETX.clientAPI.requests.OrderRequest.newOrders.ocoOrder\n             */\n            limitOrderLevel: undefined\n        },\n        /** \n         * Gets or sets the new primary/oco order(s) good til type, which should be a value defined in `ETX.clientAPI.requests.OrderRequest.goodTilTypes`.\n         * @property {Number} goodTilType\n         * @member ETX.clientAPI.requests.OrderRequest.newOrders\n         */\n        goodTilType: ETX.clientAPI.requests.OrderRequest.goodTilTypes.CANCELLED,\n        /** \n         * Gets or sets the new primary/oco order(s) \"good until\" date/time.   \n         *    \n         * **NOTE: This is only required, if the `newOrders.goodTilType` value is set to `ETX.clientAPI.requests.OrderRequest.goodTilTypes.DATE`.**\n         * @property {Date} goodTilDate\n         * @member ETX.clientAPI.requests.OrderRequest.newOrders\n         */\n        goodTilDateTime: undefined\n    };\n    /** \n     * Gets the (read only) section for closing orders.\n     *\n     * ###Example:\n     *     // Create new primary/oco order pair, each with stop and limit closing orders and email and SMS alerts...\n     *     var api = new ETX.clientAPI.ClientAPI({\n     *         webSocketRootURL: 'ws://127.0.0.1:82',\n     *         webAPIRootURL: 'http://127.0.0.1:81/',\n     *         username: 'test_user',\n     *         password: 'change_me',\n     *         brokerID: '1'\n     *     });\n     *     var orderRequest = new ETX.clientAPI.requests.OrderRequest(ETX.clientAPI.requests.OrderRequest.requestTypes.NEW);\n     *     orderRequest.marketID = '12345';\n     *     orderRequest.subAccountID = '1';\n     *     orderRequest.closingOrders.tradeID = '54321';\n     *     orderRequest.closingOrders.stopOrderOn = true;\n     *     orderRequest.closingOrders.stopOrderLevel = 123.21;\n     *     orderRequest.closingOrders.stopOrderGuaranteedOn = true;\n     *     orderRequest.closingOrders.stopOrderTrailingOn = true;\n     *     orderRequest.closingOrders.stopOrderTrailingIncrementSize = 15;\n     *     orderRequest.closingOrders.limitOrderOn = true;\n     *     orderRequest.closingOrders.limitOrderLevel = 125.21;\n     *     // NOTE: Returns a jQuery Promise object, as this is an async request\n     *     api.sendOrderRequest(orderRequest)\n     *         .done(function (api, executionReport) {\n     *             // Execution report should contain the created/amended/cancelled order's order status and text describing the details of the operation\n     *             var orderStatus = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus];\n     *             var text = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.Text];\n     *         })\n     *         .fail(function (api, executionReport) {\n     *             // Execution report should contain the failed order's order status and text describing the failure\n     *             var orderStatus = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus];\n     *             var text = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.Text];\n     *         });\n     *\n     * @property {Object} closingOrders\n     * @readonly\n     */\n    _orderRequest.closingOrders = {\n        /** \n         * Gets or sets the unique identifier of the trade of the closing order(s).\n         * @property {String} tradeID\n         * @member ETX.clientAPI.requests.OrderRequest.closingOrders\n         */\n        tradeID: undefined,\n        /** \n         * Gets or sets the unique identifier of the trade's closing stop order.\n         * @property {String} stopOrderID\n         * @member ETX.clientAPI.requests.OrderRequest.closingOrders\n         */\n        stopOrderID: undefined,\n        /** \n         * Gets or sets whether the new oco order requires a stop order.\n         * @property {Boolean} stopOrderOn\n         * @member ETX.clientAPI.requests.OrderRequest.closingOrders\n         */\n        stopOrderOn: false,\n        /** \n         * Gets or sets the new oco order's stop order level.\n         * @property {Number} stopOrderLevel\n         * @member ETX.clientAPI.requests.OrderRequest.closingOrders\n         */\n        stopOrderLevel: undefined,\n        /** \n         * Gets or sets whether the new oco order's stop order is guaranteed.\n         * @property {Boolean} stopOrderGuaranteedOn\n         * @member ETX.clientAPI.requests.OrderRequest.closingOrders\n         */\n        stopOrderGuaranteedOn: false,\n        /** \n         * Gets or sets whether the new oco order's stop order is trailing.\n         * @property {Boolean} stopOrderTrailingOn\n         * @member ETX.clientAPI.requests.OrderRequest.closingOrders\n         */\n        stopOrderTrailingOn: false,\n        /** \n         * Gets or sets the new oco order's stop order trailing increment size.\n         * @property {Number} stopOrderTrailingIncrementSize\n         * @member ETX.clientAPI.requests.OrderRequest.closingOrders\n         */\n        stopOrderTrailingIncrementSize: undefined,\n        /** \n         * Gets or sets the unique identifier of the trade's closing limit order.\n         * @property {String} limitOrderID\n         * @member ETX.clientAPI.requests.OrderRequest.closingOrders\n         */\n        limitOrderID: undefined,\n        /** \n         * Gets or sets whether the new oco order requires a limit order.\n         * @property {Boolean} limitOrderOn\n         * @member ETX.clientAPI.requests.OrderRequest.closingOrders\n         */\n        limitOrderOn: false,\n        /** \n         * Gets or sets the new oco order's limit order level.\n         * @property {Number} limitOrderLevel\n         * @member ETX.clientAPI.requests.OrderRequest.closingOrders\n         */\n        limitOrderLevel: undefined\n    };\n    /** \n     * Gets or sets the unique identifier of the new or closing order to cancel.\n     *\n     * ###Example:\n     *      // Cancel and existing new or closing order...\n     *      var api = new ETX.clientAPI.ClientAPI({\n     *          webSocketRootURL: 'ws://127.0.0.1:82',\n     *          webAPIRootURL: 'http://127.0.0.1:81/',\n     *          username: 'test_user',\n     *          password: 'change_me',\n     *          brokerID: '1'\n     *      });\n     *      var orderRequest = new ETX.clientAPI.requests.OrderRequest(ETX.clientAPI.requests.OrderRequest.requestTypes.CANCEL);\n     *      orderRequest.cancellingOrderID = '98765';\n     *      orderRequest.marketID = '12345';\n     *      // NOTE: Returns a jQuery Promise object, as this is an async request\n     *      api.sendOrderRequest(orderRequest)\n     *          .done(function (api, executionReport) {\n     *              // Execution report should contain the cancelled order's order status and text describing the details of the operation\n     *              var orderStatus = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus];\n     *              var text = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.Text];\n     *          })\n     *          .fail(function (api, executionReport) {\n     *              // Execution report should contain the failed order's order status and text describing the failure\n     *              var orderStatus = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus];\n     *              var text = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.Text];\n     *          });\n     *\n     * @property {String} cancellingOrderID\n     */\n    _orderRequest.cancellingOrderID = undefined;\n    /** \n     * Gets or sets whether the order should send SMS alerts when executed.\n     * @property {Boolean} smsAlertOn\n     */\n    _orderRequest.smsAlertOn = _helpers.convert.toBoolean(_options.smsAlertOn);\n    /** \n     * Gets or sets whether the order should send email alerts when executed.\n     * @property {Boolean} emailAlertOn\n     */\n    _orderRequest.emailAlertOn = _helpers.convert.toBoolean(_options.emailAlertOn);\n    /** \n     * Gets or sets the SMS and/or Email alert message to use if the order executes.\n     * @property {String} alertMessage\n     */\n    _orderRequest.alertMessage = _options.alertMessage;\n\n    /** \n     * Gets or sets the (client generated) unique identifier for a sent order request.\n     * @property {String} uniqueClientIdentifier\n     */\n    _orderRequest.uniqueClientIdentifier = _options.uniqueClientIdentifier;\n    /** \n     * Gets or sets the (client generated) transaction timestamp for a sent order request.\n     * @property {Date} transactionTime\n     */\n    _orderRequest.transactionTime = _options.transactionTime;\n\n    _orderRequest.parseOrder = parseOrder;\n    //----END-PUBLIC----------\n\n    return _orderRequest;\n    //-END-CONSTRUCTOR--------\n\n\n    //----METHODS-------------\n    /** \n     * Parses a working order JSON object and stores the data appropriately within the order request.\n     *\n     * @method parseOrder\n     * @param {Object} workingOrder - Object containing working order data.\n     * @returns {void} \n     */\n    function parseOrder(workingOrder) {\n        if ($.isPlainObject(workingOrder) === false) { workingOrder = JSON.parse(workingOrder || {}); }\n\n        // New Order specific\n        if ((ETX.clientAPI.Constants.messages.WorkingOrder.OrderType_New === workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderType]) ||\n            (ETX.clientAPI.Constants.messages.WorkingOrder.OrderType_OCO === workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderType])) {\n            // Common \n            _orderRequest.marketID = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.MarketID];\n            _orderRequest.subAccountID = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.SubAccountID];\n            _orderRequest.newOrders.orderGroupID = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderGroupID];\n            _orderRequest.newOrders.goodTilType = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.GoodTilType] || ETX.clientAPI.requests.OrderRequest.goodTilTypes.CANCELLED;\n            if (_orderRequest.newOrders.goodTilType === ETX.clientAPI.requests.OrderRequest.goodTilTypes.DATE) {\n                var goodTilDate = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.GoodTilDateTime];\n                _orderRequest.newOrders.goodTilDateTime = _helpers.convert.toDate(goodTilDate);\n            }\n            _orderRequest.emailAlertOn = _helpers.convert.toBoolean(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.EmailAlertOn]);\n            _orderRequest.smsAlertOn = _helpers.convert.toBoolean(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.SMSAlertOn]);\n            _orderRequest.alertMessage = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.AlertMessage];\n\n            // Primary Order specific\n            if (ETX.clientAPI.Constants.messages.WorkingOrder.OrderType_New === workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderType]) {\n                _orderRequest.newOrders.primaryOrder.orderID = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderID];\n                _orderRequest.newOrders.primaryOrder.side = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.Side];\n                _orderRequest.newOrders.primaryOrder.quantity = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.Quantity]);\n                _orderRequest.newOrders.primaryOrder.level = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.Level]);\n                _orderRequest.newOrders.primaryOrder.stopOrderOn = _helpers.compare.isIdentifier(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.StopOrderID]);\n                _orderRequest.newOrders.primaryOrder.stopOrderLevel = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.StopOrderLevel]);\n                _orderRequest.newOrders.primaryOrder.stopOrderGuaranteedOn = _helpers.convert.toBoolean(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.GuaranteedStopsOn]);\n                _orderRequest.newOrders.primaryOrder.stopOrderTrailingOn = _helpers.convert.toBoolean(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.TrailingStopsOn]);\n                _orderRequest.newOrders.primaryOrder.stopOrderTrailingIncrementSize = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.TrailingStopsIncrementSize]);\n                _orderRequest.newOrders.primaryOrder.limitOrderOn = _helpers.compare.isIdentifier(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.LimitOrderID]);\n                _orderRequest.newOrders.primaryOrder.limitOrderLevel = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.LimitOrderLevel]);\n            }\n\n            // OCO Order specific\n            if (ETX.clientAPI.Constants.messages.WorkingOrder.OrderType_OCO === workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderType]) {\n                _orderRequest.newOrders.ocoOrderOn = true;\n                _orderRequest.newOrders.ocoOrder.orderID = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderID];\n                _orderRequest.newOrders.ocoOrder.side = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.Side];\n                _orderRequest.newOrders.ocoOrder.quantity = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.Quantity]);\n                _orderRequest.newOrders.ocoOrder.level = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.Level]);\n                _orderRequest.newOrders.ocoOrder.stopOrderOn = _helpers.compare.isIdentifier(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.StopOrderID]);\n                _orderRequest.newOrders.ocoOrder.stopOrderLevel = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.StopOrderLevel]);\n                _orderRequest.newOrders.ocoOrder.stopOrderGuaranteedOn = _helpers.convert.toBoolean(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.GuaranteedStopsOn]);\n                _orderRequest.newOrders.ocoOrder.stopOrderTrailingOn = _helpers.convert.toBoolean(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.TrailingStopsOn]);\n                _orderRequest.newOrders.ocoOrder.stopOrderTrailingIncrementSize = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.TrailingStopsIncrementSize]);\n                _orderRequest.newOrders.ocoOrder.limitOrderOn = _helpers.compare.isIdentifier(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.LimitOrderID]);\n                _orderRequest.newOrders.ocoOrder.limitOrderLevel = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.LimitOrderLevel]);\n            }\n        }\n\n        // Closing Order(s) specific\n        if ((ETX.clientAPI.Constants.messages.WorkingOrder.OrderType_Stop === workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderType]) ||\n            (ETX.clientAPI.Constants.messages.WorkingOrder.OrderType_Limit === workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderType])) {\n            // Common \n            _orderRequest.marketID = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.MarketID];\n            _orderRequest.subAccountID = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.SubAccountID];\n            _orderRequest.closingOrders.tradeID = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.TradeID];\n            _orderRequest.emailAlertOn = _helpers.convert.toBoolean(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.EmailAlertOn]);\n            _orderRequest.smsAlertOn = _helpers.convert.toBoolean(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.SMSAlertOn]);\n            _orderRequest.alertMessage = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.AlertMessage];\n\n            // Stop Order specific \n            if (ETX.clientAPI.Constants.messages.WorkingOrder.OrderType_Stop === workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderType]) {\n                _orderRequest.closingOrders.stopOrderOn = true;\n                _orderRequest.closingOrders.stopOrderID = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderID];\n                _orderRequest.closingOrders.stopOrderLevel = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.Level]);\n                _orderRequest.closingOrders.stopOrderGuaranteedOn = _helpers.convert.toBoolean(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.GuaranteedStopsOn]);\n                _orderRequest.closingOrders.stopOrderTrailingOn = _helpers.convert.toBoolean(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.TrailingStopsOn]);\n                _orderRequest.closingOrders.stopOrderTrailingIncrementSize = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.TrailingStopsIncrementSize]);\n            }\n\n            // Limit Order specific \n            if (ETX.clientAPI.Constants.messages.WorkingOrder.OrderType_Limit === workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderType]) {\n                _orderRequest.closingOrders.limitOrderOn = true;\n                _orderRequest.closingOrders.limitOrderID = workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.OrderID];\n                _orderRequest.closingOrders.limitOrderLevel = parseFloat(workingOrder[ETX.clientAPI.Constants.messages.WorkingOrder.Level]);\n            }\n        }\n    }\n    //----END-METHODS---------\n\n};\n\n\n//----STATIC--------------\n/** \n * Order request goodTilTypes:   \n * `{ CANCELLED: 'c', END_OF_DAY: 'eod', DATE: 'd' }`\n *\n * @enum {String} ETX.clientAPI.requests.OrderRequest.goodTilTypes\n *\n * @member ETX.clientAPI.requests.OrderRequest\n * @static\n * @readonly\n */\nETX.clientAPI.requests.OrderRequest.goodTilTypes = {\n    /** \n     * Good until cancelled type.\n     * @property {String} CANCELLED\n     */\n    CANCELLED: ETX.clientAPI.Constants.messages.OrderRequest.NewOrders.GoodTilType_Cancelled,\n    /** \n     * Good until specific date type.\n     * @property {String} DATE\n     */\n    DATE: ETX.clientAPI.Constants.messages.OrderRequest.NewOrders.GoodTilType_DateTime,\n    /** \n     * Good until end of day type.\n     * @property {String} END_OF_DAY\n     */\n    END_OF_DAY: ETX.clientAPI.Constants.messages.OrderRequest.NewOrders.GoodTilType_EndOfDay\n};\n\n/** \n * Order request request types:   \n * `{ NEW: 'n', AMEND: 'a', CANCEL: 'c' }`\n *\n * @enum {String} ETX.clientAPI.requests.OrderRequest.requestTypes\n *\n * @member ETX.clientAPI.requests.OrderRequest\n * @static\n * @readonly\n */\nETX.clientAPI.requests.OrderRequest.requestTypes = {\n    /** \n     * Amend request type.\n     * @property {String} AMEND\n     */\n    AMEND: ETX.clientAPI.Constants.messages.OrderRequest.OrderRequestType_Amend,\n    /** \n     * Cancel request type.\n     * @property {String} CANCEL\n     */\n    CANCEL: ETX.clientAPI.Constants.messages.OrderRequest.OrderRequestType_Cancel,\n    /** \n     * New request type.\n     * @property {String} NEW\n     */\n    NEW: ETX.clientAPI.Constants.messages.OrderRequest.OrderRequestType_New\n};\n\n/** \n * Order request sides:   \n * `{ BUY: 'b', SELL: 's' }`\n *\n * @enum {String} ETX.clientAPI.requests.OrderRequest.sides\n *\n * @member ETX.clientAPI.requests.OrderRequest\n * @static\n * @readonly\n */\nETX.clientAPI.requests.OrderRequest.sides = {\n    /** \n     * Buy action.\n     * @property {String} BUY\n     */\n    BUY: ETX.clientAPI.Constants.messages.OrderRequest.NewOrders.Primary.Side_Buy,\n    /** \n     * Sell action.\n     * @property {String} SELL\n     */\n    SELL: ETX.clientAPI.Constants.messages.OrderRequest.NewOrders.Primary.Side_Sell\n};\n//----END-STATIC----------\n\n/// <reference path=\"../../../_references.js\" />\n\nETX.namespace(\"clientAPI.requests\");\n\n/**\n * @class ETX.clientAPI.requests.PriceAlertRequest\n *\n * @requires ETX\n * @requires ETX.clientAPI.Constants\n * @requires ETX.clientAPI.Helpers\n * @requires ETX.logging.Logger\n * @requires jQuery\n *\n * Creates a new `ETX.clientAPI.requests.PriceAlertRequest`, which can be used to create, amend and cancel price alerts..   \n *    \n * **NOTE:** Requires the following third-party JavaScript libraries:   \n *  \n *  + [jQuery](http://api.jquery.com/)\n *   \n * ###Example:\n *      var api = new ETX.clientAPI.ClientAPI({\n *          webSocketRootURL: 'ws://127.0.0.1:82',\n *          webAPIRootURL: 'http://127.0.0.1:81/',\n *          username: 'test_user',\n *          password: 'change_me',\n *          brokerID: '1'\n *      });\n *      \n *      var priceAlertRequest = new ETX.clientAPI.requests.PriceAlertRequest(ETX.clientAPI.requests.PriceAlertRequest.requestTypes.NEW);\n *      priceAlertRequest.marketID = '12345';\n *      priceAlertRequest.side = ETX.clientAPI.requests.PriceAlertRequest.sides.BUY;\n *      priceAlertRequest.triggerPrice = '123.45';\n *      priceAlertRequest.smsAlertOn = true;\n *      priceAlertRequest.emailAlertOn = true;\n *      priceAlertRequest.alertMessage = 'This is a custom price alert message for Market \"12345\"!!!';\n *      \n *      api.sendPriceAlertRequest(priceAlertRequest)\n *          .done(function (api, priceAlertResponse) {\n *              // Price alert request should have executed successfully\n *          })\n *          .fail(function (api, priceAlertResponse) {\n *              // Price alert response should have contain text describing the details of the failed price alert request\n *              var text = priceAlertResponse[ETX.clientAPI.Constants.messages.PriceAlertResponse.Text];\n *          });\n */\n/**\n * @constructor\n * @param {String} priceAlertRequestType - Defines the type of price alert request action.\n * @param {Object} [options] - (Optional) Allows certain optional settings to be initialised upon instantiation.\n * @returns {ETX.clientAPI.requests.TradeQuoteRequest}\n */\nETX.clientAPI.requests.PriceAlertRequest = function (priceAlertRequestType, options) {\n\n    'use strict';\n\n    //-CONSTRUCTOR------------\n    //----PRIVATE-------------\n    var _priceAlertRequest = this,\n        _options = options || {},\n        _helpers = ETX.clientAPI.Helpers;\n    //----END-PRIVATE---------  \n\n    //----PUBLIC--------------\n    /** \n     * Gets or sets the type of price alert request action.\n     * @property {String} priceAlertRequestType\n     */\n    _priceAlertRequest.priceAlertRequestType = priceAlertRequestType;\n    /** \n     * Gets or sets the unique identifier of the price alert.\n     * @property {String} alertID\n     */\n    _priceAlertRequest.alertID = undefined;\n    /** \n     * Gets or sets the unique identifier of the market to place the price alert on.\n     * @property {String} marketID\n     */\n    _priceAlertRequest.marketID = undefined;\n    /** \n     * Gets or sets the direction of the price alert to be placed, which should be a value defined in `ETX.clientAPI.requests.PriceAlertRequest.sides`.\n     * @property {String} side\n     */\n    _priceAlertRequest.side = undefined;\n    /** \n     * Gets or sets the price the price alert should be triggered at. \n     * @property {Number} triggerPrice\n     */\n    _priceAlertRequest.triggerPrice = undefined;\n    /** \n     * Gets or sets whether the price alert should send SMS alerts when triggered.\n     * @property {Boolean} smsAlertOn\n     */\n    _priceAlertRequest.smsAlertOn = false;\n    /** \n     * Gets or sets whether the price alert should send email alerts when triggered.\n     * @property {Boolean} emailAlertOn\n     */\n    _priceAlertRequest.emailAlertOn = false;\n    /** \n     * Gets or sets the SMS and/or Email alert message to use if the price alert triggers.\n     * @property {String} alertMessage\n     */\n    _priceAlertRequest.alertMessage = undefined;\n\n    /** \n     * Gets or sets the (client generated) unique identifier for a sent price alert request.\n     * @property {String} uniqueClientIdentifier\n     */\n    _priceAlertRequest.uniqueClientIdentifier = undefined;\n    /** \n     * Gets or sets the (client generated) transaction timestamp for a sent price alert request.\n     * @property {Date} transactionTime\n     */\n    _priceAlertRequest.transactionTime = undefined;\n\n    _priceAlertRequest.parsePriceAlert = parsePriceAlert;\n    //----END-PUBLIC----------\n    \n    \n    return _priceAlertRequest;\n    //-END-CONSTRUCTOR--------\n\n\n    //----METHODS-------------\n    /** \n     * Parses a price alert JSON object and stores the data appropriately within the price alert request.\n     *\n     * @method parsePriceAlert\n     * @param {Object} priceAlert - Object containing price alert data.\n     * @returns {void}\n     */\n    function parsePriceAlert(priceAlert) {\n        if ($.isPlainObject(priceAlert) === false) { priceAlert = JSON.parse(priceAlert || {}); }\n\n        _priceAlertRequest.alertID = priceAlert[ETX.clientAPI.Constants.messages.PriceAlert.AlertID];\n        _priceAlertRequest.marketID = priceAlert[ETX.clientAPI.Constants.messages.PriceAlert.MarketID];\n        _priceAlertRequest.side = priceAlert[ETX.clientAPI.Constants.messages.PriceAlert.Side];\n        _priceAlertRequest.triggerPrice = (+priceAlert[ETX.clientAPI.Constants.messages.PriceAlert.TriggerPrice]);\n        _priceAlertRequest.smsAlertOn = _helpers.convert.toBoolean(priceAlert[ETX.clientAPI.Constants.messages.PriceAlert.SMSAlertOn]);\n        _priceAlertRequest.emailAlertOn = _helpers.convert.toBoolean(priceAlert[ETX.clientAPI.Constants.messages.PriceAlert.EmailAlertOn]);\n        _priceAlertRequest.alertMessage = priceAlert[ETX.clientAPI.Constants.messages.PriceAlert.AlertMessage];\n        _priceAlertRequest.transactionTime = priceAlert[ETX.clientAPI.Constants.messages.PriceAlert.TransactionTime];\n    }\n    //----END-METHODS---------\n\n};\n\n\n//----STATIC--------------\n/** \n * Price alert request request types:   \n * `{ NEW: 'n', AMEND: 'a', CANCEL: 'c' }`\n *\n * @enum {String} ETX.clientAPI.requests.PriceAlertRequest.requestTypes\n *\n * @member ETX.clientAPI.requests.PriceAlertRequest\n * @static\n * @readonly\n */\nETX.clientAPI.requests.PriceAlertRequest.requestTypes = {\n    /** \n     * Amend request type.\n     * @property {String} AMEND\n     */\n    AMEND: ETX.clientAPI.Constants.messages.PriceAlertRequest.PriceAlertRequestType_Amend,\n    /** \n     * Cancel request type.\n     * @property {String} CANCEL\n     */\n    CANCEL: ETX.clientAPI.Constants.messages.PriceAlertRequest.PriceAlertRequestType_Cancel,\n    /** \n     * New request type.\n     * @property {String} NEW\n     */\n    NEW: ETX.clientAPI.Constants.messages.PriceAlertRequest.PriceAlertRequestType_New\n};\n\n/** \n * Price alert request sides:   \n * `{ BUY: 'b', SELL: 's' }`\n *\n * @enum {String} ETX.clientAPI.requests.PriceAlertRequest.sides\n *\n * @member ETX.clientAPI.requests.PriceAlertRequest\n * @static\n * @readonly\n */\nETX.clientAPI.requests.PriceAlertRequest.sides = {\n    /** \n     * Buy action.\n     * @property {String} BUY\n     */\n    BUY: ETX.clientAPI.Constants.messages.PriceAlertRequest.Side_Buy,\n    /** \n     * Sell action.\n     * @property {String} SELL\n     */\n    SELL: ETX.clientAPI.Constants.messages.PriceAlertRequest.Side_Sell\n};\n//----END-STATIC----------\n\n/// <reference path=\"../../../_references.js\" />\n\nETX.namespace('clientAPI.requests');\n\n/**\n * @class ETX.clientAPI.requests.TradeQuoteRequest\n *\n * @requires ETX\n * @requires ETX.clientAPI.Constants\n * @requires ETX.logging.Logger\n *\n * Creates a new `ETX.clientAPI.requests.TradeQuoteRequest`, which can be used to create request-for-quote (RFQ) message.   \n *   \n * ###Example:\n *      var api = new ETX.clientAPI.ClientAPI({\n *          webSocketRootURL: 'ws://127.0.0.1:82',\n *          webAPIRootURL: 'http://127.0.0.1:81/',\n *          username: 'test_user',\n *          password: 'change_me',\n *          brokerID: '1'\n *      });\n *      \n *      var tradeQuoteRequest = new ETX.clientAPI.requests.TradeQuoteRequest();\n *      tradeQuoteRequest.marketID = '12345';\n *      tradeQuoteRequest.quantity = 1;\n *      \n *      api.sendTradeQuoteRequest(tradeQuoteRequest)\n *          .done(function (api, tradeQuoteResponse) {\n *              // Trade quote response should have contain quoted bid price, quoted ask price and the quote timeout\n *              var quotedBid = tradeQuoteResponse[ETX.clientAPI.Constants.messages.TradeQuoteResponse.QuotedBid];\n *              var quotedAsk = tradeQuoteResponse[ETX.clientAPI.Constants.messages.TradeQuoteResponse.QuotedAsk];\n *              var quoteTimeout = tradeQuoteResponse[ETX.clientAPI.Constants.messages.TradeQuoteResponse.QuoteTimeout];\n *          })\n *          .fail(function (api, tradeQuoteResponse) {\n *              // Trade quote response should contain the failed trade quote request's order status and text describing the failure\n *              var quoteStatus = tradeQuoteResponse[ETX.clientAPI.Constants.messages.TradeQuoteResponse.QuoteStatus];\n *              var text = tradeQuoteResponse[ETX.clientAPI.Constants.messages.TradeQuoteResponse.Text];\n *          });\n */\n/**\n * @constructor\n * @param {String} marketID - Unique identifier of the market to request the quote for.\n * @param {String} quantity - Trade quote quantity.\n * @param {String} [side] - (Optional) Indicates a preference in direction of the trade quote to be placed, which should be a value defined in `ETX.clientAPI.requests.TradeQuoteRequest.sides`.\n * @returns {ETX.clientAPI.requests.TradeQuoteRequest}\n */\nETX.clientAPI.requests.TradeQuoteRequest = function (marketID, quantity, side) {\n\n    'use strict';\n\n    //-CONSTRUCTOR------------\n    //----PRIVATE-------------\n    var _tradeQuoteRequest = this;\n    //----END-PRIVATE---------  \n\n    //----PUBLIC--------------\n    /** \n     * Gets or sets the (client generated) transaction timestamp for a sent trade quote request.\n     * @property {Date} transactionTime\n     */\n    _tradeQuoteRequest.transactionTime = new Date().toISOString();\n    /** \n     * Gets or sets the (client generated) unique identifier for a sent trade quote request.\n     * @property {String} uniqueClientIdentifier\n     */\n    _tradeQuoteRequest.uniqueClientIdentifier = ETX.clientAPI.Messages.buildUniqueClientIdentifier(ETX.clientAPI.Constants.messages.TradeQuoteRequest.MessageType, _tradeQuoteRequest.transactionTime);\n    /** \n     * Gets or sets the unique identifier of the market to request the quote for.\n     * @property {String} marketID\n     */\n    _tradeQuoteRequest.marketID = marketID;\n    /** \n     * Gets or sets the trade quote quantity.\n     * @property {Number} quantity\n     */\n    _tradeQuoteRequest.quantity = quantity;\n    /** \n     * Gets or sets the (optional) indication of a preference in direction of the trade quote to be placed, which should be a value defined in `ETX.clientAPI.requests.TradeQuoteRequest.sides`.\n     * @property {String} side\n     */\n    _tradeQuoteRequest.side = side;\n    //----END-PUBLIC----------\n    \n    \n    return _tradeQuoteRequest;\n    //-END-CONSTRUCTOR--------\n\n\n    //----METHODS-------------\n    //----END-METHODS---------\n\n};\n\n\n//----STATIC--------------\n/** \n * Trade quote request sides:   \n * `{ BUY: 'b', SELL: 's' }`\n *\n * @enum {String} ETX.clientAPI.requests.TradeQuoteRequest.sides\n *\n * @member ETX.clientAPI.requests.TradeQuoteRequest\n * @static\n * @readonly\n */\nETX.clientAPI.requests.TradeQuoteRequest.sides = {\n    /** \n     * Buy action.\n     * @property {String} BUY\n     */\n    BUY: ETX.clientAPI.Constants.messages.TradeQuoteRequest.Side_Buy,\n    /** \n     * Sell action.\n     * @property {String} SELL\n     */\n    SELL: ETX.clientAPI.Constants.messages.TradeQuoteRequest.Side_Sell\n};\n//----END-STATIC----------\n\n/// <reference path=\"../../../_references.js\" />\n\nETX.namespace('clientAPI.requests');\n\n/**\n * @class ETX.clientAPI.requests.TradeRequest\n *\n * @requires ETX\n * @requires ETX.clientAPI.Constants\n * @requires ETX.clientAPI.Helpers\n * @requires ETX.logging.Logger\n *\n * Creates a new `ETX.clientAPI.requests.TradeRequest`, which can be used to create new trades.   \n *    \n * ###Example:\n *      var api = new ETX.clientAPI.ClientAPI({\n *          webSocketRootURL: 'ws://127.0.0.1:82',\n *          webAPIRootURL: 'http://127.0.0.1:81/',\n *          username: 'test_user',\n *          password: 'change_me',\n *          brokerID: '1'\n *      });\n *      \n *      var tradeRequest = new ETX.clientAPI.requests.TradeRequest();\n *      tradeRequest.marketID = '12345';\n *      tradeRequest.side = ETX.clientAPI.requests.TradeRequest.sides.BUY;\n *      tradeRequest.quantity = 1;\n *      tradeRequest.price = '';        // NOTE: Omit to use market live price (i.e. market order)\n *      \n *      api.sendTradeRequest(tradeRequest)\n *          .progress(function (api, executionReport) {\n *              // NOTE: There may be several intermediate execution reports (i.e. dealer claiming ticket, re-quoting the price etc.)\n *              // Execution report should contain the pending trade's order status\n *              var orderStatus = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus];\n *          })\n *          .done(function (api, executionReport) {\n *              // Execution report should contain the created trade's order status and text describing the details of the created trade\n *              var orderStatus = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus];\n *              var text = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.Text];\n *          })\n *          .fail(function onTradeRequestDone(api, executionReport) {\n *              // Execution report should contain the failed trade's order status and text describing the failure\n *              var orderStatus = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.OrderStatus];\n *              var text = executionReport[ETX.clientAPI.Constants.messages.ExecutionReport.Text];\n *          });\n */\n/**\n * @constructor\n * @param {String} marketID - Unique identifier of the market to place the trade on.\n * @param {String} side - Direction of the trade to be placed, which should be a value defined in `ETX.clientAPI.requests.TradeRequest.sides`.\n * @param {String} quantity - Trade quantity.\n * @param {String} [price] - (Optional) Price the trade should be placed at. NOTE: If a price is omitted, then a market order at the market's current live price will be placed.\n * @param {Object} [options] - (Optional) Allows certain optional settings to be initialised upon instantiation.\n */\nETX.clientAPI.requests.TradeRequest = function (marketID, side, quantity, price, options) {\n\n    'use strict';\n\n    //-CONSTRUCTOR------------\n    //----PRIVATE-------------\n    var _tradeRequest = this,\n        _options = options || {},\n        _helpers = ETX.clientAPI.Helpers;\n    //----END-PRIVATE---------  \n\n    //----PUBLIC--------------\n    /** \n     * Gets or sets the unique identifier of a trade to fully or partially close.\n     * @property {String} closingTradeID\n     */\n    _tradeRequest.closingTradeID = _options.closingTradeID;\n    /** \n     * Gets or sets the unique identifier of the market to place the trade on.\n     * @property {String} marketID\n     */\n    _tradeRequest.marketID = marketID;\n    /** \n     * Gets or sets the (optional) currency to use when placing the trade.   \n     *    \n     * **NOTE:** If not provided, then the account's default currency will be used.\n     * @property {String} currencyName\n     */\n    _tradeRequest.currencyName = _options.currencyName;\n    /** \n     * Gets or sets the (optional) unique identifier of the sub-account that will determine the currency to use when placing the trade.   \n     *    \n     * **NOTE:** If not provided, then the account's default currency will be used.\n     * @property {String} subAccountID\n     */\n    _tradeRequest.subAccountID = _options.subAccountID;\n    /** \n     * Gets or sets the direction of the trade to be placed, which should be a value defined in `ETX.clientAPI.requests.TradeRequest.sides`.\n     * @property {String} side\n     */\n    _tradeRequest.side = side;\n    /** \n     * Gets or sets the trade quantity.\n     * @property {Number} quantity\n     */\n    _tradeRequest.quantity = (+quantity);\n    /** \n     * Gets or sets the price the trade should be placed at.   \n     *    \n     * **NOTE:** If a price is omitted, then a market order will be placed (i.e. trade request at the market's current live price).\n     * @property {Number} price\n     */\n    _tradeRequest.price = (+price);\n    /** \n     * Indicates whether the trade request is for a market order (placed at the market's current live price).\n     * @method isMarketOrder\n     * @returns {Boolean} - If true, then a price has not been stated, else a price has been stated.\n     */\n    _tradeRequest.isMarketOrder = function () { return (+_tradeRequest.price || 0) <= 0; };\n    /** \n     * Gets or sets the unique identifier of a trade quote.\n     * @property {String} quoteID\n     */\n    _tradeRequest.quoteID = _options.quoteID;\n    /** \n     * Gets or sets the trade stop order level.\n     * @property {Number} stopOrderLevel\n     */\n    _tradeRequest.stopOrderLevel = (+_options.stopOrderLevel);\n    /** \n     * Gets or sets whether the trade stop order is guaranteed.\n     * @property {Boolean} stopOrderGuaranteedOn\n     */\n    _tradeRequest.stopOrderGuaranteedOn = _options.stopOrderGuaranteedOn;\n    /** \n     * Gets or sets whether the trade stop order is trailing.\n     * @property {Boolean} stopOrderTrailingOn\n     */\n    _tradeRequest.stopOrderTrailingOn = _options.stopOrderTrailingOn;\n    /** \n     * Gets or sets the trade's stop order trailing increment size.\n     * @property {Number} stopOrderTrailingIncrementSize\n     */\n    _tradeRequest.stopOrderTrailingIncrementSize = (+_options.stopOrderTrailingIncrementSize);\n    /** \n     * Gets or sets the trade limit order level.\n     * @property {Number} limitOrderLevel\n     */\n    _tradeRequest.limitOrderLevel = (+_options.limitOrderLevel);\n    /** \n     * Gets or sets whether the trade's stop and/or limit order(s) should send SMS alerts.\n     * @property {Boolean} smsAlertOn\n     */\n    _tradeRequest.smsAlertOn = _helpers.convert.toBoolean(_options.smsAlertOn);\n    /** \n     * Gets or sets whether the trade's stop and/or limit order(s) should send email alerts.\n     * @property {Boolean} emailAlertOn\n     */\n    _tradeRequest.emailAlertOn = _helpers.convert.toBoolean(_options.emailAlertOn);\n    /** \n     * Gets or sets the SMS and/or Email alert message to use if the trade's stop or limit order executes.\n     * @property {String} alertMessage\n     */\n    _tradeRequest.alertMessage = _options.alertMessage;\n\n    /** \n     * Gets or sets the (client generated) unique identifier for a sent trade request.\n     * @property {String} uniqueClientIdentifier\n     */\n    _tradeRequest.uniqueClientIdentifier = _options.uniqueClientIdentifier;\n    /** \n     * Gets or sets the (client generated) transaction timestamp for a sent trade request.\n     * @property {Date} transactionTime\n     */\n    _tradeRequest.transactionTime = _options.transactionTime;\n    //----END-PUBLIC----------\n    \n    \n    return _tradeRequest;\n    //-END-CONSTRUCTOR--------\n\n\n    //----METHODS-------------\n    //----END-METHODS---------\n\n};\n\n//----STATIC--------------\n/** \n * Trade request sides:   \n * `{ BUY: 'b', SELL: 's' }`\n *\n * @enum {String} ETX.clientAPI.requests.TradeRequest.sides\n *\n * @member ETX.clientAPI.requests.TradeRequest\n * @static\n * @readonly\n */\nETX.clientAPI.requests.TradeRequest.sides = {\n    /** \n     * Buy action.\n     * @property {String} BUY\n     */\n    BUY: ETX.clientAPI.Constants.messages.TradeRequest.Side_Buy,\n    /** \n     * Sell action.\n     * @property {String} SELL\n     */\n    SELL: ETX.clientAPI.Constants.messages.TradeRequest.Side_Sell\n};\n//----END-STATIC----------\n</script><script type=\"text/javascript\">            // create the ClientAPI object passing in connection details \n            var api = new ETX.clientAPI.ClientAPI({\n                tryWebSocket: false,\n                webSocketRootURL: \"wss://widget.etxcapital.com:843\", // UAT\n                webAPIRootURL: \"https://widget.etxcapital.com:443/\", // UAT  \n                chartDataURL: 'https://trade.etxcapital.com/common/frontend/member/httpdata/getJSChartWidgetData.aspx'\n            });\n\n            // add listeners to API\n            api.registerForLogOnLogOff(function (api, loggedon, tags) {\n                if (window.console) {\n                    console.log(\"ClientAPI v\" + api.version + \" - loggedOn: \" + loggedon);\n                }\n\n                // once we are logged on subscribe to a single market (EURGBP Rolling Daily)\n                if (loggedon) {\n                    /* var marketList = ['150864', '150852']; */\n                    //tab 1 - POPULAR\n                    api.subscribeToMarkets('150853', onMarketUpdate1); //EURUSD\n                    api.subscribeToMarkets('150852', onMarketUpdate2); //GBPUSD\n                    api.subscribeToMarkets('154229', onMarketUpdate3); //UK100\n                    api.subscribeToMarkets('154228', onMarketUpdate4); //Wall Street\n                    api.subscribeToMarkets('154256', onMarketUpdate5); //Germany 30\n                    api.subscribeToMarkets('377729', onMarketUpdate6); //Brent Crude\n                    //tab 2 - FOREX\n                    api.subscribeToMarkets('150853', onMarketUpdate7); //EURUSD\n                    api.subscribeToMarkets('150852', onMarketUpdate8); //GBPUSD\n                    api.subscribeToMarkets('150854', onMarketUpdate9); //USDJPY\n                    api.subscribeToMarkets('150858', onMarketUpdate10); //AUDUSD\n                    api.subscribeToMarkets('150863', onMarketUpdate11); //EURCHF\n                    api.subscribeToMarkets('150865', onMarketUpdate12); //EURGBP\n                    //tab 3 - INDICES\n                    api.subscribeToMarkets('154229', onMarketUpdate13); //UK100\n                    api.subscribeToMarkets('154228', onMarketUpdate14); //Wall Street\n                    api.subscribeToMarkets('165396', onMarketUpdate15); //SP500\n                    api.subscribeToMarkets('154256', onMarketUpdate16); //Germany 30\n                    api.subscribeToMarkets('174175', onMarketUpdate17); //Japan 225\n                    api.subscribeToMarkets('166837', onMarketUpdate18); //Euro stocks 50\n                    //tab 4 - SHARES\n                    api.subscribeToMarkets('151210', onMarketUpdate19); //Barclays\n                    api.subscribeToMarkets('50639', onMarketUpdate20); //Tesco\n                    api.subscribeToMarkets('50540', onMarketUpdate21); //Lloyds\n                    api.subscribeToMarkets('50759', onMarketUpdate22); //BP plc\n                    api.subscribeToMarkets('151706', onMarketUpdate23); //Apple\n                    api.subscribeToMarkets('264619', onMarketUpdate24); //Facebook\n                    //tab 5 - COMMODITIES\n                    api.subscribeToMarkets('377729', onMarketUpdate25); //Brent Crude\n                    api.subscribeToMarkets('154926', onMarketUpdate26); //Gold\n                    api.subscribeToMarkets('377987', onMarketUpdate27); //US Crude\n                    api.subscribeToMarkets('167206', onMarketUpdate28); //Silver\n                    api.subscribeToMarkets('377888', onMarketUpdate29); //US Coffee\n                    api.subscribeToMarkets('378161', onMarketUpdate30); //US Sugar\n                } else {\n                    $('#market-name1').html(\"Disconnected from ClientAPI\");\n                    $('#bid-price1').html(\"\");\n                    $('#ask-price1').html(\"\");\n                }\n            });\n            api.registerForErrors(function (api, errorMessage, errorData) {\n                if (window.console) {\n                    console.log(\"ClientAPI ERROR: \" + errorMessage);\n                }\n\n                $('#market-name1').html(\"ClientAPI ERROR: \" + errorMessage);\n                $('#bid-price1').html(\"\");\n                $('#ask-price1').html(\"\");\n            });\n\n            // connect to API anonymously (passing in anonymous token string 'widgets')\n            $('#market-name1').html(\"Connecting to ClientAPI...\");\n            api.logOnAnonymously('widgets');\n\n\n            // market update callback handler\n            function onMarketUpdate1(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name1').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price1').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price1').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change1').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor1').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change1').addClass('changeprice-up') : $('#change1').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor1').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price1').removeClass('price-unchanged price-up price-down').addClass('price-up') : $('#bid-price1').removeClass('price-unchanged price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor1').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price1').removeClass('price-unchanged price-up price-down').addClass('price-up') : $('#ask-price1').removeClass('price-unchanged price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate2(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name2').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price2').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price2').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change2').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor2').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change2').addClass('changeprice-up') : $('#change2').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor2').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price2').removeClass('price-up price-down').addClass('price-up') : $('#bid-price2').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor2').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price2').removeClass('price-up price-down').addClass('price-up') : $('#ask-price2').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate3(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                // all market update messages should have a market ID\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name3').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price3').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price3').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change3').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor3').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change3').addClass('changeprice-up') : $('#change3').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction3').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor3').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price3').removeClass('price-up price-down').addClass('price-up') : $('#bid-price3').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor3').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price3').removeClass('price-up price-down').addClass('price-up') : $('#ask-price3').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate4(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name4').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price4').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price4').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change4').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor4').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change4').addClass('changeprice-up') : $('#change4').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction4').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor4').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price4').removeClass('price-up price-down').addClass('price-up') : $('#bid-price4').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor4').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price4').removeClass('price-up price-down').addClass('price-up') : $('#ask-price4').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate5(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name5').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price5').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price5').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change5').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor5').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change5').addClass('changeprice-up') : $('#change5').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction5').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor5').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price5').removeClass('price-up price-down').addClass('price-up') : $('#bid-price5').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor5').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price5').removeClass('price-up price-down').addClass('price-up') : $('#ask-price5').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate6(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name6').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price6').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price6').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change6').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor6').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change6').addClass('changeprice-up') : $('#change6').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction6').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor6').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price6').removeClass('price-up price-down').addClass('price-up') : $('#bid-price6').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor6').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price6').removeClass('price-up price-down').addClass('price-up') : $('#ask-price6').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate7(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name7').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price7').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price7').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change7').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor7').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change7').addClass('changeprice-up') : $('#change7').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction7').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor7').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price7').removeClass('price-up price-down').addClass('price-up') : $('#bid-price7').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor7').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price7').removeClass('price-up price-down').addClass('price-up') : $('#ask-price7').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate8(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name8').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price8').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price8').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change8').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor8').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change8').addClass('changeprice-up') : $('#change8').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction8').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor8').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price8').removeClass('price-up price-down').addClass('price-up') : $('#bid-price8').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor8').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price8').removeClass('price-up price-down').addClass('price-up') : $('#ask-price8').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate9(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name9').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price9').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price9').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change9').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor9').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change9').addClass('changeprice-up') : $('#change9').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction9').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor9').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price9').removeClass('price-up price-down').addClass('price-up') : $('#bid-price9').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor9').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price9').removeClass('price-up price-down').addClass('price-up') : $('#ask-price9').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate10(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name10').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price10').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price10').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change10').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor10').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change10').addClass('changeprice-up') : $('#change10').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction10').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor10').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price10').removeClass('price-up price-down').addClass('price-up') : $('#bid-price10').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor10').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price10').removeClass('price-up price-down').addClass('price-up') : $('#ask-price10').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate11(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name11').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price11').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price11').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change11').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor11').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change11').addClass('changeprice-up') : $('#change11').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction11').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor11').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price11').removeClass('price-up price-down').addClass('price-up') : $('#bid-price11').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor11').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price11').removeClass('price-up price-down').addClass('price-up') : $('#ask-price11').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate12(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name12').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price12').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price12').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change12').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor12').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change12').addClass('changeprice-up') : $('#change12').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction12').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor12').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price12').removeClass('price-up price-down').addClass('price-up') : $('#bid-price12').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor12').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price12').removeClass('price-up price-down').addClass('price-up') : $('#ask-price12').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate13(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name13').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price13').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price13').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change13').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor13').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change13').addClass('changeprice-up') : $('#change13').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction13').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor13').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price13').removeClass('price-up price-down').addClass('price-up') : $('#bid-price13').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor13').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price13').removeClass('price-up price-down').addClass('price-up') : $('#ask-price13').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate14(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name14').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price14').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price14').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change14').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor14').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change14').addClass('changeprice-up') : $('#change14').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction14').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor14').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price14').removeClass('price-up price-down').addClass('price-up') : $('#bid-price14').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor14').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price14').removeClass('price-up price-down').addClass('price-up') : $('#ask-price14').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate15(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name15').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price15').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price15').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change15').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor15').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change15').addClass('changeprice-up') : $('#change15').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction15').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor15').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price15').removeClass('price-up price-down').addClass('price-up') : $('#bid-price15').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor15').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price15').removeClass('price-up price-down').addClass('price-up') : $('#ask-price15').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate16(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name16').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price16').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price16').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change16').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor16').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change16').addClass('changeprice-up') : $('#change16').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction16').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor16').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price16').removeClass('price-up price-down').addClass('price-up') : $('#bid-price16').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor16').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price16').removeClass('price-up price-down').addClass('price-up') : $('#ask-price16').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate17(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name17').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price17').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price17').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change17').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor17').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change17').addClass('changeprice-up') : $('#change17').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction17').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor17').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price17').removeClass('price-up price-down').addClass('price-up') : $('#bid-price17').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor17').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price17').removeClass('price-up price-down').addClass('price-up') : $('#ask-price17').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate18(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name18').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price18').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price18').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change18').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor18').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change18').addClass('changeprice-up') : $('#change18').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction18').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor18').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price18').removeClass('price-up price-down').addClass('price-up') : $('#bid-price18').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor18').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price18').removeClass('price-up price-down').addClass('price-up') : $('#ask-price18').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate19(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name19').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price19').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price19').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change19').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor19').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change19').addClass('changeprice-up') : $('#change19').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction19').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor19').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price19').removeClass('price-up price-down').addClass('price-up') : $('#bid-price19').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor19').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price19').removeClass('price-up price-down').addClass('price-up') : $('#ask-price19').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate20(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name20').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price20').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price20').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change20').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor20').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change20').addClass('changeprice-up') : $('#change20').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction20').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor20').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price20').removeClass('price-up price-down').addClass('price-up') : $('#bid-price20').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor20').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price20').removeClass('price-up price-down').addClass('price-up') : $('#ask-price20').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate21(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name21').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price21').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price21').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change21').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor21').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change21').addClass('changeprice-up') : $('#change21').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction21').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor21').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price21').removeClass('price-up price-down').addClass('price-up') : $('#bid-price21').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor21').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price21').removeClass('price-up price-down').addClass('price-up') : $('#ask-price21').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate22(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name22').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price22').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price22').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change22').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor22').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change22').addClass('changeprice-up') : $('#change22').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction22').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor22').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price22').removeClass('price-up price-down').addClass('price-up') : $('#bid-price22').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor22').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price22').removeClass('price-up price-down').addClass('price-up') : $('#ask-price22').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate23(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name23').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price23').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price23').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change23').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor23').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change23').addClass('changeprice-up') : $('#change23').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction23').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor23').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price23').removeClass('price-up price-down').addClass('price-up') : $('#bid-price23').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor23').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price23').removeClass('price-up price-down').addClass('price-up') : $('#ask-price23').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate24(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name24').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price24').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price24').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change24').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor24').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change24').addClass('changeprice-up') : $('#change24').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction24').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor24').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price24').removeClass('price-up price-down').addClass('price-up') : $('#bid-price24').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor24').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price24').removeClass('price-up price-down').addClass('price-up') : $('#ask-price24').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate25(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name25').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price25').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price25').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change25').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor25').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change25').addClass('changeprice-up') : $('#change25').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction25').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor25').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price25').removeClass('price-up price-down').addClass('price-up') : $('#bid-price25').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor25').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price25').removeClass('price-up price-down').addClass('price-up') : $('#ask-price25').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate26(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name26').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price26').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price26').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change26').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor26').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change26').addClass('changeprice-up') : $('#change26').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction26').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor26').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price26').removeClass('price-up price-down').addClass('price-up') : $('#bid-price26').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor26').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price26').removeClass('price-up price-down').addClass('price-up') : $('#ask-price26').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate27(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name27').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price27').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price27').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change27').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor27').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change27').addClass('changeprice-up') : $('#change27').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction27').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor27').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price27').removeClass('price-up price-down').addClass('price-up') : $('#bid-price27').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor27').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price27').removeClass('price-up price-down').addClass('price-up') : $('#ask-price27').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate28(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name28').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price28').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price28').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change28').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor28').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change28').addClass('changeprice-up') : $('#change28').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction28').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor28').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price28').removeClass('price-up price-down').addClass('price-up') : $('#bid-price28').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor28').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price28').removeClass('price-up price-down').addClass('price-up') : $('#ask-price28').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate29(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name29').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price29').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price29').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change29').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor29').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change29').addClass('changeprice-up') : $('#change29').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction29').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor29').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price29').removeClass('price-up price-down').addClass('price-up') : $('#bid-price29').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor29').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price29').removeClass('price-up price-down').addClass('price-up') : $('#ask-price29').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n\n            function onMarketUpdate30(api, marketUpdate) {\n                var mc = ETX.clientAPI.Constants.messages.Market;\n                var id = marketUpdate[mc.MarketID];\n                if (id) {\n                    if (marketUpdate.hasOwnProperty(mc.MarketName)) { $('#market-name30').html(marketUpdate[mc.MarketName]); }\n                    if (marketUpdate.hasOwnProperty(mc.Bid)) { $('#bid-price30').html(parseFloat(marketUpdate[mc.Bid])); }\n                    if (marketUpdate.hasOwnProperty(mc.Ask)) { $('#ask-price30').html(parseFloat(marketUpdate[mc.Ask])); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#change30').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2) + '%'); }\n                    if (marketUpdate.hasOwnProperty(mc.ChangeOnDay)) { $('#changecolor30').html(parseFloat(((marketUpdate[mc.Bid] - marketUpdate[mc.ClosingPrice]) / marketUpdate[mc.ClosingPrice]) * 100).toFixed(2).toString() > \"0\" ? $('#change30').addClass('changeprice-up') : $('#change30').addClass('changeprice-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#direction30').html(marketUpdate[mc.Direction].toString() === \"1\" ? \"price-up\" : \"price-down\"); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#bidpricecolor30').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#bid-price30').removeClass('price-up price-down').addClass('price-up') : $('#bid-price30').removeClass('price-up price-down').addClass('price-down')); }\n                    if (marketUpdate.hasOwnProperty(mc.Direction)) { $('#askpricecolor30').html(marketUpdate[mc.Direction].toString() === \"1\" ? $('#ask-price30').removeClass('price-up price-down').addClass('price-up') : $('#ask-price30').removeClass('price-up price-down').addClass('price-down')); }\n                }\n            };\n</script>\n\n\n            </nav>\n            <header class=\"s-head forex-head\">\n                \n<span id=\"marketHeaderPlaceholder_TA1D12251064\">\n\n<nav class=\"wsdownmenu clearfix\">\n    <div class=\"visible-smartphone\" style=\"float: right; margin: -25px 70px 0 0; position: relative; z-index: 999; font-size: 18px;\"><a href=\"https://www.etxcapital.co.uk/account/sign-in\" target=\"_self\">LOGIN</a></div>\n\t<ul class=\"wsdown-mobile wsdownmenu-list\">\n\t\t\n\t\t        <li>\n                    <a href=\"https://www.etxcapital.co.uk/about-us/why-etx-capital\" id=\"marketHeaderPlaceholder_TA1D12251064_ctl00_ctl00_repMaster_A1_0\">\n                        <span class=\"visible-smartphone\">&nbsp;&nbsp;</span>Why ETX? \n                    </a>\n\n                </li>\n\t\t    \n\t\t        <li>\n                    <a href=\"https://www.etxcapital.co.uk/about-us/platforms\" id=\"marketHeaderPlaceholder_TA1D12251064_ctl00_ctl00_repMaster_A1_1\">\n                        <span class=\"visible-smartphone\">&nbsp;&nbsp;</span>Platforms \n                    </a>\n\n                </li>\n\t\t    \n\t\t        <li>\n                    <a href=\"https://www.etxcapital.co.uk/spread-betting\" id=\"marketHeaderPlaceholder_TA1D12251064_ctl00_ctl00_repMaster_A1_2\">\n                        <span class=\"visible-smartphone\">&nbsp;&nbsp;</span>Spread Betting \n                    </a>\n\n                </li>\n\t\t    \n\t\t        <li>\n                    <a href=\"https://www.etxcapital.co.uk/cfd-trading\" id=\"marketHeaderPlaceholder_TA1D12251064_ctl00_ctl00_repMaster_A1_3\">\n                        <span class=\"visible-smartphone\">&nbsp;&nbsp;</span>CFD \n                    </a>\n\n                </li>\n\t\t    \n\t\t        <li>\n                    <a href=\"https://www.etxcapital.co.uk/forex-trading\" id=\"marketHeaderPlaceholder_TA1D12251064_ctl00_ctl00_repMaster_A1_4\">\n                        <span class=\"visible-smartphone\">&nbsp;&nbsp;</span>Forex \n                    </a>\n\n                </li>\n\t\t    \n\t\t        <li>\n                    <a href=\"https://www.etxcapital.co.uk/indices-trading\" id=\"marketHeaderPlaceholder_TA1D12251064_ctl00_ctl00_repMaster_A1_5\">\n                        <span class=\"visible-smartphone\">&nbsp;&nbsp;</span>Indices \n                    </a>\n\n                </li>\n\t\t    \n\t\t        <li>\n                    <a href=\"https://www.etxcapital.co.uk/equities-trading\" id=\"marketHeaderPlaceholder_TA1D12251064_ctl00_ctl00_repMaster_A1_6\">\n                        <span class=\"visible-smartphone\">&nbsp;&nbsp;</span>Equities \n                    </a>\n\n                </li>\n\t\t    \n\t\t        <li>\n                    <a href=\"https://www.etxcapital.co.uk/commodities-trading\" id=\"marketHeaderPlaceholder_TA1D12251064_ctl00_ctl00_repMaster_A1_7\">\n                        <span class=\"visible-smartphone\">&nbsp;&nbsp;</span>Commodities \n                    </a>\n\n                </li>\n\t\t    \n\t\t        <li>\n                    <a href=\"https://www.etxcapital.co.uk/binary-options\" id=\"marketHeaderPlaceholder_TA1D12251064_ctl00_ctl00_repMaster_A1_8\">\n                        <span class=\"visible-smartphone\">&nbsp;&nbsp;</span>Binary \n                    </a>\n\n                </li>\n\t\t    \n\t\t        <li class=\"hidden-tablet\">\n                    <a href=\"https://www.etxcapital.co.uk/about-us/education\" id=\"marketHeaderPlaceholder_TA1D12251064_ctl00_ctl00_repMaster_A1_9\">\n                        <span class=\"visible-smartphone\">&nbsp;&nbsp;</span>Education \n                    </a>\n\n                </li>\n\t\t    \n\t</ul>\n<a class=\"wsdownmenu-animated-arrow\"><span></span></a><div class=\"wsdownmenu-text\"><a class=\"megamenu-brand\" href=\"https://www.etxcapital.co.uk\" target=\"_self\"><img style=\"width:191px; height:auto;\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/logo_mob@2x.png?sfvrsn=4\" alt=\"ETX Capital logo\" title=\"ETX Capital logo\"></a></div></nav>\n\n<script type=\"text/javascript\">\n    var lists = $('nav.wsdownmenu > ul.wsdown-mobile.wsdownmenu-list > li');\n    lists.each(function (index) {\n        if (lists.length > 8) {\n            if (index == 8) {\n                $(this).addClass(\"\");\n            } else if (index == 9) {\n                $(this).addClass(\"hidden-tablet\");\n            }\n        }\n    });\n</script></span><div class=\"sf_cols \">\n     <div style=\"width: 100%;\" class=\"sf_colsOut sf_1col_1_100 inner\">\n         <div id=\"marketHeaderPlaceholder_TA1D12251019_Col00\" style=\"margin: 0px;\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sf_cols\">\n    <div style=\"\" class=\"sf_colsOut sf_1col_1_100 clearfix signupheader\">\n        <div id=\"marketHeaderPlaceholder_T3ADE93C3010_Col00\" style=\"margin: 0px 0px 40px;\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sf_cols\">\n     <div style=\"\" class=\"sf_colsOut sf_1col_1_100 inner\">\n         <div id=\"marketHeaderPlaceholder_T3ADE93C3017_Col00\" style=\"margin: 0px 0px 60px;\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sf_cols\">\n    <div class=\"sf_colsOut sf_1col_1_100\">\n        <div id=\"marketHeaderPlaceholder_T3ADE93C3019_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sfContentBlock\"><div style=\"margin: 140px 0 0;\npadding: 20px;\nwidth: 940px;\ntext-align: center;\" class=\"visible-desktop\">\n<h1 style=\"color: rgb(255, 255, 255);\nfont-size: 41px;\nfont-weight: bold;\ntext-transform: uppercase;\nline-height: 44px;\">Your Trusted Online Trading Provider</h1>\n<h2 style=\"color: #baa96f;\nfont-size: 36px;\nfont-weight: bold;\nline-height: 46px;\">Sign Up &amp; Trade Now</h2>\n<br>\n<p style=\"color:#FFFFFF; font-size:18px;\">\nJoin one of the UK’s top spread betting providers to start trading on Forex, CFD stocks,<br>\ncommodities, indices, binary options and more. Tight spreads, low margins and fast execution.\n</p>\n<br>\n<div class=\"btn-wrapper\" style=\"text-align: center;\nmargin: 0 auto;\nwidth: 255px;\">\n<a href=\"/account/sign-up/?v=3&amp;Platform=TraderPro\" class=\"btn btn-std lgstarttrading\">\n<span><strong style=\"font-size: 20px;\">OPEN LIVE ACCOUNT</strong></span>\n</a>\n</div>\n<!--<div class=\"btn-wrapper\" style=\"text-align:center;margin-left:20px;\">&nbsp;&nbsp;&nbsp;\n<a class=\"btn btn-stdempty lgfindoutmore\" title=\"Find out more\" style=\"margin-right: 90px;\" href=\"http://www.uat.etxcapital.co.uk/home\" sfref=\"[f669d9a7-009d-4d83-ddaa-000000000002]3a11f827-68d0-68c1-9ecd-ff0000969874\"><span style=\"font-size: 20px; color: rgb(186, 169, 111);\"><strong>FIND OUT MORE</strong></span></a>\n</div>-->\n<br>\n<br>\n<p style=\"color: #ffffff;\nfont-size: 12px;\nmargin: 0 auto;\nwidth: 255px;\nline-height: 40px;\">or <strong><a href=\"https://www.etxcapital.co.uk/account/sign-in\"><strong>LOGIN</strong></a></strong> as existing customer</p>\n</div>\n<div style=\"margin: 120px 0 50px;\npadding: 20px 20px 70px;\ntext-align: center;\nwidth: 710px;\" class=\"visible-tablet\">\n<h1 style=\"color: rgb(255, 255, 255);\nfont-size: 44px;\nfont-weight: bold;\ntext-transform: uppercase;\nline-height: 44px;\">Your Trusted Online Trading Provider</h1>\n<h2 style=\"color: #baa96f;\nfont-size: 33px;\nfont-weight: bold;\nline-height: 56px;\">Sign Up &amp; Trade Now</h2>\n<br>\n<p style=\"color:#FFFFFF; font-size:20px;\">\nJoin one of the UK’s top spread betting providers to start trading on Forex, CFD stocks, commodities, indices, binary options and more. Tight spreads, low margins and fast execution.\n</p>\n<br>\n<div class=\"btn-wrapper\" style=\"text-align:left;\">\n<a href=\"/account/sign-up/?v=3&amp;Platform=TraderPro\" class=\"btn btn-std lgstarttrading\" style=\"font-size: 18px;\nmargin-left: 195px;\npadding: 12px 42px;\">\n<span style=\"color: white;\"><strong>OPEN LIVE ACCOUNT</strong></span>\n</a>\n</div>\n<!--<div class=\"btn-wrapper\" style=\"text-align:center;margin-left:20px;\">&nbsp;&nbsp;&nbsp;\n<a class=\"btn btn-stdempty lgfindoutmore\" title=\"Find out more\" style=\"font-size: 18px;\nmargin-right: 120px;\npadding: 10px 32px;\" href=\"http://www.uat.etxcapital.co.uk/home\" sfref=\"[f669d9a7-009d-4d83-ddaa-000000000002]3a11f827-68d0-68c1-9ecd-ff0000969874\"><span style=\"color: rgb(186, 169, 111);\"><strong>FIND OUT MORE</strong></span></a>\n</div>-->\n</div>\n<div style=\"margin-bottom: 0;\nmargin-left: -20px;\nmargin-top: 70px;\npadding: 10px 20px 60px 10px;\ntext-align: center;\nwidth: 320px;\" class=\"visible-smartphone\">\n<h1 style=\"color: rgb(255, 255, 255);\nfont-size: 32px;\nfont-weight: bold;\ntext-transform: uppercase;\">Your Trusted Online Trading Provider</h1>\n<h2 style=\"color: #baa96f;\nfont-size: 27px;\nfont-weight: bold;\nline-height: 46px;\">Sign Up &amp; Trade Now</h2>\n<br>\n<p style=\"color:#FFFFFF; font-size:18px;\">\nTight Spreads, Low Fees<br>\nOne-touch Trading, Price Alerts\n</p>\n<br>\n<div class=\"btn-wrapper\" style=\"text-align:left;\">\n<a href=\"/account/sign-up/?v=3&amp;Platform=TraderPro\" class=\"btn btn-std lgstarttrading\" style=\"font-size: 18px;\nmargin-left: 45px;\npadding: 12px;\">\n<span style=\"color: white;\"><strong>OPEN LIVE ACCOUNT</strong></span>\n</a>\n</div>\n</div>\n\n\n</div>\n            \n        </div>\n    </div>\n</div>\n         </div>\n     </div>\n </div>\n            \n        </div>\n    </div>\n</div>\n         </div>\n     </div>\n </div>\n            </header>\n            <main>\n                    \n<div class=\"sf_cols home\">\n    <div class=\"sf_colsOut sf_1col_1_100\">\n        <div id=\"mainBodyPlaceholder_T3ADE93C3001_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sf_cols s-platforms visible-smartphone\">\n    <div style=\"width: 100%;\" class=\"sf_colsOut sf_1col_1_100 s-sec s-aside-media clearfix\">\n        <div id=\"mainBodyPlaceholder_C299_Col00\" class=\"sf_colsIn sf_1col_1in_100\">\n\n<div class=\"sf_cols\">\n     <div class=\"sf_colsOut sf_1col_1_100 inner\">\n         <div id=\"mainBodyPlaceholder_C300_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sf_cols\">\n    <div style=\"width: 100%;\" class=\"sf_colsOut sf_1col_1_100 mobile-sec open\">\n        <div id=\"mainBodyPlaceholder_C301_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sfContentBlock\"><h1 class=\"mobile-title visible-smartphone\" style=\"text-align: left;\npadding-left: 0px; text-transform:uppercase; color:#FFFFFF;\">OUR PLATFORMS</h1>\n\n\n</div><div style=\"\" class=\"sf_cols mobile-expand\">\n    <div style=\"\" class=\"sf_colsOut sf_1col_1_100\">\n        <div id=\"mainBodyPlaceholder_C302_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sf_cols grid\">\n     <div style=\"\" class=\"sf_colsOut sf_2cols_1_25 col-6 col-md-5\">\n         <div id=\"mainBodyPlaceholder_C304_Col00\" class=\"sf_colsIn sf_2col_1in_25\">\n         </div>\n     </div>\n    \n     <div style=\"\" class=\"sf_colsOut sf_2cols_2_75 col-6 col-md-4\">\n         <div id=\"mainBodyPlaceholder_C304_Col01\" class=\"sf_colsIn sf_2col_2in_75\"><div class=\"sfContentBlock\"><h1 class=\"visible-desktop\" style=\"color: #ffffff;\nfont-weight: bold;\nmargin-left: -80px;\nwhite-space: nowrap;\nmargin-bottom: 10px;\">OUR PLATFORMS</h1>\n<h1 class=\"visible-tablet\" style=\"color: #ffffff;\nfont-weight: bold;\nmargin-left: -80px;\nwhite-space: nowrap;\nmargin-bottom: 10px;\">OUR PLATFORMS</h1>\n\n\n</div>\n         </div>\n     </div>\n </div><div class=\"sfContentBlock\"><ul>\n    <li class=\"current\">\n    <a>\n    <div class=\"visible-desktop\" style=\"color: rgb(186, 169, 111); position: relative;\n    z-index: 2; font-size: 22px; font-weight:normal;\">TraderPro</div>\n    </a>\n    <a>\n    <div class=\"visible-tablet\" style=\"color: rgb(186, 169, 111); position: relative;\n    z-index: 2; font-size: 18px; font-weight:normal;\">TraderPro</div>\n    </a>\n    <a>\n    <div class=\"visible-smartphone\" style=\"color: rgb(186, 169, 111); position: relative;\n    z-index: 2; font-size: 14px; font-weight:normal;\">TraderPro</div>\n    </a>\n    </li>\n    <li>\n    <a>\n    <div class=\"visible-desktop\" style=\"color: rgb(186, 169, 111); position: relative;\n    z-index: 2; font-size: 22px; font-weight:normal;\">MT4</div>\n    </a>\n    <a>\n    <div class=\"visible-tablet\" style=\"color: rgb(186, 169, 111); position: relative;\n    z-index: 2; font-size: 18px; font-weight:normal;\">MT4</div>\n    </a>\n    <a>\n    <div class=\"visible-smartphone\" style=\"color: rgb(186, 169, 111); position: relative;\n    z-index: 2; font-size: 14px; font-weight:normal;\">MT4</div>\n    </a>\n    </li>\n    <li>\n    <a>\n    <div class=\"visible-desktop\" style=\"color: rgb(186, 169, 111); position: relative;\n    z-index: 2; font-size: 22px; font-weight:normal;\">Binary</div>\n    </a>\n    <a>\n    <div class=\"visible-tablet\" style=\"color: rgb(186, 169, 111); position: relative;\n    z-index: 2; font-size: 18px; font-weight:normal;\">Binary</div>\n    </a>\n    <a>\n    <div class=\"visible-smartphone\" style=\"color: rgb(186, 169, 111); position: relative;\n    z-index: 2; font-size: 14px; font-weight:normal;\">Binary</div>\n    </a>\n    </li>\n</ul>\n<div class=\"sp-contents\">\n<div class=\"sp-content\">\n<div class=\"grid\">\n<div class=\"visible-desktop col-5 col-md-4\">\n<img title=\"ETX TraderPro platform\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/platforms-des_traderpro.png?sfvrsn=4\" alt=\"ETX TraderPro platform\" style=\"width:auto; height:auto; margin-top: -70px;\">\n</div>\n<div class=\"visible-tablet col-5 col-md-4\">\n<img title=\"platforms-tablet_traderpro\" alt=\"platforms-tablet_traderpro\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/platforms-tablet_traderpro.png?sfvrsn=2\" style=\"width:auto; height:auto;\">\n</div>\n<div class=\"visible-smartphone col-5 col-md-4\">\n<img title=\"platforms-mob_traderpro\" alt=\"platforms-mob_traderpro\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/platforms-mob_traderpro.png?sfvrsn=2\" style=\"width:auto; height:auto;\">\n</div>\n<!-- / col-5 -->\n<div class=\"col-7 col-md-5\">\n<p style=\"font-size:14px; color:#FFFFFF;\">Powerful charting tools, thousands of markets to trade on and fast execution – all on our intuitive flagship trading platform that’s been designed by traders, for traders.</p>\n<p style=\"font-size:14px; color:#FFFFFF;\"><img style=\"float: left;\" title=\"tick-gold\" alt=\"tick-gold\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/tick-gold.png?sfvrsn=4\">&nbsp;&nbsp;Tight spreads &amp; low margins\n<br>\n<img style=\"float: left;\" title=\"tick-gold\" alt=\"tick-gold\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/tick-gold.png?sfvrsn=4\">&nbsp;&nbsp;Over 5,000 markets to trade on – forex, stocks, indices, commodities\n<br>\n<img style=\"float: left;\" title=\"tick-gold\" alt=\"tick-gold\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/tick-gold.png?sfvrsn=4\">&nbsp;&nbsp;Fully customisable charts and technical drawing tools</p>\n<div class=\"btn-wrapper\" style=\"text-align:left;\">\n<a href=\"/account/sign-up/?v=3&amp;Platform=TraderPro\" class=\"btn btn-std lg\" style=\"font-size: 18px;\npadding: 12px 30px;\">\n<span style=\"color: white;\"><strong>OPEN LIVE ACCOUNT</strong></span>\n</a>\n</div>\n<!--<p style=\"font-size:14px; color:#FFFFFF;\" class=\"underlinelinks\">or <strong><a href=\"https://www.uat.etxcapital.co.uk/account/sign-in\" style=\"color:#FFFFFF;\" sfref=\"[f669d9a7-009d-4d83-ddaa-000000000002]168cfa27-68d0-68c1-9ecd-ff0000969874\"><strong>LOGIN</strong></a></strong> as existing customer</p>-->\n</div>\n<!-- / col-7 -->\n</div>\n<!-- / grid -->\n</div>\n<!-- / sp-content -->\n<div class=\"sp-content\">\n<div class=\"grid\">\n<div class=\"visible-desktop col-5 col-md-4\">\n<img title=\"ETX MT4 platform\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/platforms-des_mt4.png?sfvrsn=4\" alt=\"ETX MT4 platform\" style=\"width:auto; height:auto; margin-top: -70px;\">\n</div>\n<div class=\"visible-tablet col-5 col-md-4\">\n<img title=\"platforms-tablet_mt4\" alt=\"platforms-tablet_mt4\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/platforms-tablet_mt4.png?sfvrsn=4\" style=\"width:auto; height:auto;\">\n</div>\n<div class=\"visible-smartphone col-5 col-md-4\">\n<img title=\"platforms-mob_mt4\" alt=\"platforms-mob_mt4\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/platforms-mob_mt4.png?sfvrsn=4\" style=\"width:auto; height:auto;\">\n</div>\n<!-- / col-5 -->\n<div class=\"col-7 col-md-5\">\n<p style=\"font-size:14px; color:#FFFFFF;\">Experience trading on the respected MT4 platform from ETX. Expert Advisors, Trading Central reports, advanced technical tools, multiple charts, one-click ordering and hedging tools.</p>\n<p style=\"font-size:14px; color:#FFFFFF;\"><img style=\"float: left;\" title=\"tick-gold\" alt=\"tick-gold\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/tick-gold.png?sfvrsn=4\">&nbsp;&nbsp;Automate your trading with Expert Advisors\n<br>\n<img style=\"float: left;\" title=\"tick-gold\" alt=\"tick-gold\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/tick-gold.png?sfvrsn=4\">&nbsp;&nbsp;Hedging tools, micro-lots and multiple chart capability\n<br>\n<img style=\"float: left;\" title=\"tick-gold\" alt=\"tick-gold\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/tick-gold.png?sfvrsn=4\">&nbsp;&nbsp;Free News sentiment widget</p>\n<div class=\"btn-wrapper\" style=\"text-align:left;\">\n<a href=\"/account/sign-up/?v=3&amp;Platform=MT4-SpreadBet\" class=\"btn btn-std lg btnmt4\" style=\"font-size: 18px;\npadding: 12px 30px;\">\n<span style=\"color: white;\"><strong>OPEN LIVE ACCOUNT</strong></span>\n</a>\n</div>\n<!--<p style=\"font-size:14px; color:#FFFFFF;\" class=\"underlinelinks\">or <strong><a href=\"https://www.uat.etxcapital.co.uk/account/sign-in\" style=\"color:#FFFFFF;\" sfref=\"[f669d9a7-009d-4d83-ddaa-000000000002]168cfa27-68d0-68c1-9ecd-ff0000969874\"><strong>LOGIN</strong></a></strong> as existing customer</p>-->\n</div>\n<!-- / col-7 -->\n</div>\n<!-- / grid -->\n</div>\n<!-- / sp-content -->\n<div class=\"sp-content\">\n<div class=\"grid\">\n<div class=\"visible-desktop col-5 col-md-4\">\n<img title=\"ETX Binary platform\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/platforms-des_binary.png?sfvrsn=4\" alt=\"ETX Binary platform\" style=\"width:auto; height:auto; margin-top: -70px;\">\n</div>\n<div class=\"visible-tablet col-5 col-md-4\">\n<img title=\"platforms-tablet_binary\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/platforms-tablet_binary.png?sfvrsn=2\" alt=\"platforms-tablet_binary\" style=\"width:auto; height:auto;\">\n</div>\n<div class=\"visible-smartphone col-5 col-md-4\">\n<img title=\"platforms-mob_binary\" alt=\"platforms-mob_binary\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/platforms-mob_binary.png?sfvrsn=2\" style=\"width:auto; height:auto;\">\n</div>\n<!-- / col-5 -->\n<div class=\"col-7 col-md-5\">\n<p style=\"font-size:14px; color:#FFFFFF;\">Experience fast-paced trading with Binary Options, an exciting trading platform from ETX. Trade on dozens of binary options markets across forex, stocks, indices and commodities.</p>\n<p style=\"font-size:14px; color:#FFFFFF;\"><img style=\"float: left;\" title=\"tick-gold\" alt=\"tick-gold\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/tick-gold.png?sfvrsn=4\">&nbsp;&nbsp;Fixed payouts\n<br>\n<img style=\"float: left;\" title=\"tick-gold\" alt=\"tick-gold\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/tick-gold.png?sfvrsn=4\">&nbsp;&nbsp;Zero leverage\n<br>\n<img style=\"float: left;\" title=\"tick-gold\" alt=\"tick-gold\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/tick-gold.png?sfvrsn=4\">&nbsp;&nbsp;Trade in 60 seconds</p>\n<div class=\"btn-wrapper\" style=\"text-align:left;\">\n<a href=\"/account/sign-up/?v=3&amp;Platform=MarketsPulse\" class=\"btn btn-std lg btnbinary\" style=\"font-size: 18px;\npadding: 12px 30px;\">\n<span style=\"color: white;\"><strong>OPEN LIVE ACCOUNT</strong></span>\n</a>\n</div>\n<!--<p style=\"font-size:14px; color:#FFFFFF;\" class=\"underlinelinks\">or <strong><a href=\"https://www.uat.etxcapital.co.uk/account/sign-in\" style=\"color:#FFFFFF;\" sfref=\"[f669d9a7-009d-4d83-ddaa-000000000002]168cfa27-68d0-68c1-9ecd-ff0000969874\"><strong>LOGIN</strong></a></strong> as existing customer</p>-->\n</div>\n<!-- / col-7 -->\n</div>\n<!-- / grid -->\n</div>\n<!-- / sp-content -->\n</div>\n<!-- / sp-contents -->\n\n\n</div>\n            \n        </div>\n    </div>\n</div>\n            \n        </div>\n    </div>\n</div>\n         </div>\n     </div>\n </div>\n            \n        </div>\n    </div>\n</div><div class=\"sf_cols \">\n    <div style=\"width: 100%;\" class=\"sf_colsOut sf_1col_1_100 s-spreads-and-price s-secnew clearfix\">\n        <div id=\"mainBodyPlaceholder_C152_Col00\" class=\"sf_colsIn sf_1col_1in_100\">\n\n<div class=\"sf_cols\">\n     <div class=\"sf_colsOut sf_1col_1_100 inner\">\n         <div id=\"mainBodyPlaceholder_C153_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sf_cols hidden-smartphone\">\n    <div style=\"width: 100%;\" class=\"sf_colsOut sf_1col_1_100 mobile-sec\">\n        <div id=\"mainBodyPlaceholder_C154_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sfContentBlock\"><h1 class=\"mobile-title visible-smartphone\" style=\"text-align: left;\npadding-left: 0px; text-transform:uppercase;\">ETX Features</h1>\n\n\n</div><div class=\"sf_cols mobile-expand visible-smartphone\">\n    <div style=\"\" class=\"sf_colsOut sf_1col_1_100\">\n        <div id=\"mainBodyPlaceholder_C156_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sf_cols grid\">\n     <div style=\"\" class=\"sf_colsOut sf_3cols_1_33 col-4newmobile col-md-3 brexit clickable\">\n         <div id=\"mainBodyPlaceholder_C178_Col00\" style=\"margin: 30px 0px 0px;\" class=\"sf_colsIn sf_3cols_1in_33\"><div class=\"sfContentBlock\"><a style=\"color:#ffffff;\" href=\"/account/demo-sign-up?v=1&amp;Platform=TraderPro\">\n<h1 style=\"font-size: 21px;\nfont-weight: bold;\nline-height: 0;\nmargin: 30px 0 -2px 20px;\">DEMO</h1>\n<img src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/homepage/ad_hoc_promotions/icons/demo.png?sfvrsn=2\" alt=\"Sign up for a demo account\" title=\"Sign up for a demo account\" style=\"float: right; width:38px; height:56px; margin-right: 20px;\">\n<br>\n<p style=\"margin-left: 20px; line-height: 20px; font-size:16px;\">\nSign up for a <br>\nDemo Account »</p>\n</a>\n\n\n</div>\n         </div>\n     </div>\n    \n     <div style=\"\" class=\"sf_colsOut sf_3cols_1_33 col-4newmobile col-md-3 education clickable\">\n         <div id=\"mainBodyPlaceholder_C178_Col01\" style=\"margin: 30px 0px 0px;\" class=\"sf_colsIn sf_3cols_2in_34\"><div class=\"sfContentBlock\"><a style=\"color:#FFFFFF;\" href=\"https://www.etxcapital.co.uk/about-us/education\">\n<h1 style=\"font-size: 21px;\nfont-weight: bold;\nline-height: 0;\nmargin: 30px 0 -2px 20px;\">EDUCATION</h1>\n<img src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/homepage/ad_hoc_promotions/icons/education.png?sfvrsn=2\" alt=\"Education\" title=\"Education\" style=\"float: right; width:34px; height:34px; margin-right: 20px;\">\n<br>\n<p style=\"margin-left: 20px; line-height: 20px; color: rgb(255, 255, 255); font-size:16px;\">Check out our FREE <br>\nSeminars &amp; Webinars here »</p>\n</a>\n\n\n</div>\n         </div>\n     </div>\n\n    <div style=\"\" class=\"sf_colsOut sf_3cols_1_33 col-4newmobile col-md-3 discover_etx clickable\">\n         <div id=\"mainBodyPlaceholder_C178_Col02\" style=\"margin: 40px 0px 0px;\" class=\"sf_colsIn sf_3cols_3in_33\"><div class=\"sfContentBlock\"><a class=\"popup-vimeo\" href=\"https://vimeo.com/161598421\" style=\"color:#FFFFFF;\">\n<h1 style=\"font-size: 21px;\nfont-weight: bold;\nline-height: 0;\nmargin: 40px 0 -2px 20px;\">DISCOVER ETX</h1>\n<img src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/homepage/ad_hoc_promotions/icons/discover_etx.png?sfvrsn=4\" alt=\"Discover ETX Capital\" title=\"Discover ETX Capital\" style=\"float: right; width:34px; height:34px; margin-right: 20px;\">\n<br>\n<p style=\"margin-left: 20px; line-height: 20px; font-size:16px;\">\nWatch the video »</p>\n</a>\n\n\n</div>\n         </div>\n     </div>\n </div>\n            \n        </div>\n    </div>\n</div>\n            \n        </div>\n    </div>\n</div><div class=\"sf_cols visible-desktop\">\n    <div style=\"\" class=\"sf_colsOut sf_1col_1_100\">\n        <div id=\"mainBodyPlaceholder_C161_Col00\" style=\"margin: 20px 0px 0px;\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sf_cols grid\">\n     <div style=\"\" class=\"sf_colsOut sf_3cols_1_33 col-4newdesktop col-md-3 brexit clickable\">\n         <div id=\"mainBodyPlaceholder_C177_Col00\" style=\"margin: 30px 0px 0px;\" class=\"sf_colsIn sf_3cols_1in_33\"><div class=\"sfContentBlock\"><a style=\"color:#ffffff;\" href=\"/account/demo-sign-up?v=1&amp;Platform=TraderPro\">\n<h1 style=\"font-size: 21px;\nfont-weight: bold;\nline-height: 0;\nmargin: 30px 0 -2px 20px;\">DEMO</h1>\n<img src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/homepage/ad_hoc_promotions/icons/demo.png?sfvrsn=2\" alt=\"Sign up for a demo account\" title=\"Sign up for a demo account\" style=\"float: right; width:38px; height:56px; margin-right: 20px;\">\n<br>\n<p style=\"margin-left: 20px; line-height: 20px; font-size:16px;\">\nSign up for a <br>\nDemo Account »</p>\n</a>\n\n\n</div>\n         </div>\n     </div>\n    \n     <div style=\"\" class=\"sf_colsOut sf_3cols_1_33 col-4newdesktop col-md-3 education clickable\">\n         <div id=\"mainBodyPlaceholder_C177_Col01\" style=\"margin: 30px 0px 0px;\" class=\"sf_colsIn sf_3cols_2in_34\"><div class=\"sfContentBlock\"><a style=\"color:#FFFFFF;\" href=\"https://www.etxcapital.co.uk/about-us/education\">\n<h1 style=\"font-size: 21px;\nfont-weight: bold;\nline-height: 0;\nmargin: 30px 0 -2px 20px;\">EDUCATION</h1>\n<img src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/homepage/ad_hoc_promotions/icons/education.png?sfvrsn=2\" alt=\"Education\" title=\"Education\" style=\"float: right; width:34px; height:34px; margin-right: 20px;\">\n<br>\n<p style=\"margin-left: 20px; line-height: 20px; color: rgb(255, 255, 255); font-size:16px;\">Check out our FREE <br>\nSeminars &amp; Webinars here »</p>\n</a>\n\n\n</div>\n         </div>\n     </div>\n\n    <div style=\"\" class=\"sf_colsOut sf_3cols_1_33 col-4newdesktop col-md-3 discover_etx clickable\">\n         <div id=\"mainBodyPlaceholder_C177_Col02\" style=\"margin: 40px 0px 0px;\" class=\"sf_colsIn sf_3cols_3in_33\"><div class=\"sfContentBlock\"><a class=\"popup-vimeo\" href=\"https://vimeo.com/161598421\" style=\"color:#FFFFFF;\">\n<h1 style=\"font-size: 21px;\nfont-weight: bold;\nline-height: 0;\nmargin: 40px 0 -2px 20px;\">DISCOVER ETX</h1>\n<img src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/homepage/ad_hoc_promotions/icons/discover_etx.png?sfvrsn=4\" alt=\"Discover ETX Capital\" title=\"Discover ETX Capital\" style=\"float: right; width:34px; height:34px; margin-right: 20px;\">\n<br>\n<p style=\"margin-left: 20px; line-height: 20px; font-size:16px;\">\nWatch the video »</p>\n</a>\n\n\n</div>\n         </div>\n     </div>\n </div>\n            \n        </div>\n    </div>\n</div><div class=\"sf_cols visible-tablet\">\n    <div style=\"\" class=\"sf_colsOut sf_1col_1_100\">\n        <div id=\"mainBodyPlaceholder_C172_Col00\" style=\"margin: 20px 0px 0px;\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sf_cols grid\">\n     <div style=\"\" class=\"sf_colsOut sf_3cols_1_33 col-4newtablet col-md-3 brexit clickable\">\n         <div id=\"mainBodyPlaceholder_C179_Col00\" style=\"margin: 30px 0px 0px;\" class=\"sf_colsIn sf_3cols_1in_33\"><div class=\"sfContentBlock\"><a style=\"color:#ffffff;\" href=\"/account/demo-sign-up?v=1&amp;Platform=TraderPro\">\n<h1 style=\"font-size: 19px;\nfont-weight: bold;\nline-height: 0;\nmargin: 30px 0 -2px 20px;\">DEMO</h1>\n<img src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/homepage/ad_hoc_promotions/icons/demo.png?sfvrsn=2\" alt=\"Sign up for a demo account\" title=\"Sign up for a demo account\" style=\"float: right; width:38px; height:56px; margin-right: 20px;\">\n<br>\n<p style=\"margin-left: 20px; line-height: 20px; font-size:14px;\">\nSign up for a <br>\nDemo Account »</p>\n</a>\n\n\n</div>\n         </div>\n     </div>\n    \n     <div style=\"\" class=\"sf_colsOut sf_3cols_1_33 col-4newtablet col-md-3 education clickable\">\n         <div id=\"mainBodyPlaceholder_C179_Col01\" style=\"margin: 30px 0px 0px;\" class=\"sf_colsIn sf_3cols_2in_34\"><div class=\"sfContentBlock\"><a style=\"color:#FFFFFF;\" href=\"https://www.etxcapital.co.uk/about-us/education\">\n<h1 style=\"font-size: 19px;\nfont-weight: bold;\nline-height: 0;\nmargin: 30px 0 -2px 20px;\">EDUCATION</h1>\n<img src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/homepage/ad_hoc_promotions/icons/education.png?sfvrsn=2\" alt=\"Education\" title=\"Education\" style=\"float: right; width:34px; height:34px; margin-right: 20px;\">\n<br>\n<p style=\"margin-left: 20px; line-height: 20px; color: rgb(255, 255, 255); font-size:14px;\">Check out our FREE <br>\nSeminars &amp; Webinars here »</p>\n</a>\n\n\n</div>\n         </div>\n     </div>\n\n    <div style=\"\" class=\"sf_colsOut sf_3cols_1_33 col-4newtablet col-md-3 discover_etx clickable\">\n         <div id=\"mainBodyPlaceholder_C179_Col02\" style=\"margin: 40px 0px 0px;\" class=\"sf_colsIn sf_3cols_3in_33\"><div class=\"sfContentBlock\"><a class=\"popup-vimeo\" href=\"https://vimeo.com/161598421\" style=\"color:#FFFFFF;\">\n<h1 style=\"font-size: 19px;\nfont-weight: bold;\nline-height: 0;\nmargin: 40px 0 -2px 20px;\">DISCOVER ETX</h1>\n<img src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/homepage/ad_hoc_promotions/icons/discover_etx.png?sfvrsn=4\" alt=\"Discover ETX Capital\" title=\"Discover ETX Capital\" style=\"float: right; width:34px; height:34px; margin-right: 20px;\">\n<br>\n<p style=\"margin-left: 20px; line-height: 20px; font-size:14px;\">\nWatch the video »</p>\n</a>\n\n\n</div>\n         </div>\n     </div>\n </div>\n            \n        </div>\n    </div>\n</div>\n         </div>\n     </div>\n </div>\n            \n        </div>\n    </div>\n</div>\n\n<div class=\"sf_cols mobile-accordion\">\n    <div class=\"sf_colsOut sf_1col_1_100\">\n         <div id=\"mainBodyPlaceholder_T3ADE93C3002_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sf_cols\">\n    <div style=\"width: 100%;\" class=\"sf_colsOut sf_1col_1_100\">\n        <div id=\"mainBodyPlaceholder_C180_Col00\" style=\"margin: 0px;\" class=\"sf_colsIn sf_1col_1in_100\">\n\n<div class=\"sf_cols\">\n     <div class=\"sf_colsOut sf_1col_1_100 inner\">\n         <div id=\"mainBodyPlaceholder_C181_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sf_cols\">\n    <div style=\"\" class=\"sf_colsOut sf_1col_1_100 mobile-sec\">\n        <div id=\"mainBodyPlaceholder_C182_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sfContentBlock\"><h1 class=\"mobile-title visible-smartphone\" style=\"text-align: left;\npadding-left: 0px; text-transform:uppercase;\">Range of Markets</h1>\n\n\n</div><div style=\"\" class=\"sf_cols mobile-expand\">\n    <div style=\"width: 100%;\" class=\"sf_colsOut sf_1col_1_100\">\n         <div id=\"mainBodyPlaceholder_C184_Col00\" style=\"margin: 0px;\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sfContentBlock\"><div class=\"hidden-smartphone\" style=\"margin-top:30px;\"></div>\n\n\n</div><div class=\"sf_cols grid\">\n     <div style=\"\" class=\"sf_colsOut sf_2cols_1_25 col-6 col-md-5\">\n         <div id=\"mainBodyPlaceholder_C185_Col00\" style=\"margin: 20px 10px 20px 0px;\" class=\"sf_colsIn sf_2col_1in_25\"><div class=\"sfContentBlock\"><div class=\"pricingtablecontainer\">\n<ul class=\"tabs\">\n    <li class=\"tab-link current\" data-tab=\"tab-1\">POPULAR</li>\n    <li class=\"tab-link\" data-tab=\"tab-2\">FOREX</li>\n    <li class=\"tab-link\" data-tab=\"tab-3\">INDICES</li>\n    <li class=\"tab-link\" data-tab=\"tab-4\">EQUITIES</li>\n    <li class=\"tab-link\" data-tab=\"tab-5\">COMMODITIES</li>\n</ul>\n<div id=\"tab-1\" class=\"tab-content current\">\n<table class=\"fixed\">\n    <tbody>\n        <tr>\n            <th style=\"text-align:left;\">\n            <strong>Market</strong>\n            </th>\n            <th>\n            <strong>Min spread</strong>\n            </th>\n            <th>\n            <strong>Sell</strong>\n            </th>\n            <th>\n            <strong>Buy</strong>\n            </th>\n            <th>\n            <strong>Change</strong>\n            </th>\n        </tr>\n        <tr class=\"center\">\n            <td style=\"text-align:left;\">\n            EUR/USD\n            </td>\n            <td>\n            0.​6\n            </td>\n            <td>\n            <div id=\"bid-price1\" class=\"price-down\">1.07266</div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price1\" class=\"price-down\">1.07287</div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change1\" class=\"changeprice-down\">-0.01%</div>\n            <br>\n            </td>\n        </tr>\n        <tr class=\"center\">\n            <td style=\"text-align:left;\">\n            GBP/USD\n            </td>\n            <td>\n            0.9\n            </td>\n            <td>\n            <div id=\"bid-price2\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price2\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change2\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr class=\"center\">\n            <td style=\"text-align:left;\">\n            UK 100\n            </td>\n            <td>\n            1\n            </td>\n            <td>\n            <div id=\"bid-price3\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price3\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change3\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr class=\"center\">\n            <td style=\"text-align:left; white-space: nowrap;\">\n            Wall Street\n            </td>\n            <td>\n            1\n            </td>\n            <td>\n            <div id=\"bid-price4\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price4\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change4\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr class=\"center\">\n            <td style=\"text-align:left; white-space: nowrap;\">\n            Germany 30\n            </td>\n            <td>\n            1\n            </td>\n            <td>\n            <div id=\"bid-price5\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price5\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change5\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr class=\"center\">\n            <td style=\"text-align:left; white-space: nowrap;\">\n            Brent Crude\n            </td>\n            <td>\n            6\n            </td>\n            <td>\n            <div id=\"bid-price6\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price6\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change6\"></div>\n            <br>\n            </td>\n        </tr>\n    </tbody>\n</table>\n</div>\n<div id=\"tab-2\" class=\"tab-content\">\n<table class=\"fixed\">\n    <tbody>\n        <tr>\n            <th style=\"text-align:left;\">\n            <strong>Market</strong>\n            </th>\n            <th>\n            <strong>Min spread</strong>\n            </th>\n            <th>\n            <strong>Sell</strong>\n            </th>\n            <th>\n            <strong>Buy</strong>\n            </th>\n            <th>\n            <strong>Change</strong>\n            </th>\n        </tr>\n        <tr>\n            <td style=\"text-align:left;\">\n            EUR/USD\n            </td>\n            <td>\n            0.​6\n            </td>\n            <td>\n            <div id=\"bid-price7\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price7\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change7\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left;\">\n            GBP/USD\n            </td>\n            <td>\n            0.9\n            </td>\n            <td>\n            <div id=\"bid-price8\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price8\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change8\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left;\">\n            USD/JPY\n            </td>\n            <td>\n            0.9\n            </td>\n            <td>\n            <div id=\"bid-price9\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price9\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change9\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left;\">\n            AUD/USD\n            </td>\n            <td>\n            0.9\n            </td>\n            <td>\n            <div id=\"bid-price10\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price10\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change10\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left;\">\n            EUR/CHF\n            </td>\n            <td>\n            3\n            </td>\n            <td>\n            <div id=\"bid-price11\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price11\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change11\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left;\">\n            EUR/GBP\n            </td>\n            <td>\n            0.9\n            </td>\n            <td>\n            <div id=\"bid-price12\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price12\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change12\"></div>\n            <br>\n            </td>\n        </tr>\n    </tbody>\n</table>\n</div>\n<div id=\"tab-3\" class=\"tab-content\">\n<table class=\"fixed\">\n    <tbody>\n        <tr>\n            <th style=\"text-align:left;\">\n            <strong>Market</strong>\n            </th>\n            <th>\n            <strong>Min spread</strong>\n            </th>\n            <th>\n            <strong>Sell</strong>\n            </th>\n            <th>\n            <strong>Buy</strong>\n            </th>\n            <th>\n            <strong>Change</strong>\n            </th>\n        </tr>\n        <tr>\n            <td style=\"text-align:left;\">\n            UK 100\n            </td>\n            <td>\n            1\n            </td>\n            <td>\n            <div id=\"bid-price13\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price13\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change13\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left; white-space: nowrap;\">\n            Wall Street\n            </td>\n            <td>\n            1\n            </td>\n            <td>\n            <div id=\"bid-price14\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price14\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change14\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left;\">\n            SP500\n            </td>\n            <td>\n            0.5\n            </td>\n            <td>\n            <div id=\"bid-price15\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price15\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change15\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left; white-space: nowrap;\">\n            Germany 30\n            </td>\n            <td>\n            1\n            </td>\n            <td>\n            <div id=\"bid-price16\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price16\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change16\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left; white-space: nowrap;\">\n            Japan 225\n            </td>\n            <td>\n            10\n            </td>\n            <td>\n            <div id=\"bid-price17\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price17\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change17\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left; white-space: nowrap; font-size:96%;\">\n            Euro stocks 50\n            </td>\n            <td>\n            2\n            </td>\n            <td>\n            <div id=\"bid-price18\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price18\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change18\"></div>\n            <br>\n            </td>\n        </tr>\n    </tbody>\n</table>\n</div>\n<div id=\"tab-4\" class=\"tab-content\">\n<table class=\"fixed\">\n    <tbody>\n        <tr>\n            <th style=\"text-align:left;\">\n            <strong>Market</strong>\n            </th>\n            <th>\n            <strong>Min spread</strong>\n            </th>\n            <th>\n            <strong>Sell</strong>\n            </th>\n            <th>\n            <strong>Buy</strong>\n            </th>\n            <th>\n            <strong>Change</strong>\n            </th>\n        </tr>\n        <tr>\n            <td style=\"text-align:left;\">\n            Barclays\n            </td>\n            <td>\n            0.20%\n            </td>\n            <td>\n            <div id=\"bid-price19\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price19\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change19\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left;\">\n            Tesco\n            </td>\n            <td>\n            0.20%\n            </td>\n            <td>\n            <div id=\"bid-price20\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price20\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change20\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left;\">\n            Lloyds\n            </td>\n            <td>\n            0.20%\n            </td>\n            <td>\n            <div id=\"bid-price21\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price21\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change21\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left;\">\n            BP plc\n            </td>\n            <td>\n            0.20%\n            </td>\n            <td>\n            <div id=\"bid-price22\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price22\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change22\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left;\">\n            Apple\n            </td>\n            <td>\n            0.20%\n            </td>\n            <td>\n            <div id=\"bid-price23\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price23\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change23\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left;\">\n            Facebook\n            </td>\n            <td>\n            0.20%\n            </td>\n            <td>\n            <div id=\"bid-price24\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price24\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change24\"></div>\n            <br>\n            </td>\n        </tr>\n    </tbody>\n</table>\n</div>\n<div id=\"tab-5\" class=\"tab-content\">\n<table class=\"fixed\">\n    <tbody>\n        <tr>\n            <th style=\"text-align:left;\">\n            <strong>Market</strong>\n            </th>\n            <th>\n            <strong>Min spread</strong>\n            </th>\n            <th>\n            <strong>Sell</strong>\n            </th>\n            <th>\n            <strong>Buy</strong>\n            </th>\n            <th>\n            <strong>Change</strong>\n            </th>\n        </tr>\n        <tr>\n            <td style=\"text-align:left; white-space: nowrap;\">\n            Brent Crude\n            </td>\n            <td>\n            6\n            </td>\n            <td>\n            <div id=\"bid-price25\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price25\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change25\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left;\">\n            Gold\n            </td>\n            <td>\n            4\n            </td>\n            <td>\n            <div id=\"bid-price26\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price26\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change26\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left; white-space: nowrap;\">\n            US Crude\n            </td>\n            <td>\n            6\n            </td>\n            <td>\n            <div id=\"bid-price27\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price27\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change27\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left;\">\n            Silver\n            </td>\n            <td>\n            3\n            </td>\n            <td>\n            <div id=\"bid-price28\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price28\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change28\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left; white-space: nowrap;\">\n            US Coffee\n            </td>\n            <td>\n            5\n            </td>\n            <td>\n            <div id=\"bid-price29\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price29\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change29\"></div>\n            <br>\n            </td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left; white-space: nowrap;\">\n            US Sugar\n            </td>\n            <td>\n            4\n            </td>\n            <td>\n            <div id=\"bid-price30\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"ask-price30\"></div>\n            <br>\n            </td>\n            <td>\n            <div id=\"change30\"></div>\n            <br>\n            </td>\n        </tr>\n    </tbody>\n</table>\n</div>\n</div>\n\n\n</div>\n         </div>\n     </div>\n    \n     <div style=\"\" class=\"sf_colsOut sf_2cols_2_75 col-6 col-md-4\">\n         <div id=\"mainBodyPlaceholder_C185_Col01\" style=\"margin: 20px 0px 20px 10px;\" class=\"sf_colsIn sf_2col_2in_75\"><div class=\"sfContentBlock\"><h1 class=\"visible-desktop\" style=\"    color: #262626;\nfont-size: 36px;\nfont-weight: bold;\nline-height: 40px;\ntext-align: left;\ntext-transform: none;\nmargin-top:55px;\">Tight spreads on<br>\nthousands of markets</h1>\n<h1 class=\"visible-tablet\" style=\"    color: #262626;\nfont-size: 25px;\nfont-weight: bold;\nline-height: 30px;\ntext-align: left;\ntext-transform: none;\">Tight spreads on<br>\nthousands of markets</h1>\n<br>\n<p style=\"font-size:14px; line-height: 24px;\">Buy or sell, long or short? With thousands of markets, tight spreads and low margins, it’s never been easier to trade on forex, CFD stocks, commodities, indices and Binary Options. Spread betting with ETX Capital – global markets at your fingertips.</p>\n<br>\n<div class=\"btn-wrapper\" style=\"text-align:left;\">\n<a href=\"/account/sign-up/?v=3&amp;Platform=TraderPro\" class=\"btn btn-std lg\" style=\"font-size: 18px;\npadding: 12px 30px;\">\n<span style=\"color: white;\"><strong>OPEN LIVE ACCOUNT</strong></span>\n</a>\n</div>\n<p style=\"font-size:14px; margin-top: 10px;\" class=\"underlinelinks\">or <strong><a href=\"https://www.etxcapital.co.uk/account/sign-in\" style=\"color:#000000;\"><strong>LOGIN</strong></a></strong> as existing customer</p>\n\n\n</div>\n         </div>\n     </div>\n </div><div class=\"sfContentBlock\"><div class=\"hidden-smartphone\" style=\"margin-bottom:30px;\"></div>\n\n\n</div>\n         </div>\n     </div>\n </div>\n            \n        </div>\n    </div>\n</div>\n         </div>\n     </div>\n </div>\n            \n        </div>\n    </div>\n</div><div class=\"sf_cols s-platforms hidden-smartphone\">\n    <div style=\"width: 100%;\" class=\"sf_colsOut sf_1col_1_100 s-sec s-aside-media clearfix\">\n        <div id=\"mainBodyPlaceholder_C188_Col00\" class=\"sf_colsIn sf_1col_1in_100\">\n\n<div class=\"sf_cols\">\n     <div class=\"sf_colsOut sf_1col_1_100 inner\">\n         <div id=\"mainBodyPlaceholder_C189_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sf_cols\">\n    <div style=\"width: 100%;\" class=\"sf_colsOut sf_1col_1_100 mobile-sec open\">\n        <div id=\"mainBodyPlaceholder_C190_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sfContentBlock\"><h1 class=\"mobile-title visible-smartphone\" style=\"text-align: left;\npadding-left: 0px; text-transform:uppercase; color:#FFFFFF;\">OUR PLATFORMS</h1>\n\n\n</div><div style=\"\" class=\"sf_cols mobile-expand\">\n    <div style=\"\" class=\"sf_colsOut sf_1col_1_100\">\n        <div id=\"mainBodyPlaceholder_C193_Col00\" class=\"sf_colsIn sf_1col_1in_100\">\n\n<div class=\"sf_cols grid\">\n     <div class=\"sf_colsOut sf_2cols_1_25 col-6 col-md-5\">\n         <div id=\"mainBodyPlaceholder_C194_Col00\" class=\"sf_colsIn sf_2col_1in_25\">\n         </div>\n     </div>\n    \n     <div class=\"sf_colsOut sf_2cols_2_75 col-6 col-md-4\">\n         <div id=\"mainBodyPlaceholder_C194_Col01\" class=\"sf_colsIn sf_2col_2in_75\"><div class=\"sfContentBlock\"><h1 class=\"visible-desktop\" style=\"color: #ffffff;\nfont-weight: bold;\nmargin-left: -80px;\nwhite-space: nowrap;\nmargin-bottom: 10px;\">OUR PLATFORMS</h1>\n<h1 class=\"visible-tablet\" style=\"color: #ffffff;\nfont-weight: bold;\nmargin-left: -80px;\nwhite-space: nowrap;\nmargin-bottom: 10px;\">OUR PLATFORMS</h1>\n\n\n</div>\n         </div>\n     </div>\n </div><div class=\"sfContentBlock\"><ul>\n    <li class=\"current\">\n    <a>\n    <div class=\"visible-desktop\" style=\"color: rgb(186, 169, 111); position: relative;\n    z-index: 2; font-size: 22px; font-weight:normal;\">TraderPro</div>\n    </a>\n    <a>\n    <div class=\"visible-tablet\" style=\"color: rgb(186, 169, 111); position: relative;\n    z-index: 2; font-size: 18px; font-weight:normal;\">TraderPro</div>\n    </a>\n    <a>\n    <div class=\"visible-smartphone\" style=\"color: rgb(186, 169, 111); position: relative;\n    z-index: 2; font-size: 14px; font-weight:normal;\">TraderPro</div>\n    </a>\n    </li>\n    <li>\n    <a>\n    <div class=\"visible-desktop\" style=\"color: rgb(186, 169, 111); position: relative;\n    z-index: 2; font-size: 22px; font-weight:normal;\">MT4</div>\n    </a>\n    <a>\n    <div class=\"visible-tablet\" style=\"color: rgb(186, 169, 111); position: relative;\n    z-index: 2; font-size: 18px; font-weight:normal;\">MT4</div>\n    </a>\n    <a>\n    <div class=\"visible-smartphone\" style=\"color: rgb(186, 169, 111); position: relative;\n    z-index: 2; font-size: 14px; font-weight:normal;\">MT4</div>\n    </a>\n    </li>\n    <li>\n    <a>\n    <div class=\"visible-desktop\" style=\"color: rgb(186, 169, 111); position: relative;\n    z-index: 2; font-size: 22px; font-weight:normal;\">Binary</div>\n    </a>\n    <a>\n    <div class=\"visible-tablet\" style=\"color: rgb(186, 169, 111); position: relative;\n    z-index: 2; font-size: 18px; font-weight:normal;\">Binary</div>\n    </a>\n    <a>\n    <div class=\"visible-smartphone\" style=\"color: rgb(186, 169, 111); position: relative;\n    z-index: 2; font-size: 14px; font-weight:normal;\">Binary</div>\n    </a>\n    </li>\n</ul>\n<div class=\"sp-contents\">\n<div class=\"sp-content\">\n<div class=\"grid\">\n<div class=\"visible-desktop col-5 col-md-4\">\n<img title=\"ETX TraderPro platform\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/platforms-des_traderpro.png?sfvrsn=4\" alt=\"ETX TraderPro platform\" style=\"width:auto; height:auto; margin-top: -70px;\">\n</div>\n<div class=\"visible-tablet col-5 col-md-4\">\n<img title=\"platforms-tablet_traderpro\" alt=\"platforms-tablet_traderpro\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/platforms-tablet_traderpro.png?sfvrsn=2\" style=\"width:auto; height:auto;\">\n</div>\n<div class=\"visible-smartphone col-5 col-md-4\">\n<img title=\"platforms-mob_traderpro\" alt=\"platforms-mob_traderpro\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/platforms-mob_traderpro.png?sfvrsn=2\" style=\"width:auto; height:auto;\">\n</div>\n<!-- / col-5 -->\n<div class=\"col-7 col-md-5\">\n<p style=\"font-size:14px; color:#FFFFFF;\">Powerful charting tools, thousands of markets to trade on and fast execution – all on our intuitive flagship trading platform that’s been designed by traders, for traders.</p>\n<p style=\"font-size:14px; color:#FFFFFF;\"><img style=\"float: left;\" title=\"tick-gold\" alt=\"tick-gold\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/tick-gold.png?sfvrsn=4\">&nbsp;&nbsp;Tight spreads &amp; low margins\n<br>\n<img style=\"float: left;\" title=\"tick-gold\" alt=\"tick-gold\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/tick-gold.png?sfvrsn=4\">&nbsp;&nbsp;Over 5,000 markets to trade on – forex, stocks, indices, commodities\n<br>\n<img style=\"float: left;\" title=\"tick-gold\" alt=\"tick-gold\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/tick-gold.png?sfvrsn=4\">&nbsp;&nbsp;Fully customisable charts and technical drawing tools</p>\n<div class=\"btn-wrapper\" style=\"text-align:left;\">\n<a href=\"/account/sign-up/?v=3&amp;Platform=TraderPro\" class=\"btn btn-std lg\" style=\"font-size: 18px;\npadding: 12px 30px;\">\n<span style=\"color: white;\"><strong>OPEN LIVE ACCOUNT</strong></span>\n</a>\n</div>\n<!--<p style=\"font-size:14px; color:#FFFFFF;\" class=\"underlinelinks\">or <strong><a href=\"https://www.uat.etxcapital.co.uk/account/sign-in\" style=\"color:#FFFFFF;\" sfref=\"[f669d9a7-009d-4d83-ddaa-000000000002]168cfa27-68d0-68c1-9ecd-ff0000969874\"><strong>LOGIN</strong></a></strong> as existing customer</p>-->\n</div>\n<!-- / col-7 -->\n</div>\n<!-- / grid -->\n</div>\n<!-- / sp-content -->\n<div class=\"sp-content\">\n<div class=\"grid\">\n<div class=\"visible-desktop col-5 col-md-4\">\n<img title=\"ETX MT4 platform\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/platforms-des_mt4.png?sfvrsn=4\" alt=\"ETX MT4 platform\" style=\"width:auto; height:auto; margin-top: -70px;\">\n</div>\n<div class=\"visible-tablet col-5 col-md-4\">\n<img title=\"platforms-tablet_mt4\" alt=\"platforms-tablet_mt4\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/platforms-tablet_mt4.png?sfvrsn=4\" style=\"width:auto; height:auto;\">\n</div>\n<div class=\"visible-smartphone col-5 col-md-4\">\n<img title=\"platforms-mob_mt4\" alt=\"platforms-mob_mt4\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/platforms-mob_mt4.png?sfvrsn=4\" style=\"width:auto; height:auto;\">\n</div>\n<!-- / col-5 -->\n<div class=\"col-7 col-md-5\">\n<p style=\"font-size:14px; color:#FFFFFF;\">Experience trading on the respected MT4 platform from ETX. Expert Advisors, Trading Central reports, advanced technical tools, multiple charts, one-click ordering and hedging tools.</p>\n<p style=\"font-size:14px; color:#FFFFFF;\"><img style=\"float: left;\" title=\"tick-gold\" alt=\"tick-gold\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/tick-gold.png?sfvrsn=4\">&nbsp;&nbsp;Automate your trading with Expert Advisors\n<br>\n<img style=\"float: left;\" title=\"tick-gold\" alt=\"tick-gold\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/tick-gold.png?sfvrsn=4\">&nbsp;&nbsp;Hedging tools, micro-lots and multiple chart capability\n<br>\n<img style=\"float: left;\" title=\"tick-gold\" alt=\"tick-gold\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/tick-gold.png?sfvrsn=4\">&nbsp;&nbsp;Free News sentiment widget</p>\n<div class=\"btn-wrapper\" style=\"text-align:left;\">\n<a href=\"/account/sign-up/?v=3&amp;Platform=MT4-SpreadBet\" class=\"btn btn-std lg btnmt4\" style=\"font-size: 18px;\npadding: 12px 30px;\">\n<span style=\"color: white;\"><strong>OPEN LIVE ACCOUNT</strong></span>\n</a>\n</div>\n<!--<p style=\"font-size:14px; color:#FFFFFF;\" class=\"underlinelinks\">or <strong><a href=\"https://www.uat.etxcapital.co.uk/account/sign-in\" style=\"color:#FFFFFF;\" sfref=\"[f669d9a7-009d-4d83-ddaa-000000000002]168cfa27-68d0-68c1-9ecd-ff0000969874\"><strong>LOGIN</strong></a></strong> as existing customer</p>-->\n</div>\n<!-- / col-7 -->\n</div>\n<!-- / grid -->\n</div>\n<!-- / sp-content -->\n<div class=\"sp-content\">\n<div class=\"grid\">\n<div class=\"visible-desktop col-5 col-md-4\">\n<img title=\"ETX Binary platform\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/platforms-des_binary.png?sfvrsn=4\" alt=\"ETX Binary platform\" style=\"width:auto; height:auto; margin-top: -70px;\">\n</div>\n<div class=\"visible-tablet col-5 col-md-4\">\n<img title=\"platforms-tablet_binary\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/platforms-tablet_binary.png?sfvrsn=2\" alt=\"platforms-tablet_binary\" style=\"width:auto; height:auto;\">\n</div>\n<div class=\"visible-smartphone col-5 col-md-4\">\n<img title=\"platforms-mob_binary\" alt=\"platforms-mob_binary\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/platforms-mob_binary.png?sfvrsn=2\" style=\"width:auto; height:auto;\">\n</div>\n<!-- / col-5 -->\n<div class=\"col-7 col-md-5\">\n<p style=\"font-size:14px; color:#FFFFFF;\">Experience fast-paced trading with Binary Options, an exciting trading platform from ETX. Trade on dozens of binary options markets across forex, stocks, indices and commodities.</p>\n<p style=\"font-size:14px; color:#FFFFFF;\"><img style=\"float: left;\" title=\"tick-gold\" alt=\"tick-gold\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/tick-gold.png?sfvrsn=4\">&nbsp;&nbsp;Fixed payouts\n<br>\n<img style=\"float: left;\" title=\"tick-gold\" alt=\"tick-gold\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/tick-gold.png?sfvrsn=4\">&nbsp;&nbsp;Zero leverage\n<br>\n<img style=\"float: left;\" title=\"tick-gold\" alt=\"tick-gold\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/tick-gold.png?sfvrsn=4\">&nbsp;&nbsp;Trade in 60 seconds</p>\n<div class=\"btn-wrapper\" style=\"text-align:left;\">\n<a href=\"/account/sign-up/?v=3&amp;Platform=MarketsPulse\" class=\"btn btn-std lg btnbinary\" style=\"font-size: 18px;\npadding: 12px 30px;\">\n<span style=\"color: white;\"><strong>OPEN LIVE ACCOUNT</strong></span>\n</a>\n</div>\n<!--<p style=\"font-size:14px; color:#FFFFFF;\" class=\"underlinelinks\">or <strong><a href=\"https://www.uat.etxcapital.co.uk/account/sign-in\" style=\"color:#FFFFFF;\" sfref=\"[f669d9a7-009d-4d83-ddaa-000000000002]168cfa27-68d0-68c1-9ecd-ff0000969874\"><strong>LOGIN</strong></a></strong> as existing customer</p>-->\n</div>\n<!-- / col-7 -->\n</div>\n<!-- / grid -->\n</div>\n<!-- / sp-content -->\n</div>\n<!-- / sp-contents -->\n\n\n</div>\n            \n        </div>\n    </div>\n</div>\n            \n        </div>\n    </div>\n</div>\n         </div>\n     </div>\n </div>\n            \n        </div>\n    </div>\n</div><div class=\"sf_cols hidden-smartphone\">\n    <div style=\"\" class=\"sf_colsOut sf_1col_1_100 s-sec s-aside-media clearfix\">\n        <div id=\"mainBodyPlaceholder_C267_Col00\" class=\"sf_colsIn sf_1col_1in_100\">\n\n<div class=\"sf_cols\">\n     <div class=\"sf_colsOut sf_1col_1_100 inner\">\n         <div id=\"mainBodyPlaceholder_C268_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sf_cols grid\">\n    <div style=\"width: 50%;\" class=\"sf_colsOut sf_2cols_1_25 col-6 col-md-5\">\n        <div id=\"mainBodyPlaceholder_C280_Col00\" class=\"sf_colsIn sf_2cols_1in_50\"><div class=\"sfContentBlock\"><div class=\"visible-desktop\" style=\"margin-right:20px;\">\n<h1 style=\"font-size: 14px;\nline-height: 25px;\nmargin-top: 10px;\ntext-align: right;\">New to trading? Here's why you should</h1>\n<h1 style=\"text-align: right;\"><span style=\"font-size: 38px;\"><strong>CHOOSE ETX</strong></span></h1>\n<h3 style=\"font-size: 18px;\nfont-weight: bold;\nmargin-bottom: -5px;\nline-height: 20px;\nmargin-top: 30px;\ntext-align: right;\">TRADING PLATFORMS</h3>\n<p style=\"font-size: 14px;\nline-height: 20px;\ntext-align: right;\">\nETX Capital delivers three easy-to-use trading platforms. Choose from TraderPro, MT4 or Binary.<br>\n<br>\n</p>\n<h3 style=\"font-size: 18px;\nfont-weight: bold;\nline-height: 20px;\nmargin-bottom: -5px;\nmargin-top: 0px;\ntext-align: right;\">EDUCATION PROGRAMME</h3>\n<p style=\"font-size: 14px;\nline-height: 20px;\ntext-align: right;\">\nFree webinars, technical analysis tools and support from our customer service team based in London.<br>\n<br>\n</p>\n<h3 style=\"font-size: 18px;\nfont-weight: bold;\nline-height: 20px;\nmargin-bottom: -5px;\nmargin-top: 0px;\ntext-align: right;\">TRUSTED &amp; SECURE</h3>\n<p style=\"font-size: 14px;\nline-height: 20px;\ntext-align: right;\">\nFully authorised and regulated by the FCA*, ETX is a trusted and secure provider of spread betting, forex and CFD products. Retail client funds in segregated accounts in accordance with the FCA’s client money rules.<br>\n<br>\n</p>\n<h3 style=\"font-size: 18px;\nfont-weight: bold;\nline-height: 20px;\nmargin-bottom: -5px;\nmargin-top: 0px;\ntext-align: right;\">WIDE RANGE OF PAYMENT SOLUTIONS<br>\n&amp; NO DEPOSIT CHARGES</h3>\n<p style=\"font-size: 14px;\nline-height: 20px;\ntext-align: right;\">\nIn addition to low fees and commissions, we will not charge you to deposit money in your account regardless of your credit card or other payment provider.<br>\n<br>\n*Binary Options are not regulated\n</p>\n<br>\n<div class=\"btn-wrapper hidden-smartphone\" style=\"text-align:right;\">\n<a href=\"/account/sign-up/?v=3&amp;Platform=TraderPro\" class=\"btn btn-std lg\">\n<span style=\"color: white;\"><strong style=\"font-size: 20px;\">OPEN LIVE ACCOUNT</strong></span>\n</a>\n</div>\n<div class=\"btn-wrapper visible-smartphone\" style=\"text-align: right;\">\n<a href=\"/account/sign-up/?v=3&amp;Platform=TraderPro\" class=\"btn btn-std lg\">\n<span style=\"color: white;\"><strong>OPEN LIVE ACCOUNT</strong></span>\n</a>\n</div>\n<p style=\"font-size:14px; text-align:right;\" class=\"underlinelinks\">or <strong><a href=\"https://www.etxcapital.co.uk/account/sign-in\" style=\"color:#000000;\"><strong>LOGIN</strong></a></strong> as existing customer</p>\n</div>\n<div class=\"visible-tablet\" style=\"margin-right:20px;\">\n<h1 style=\"font-size: 14px;\nline-height: 25px;\nmargin-top: 10px;\ntext-align: right;\">New to trading? Here's why you should</h1>\n<h1 style=\"text-align: right;\"><span style=\"font-size: 38px;\"><strong>CHOOSE ETX</strong></span></h1>\n<h3 style=\"font-size: 14px;\nfont-weight: bold;\nline-height: 20px;\nmargin-bottom: -5px;\nmargin-top: 30px;\ntext-align: right;\">TRADING PLATFORMS</h3>\n<p style=\"font-size: 14px;\nline-height: 20px;\ntext-align: right;\">\nETX Capital delivers three easy-to-use trading platforms. Choose from TraderPro, MT4 or Binary.<br>\n<br>\n</p>\n<h3 style=\"font-size: 14px;\nfont-weight: bold;\nline-height: 20px;\nmargin-bottom: -5px;\nmargin-top: 0px;\ntext-align: right;\">EDUCATION PROGRAMME</h3>\n<p style=\"font-size: 14px;\nline-height: 20px;\ntext-align: right;\">\nFree webinars, technical analysis tools and support from our customer service team based in London.<br>\n<br>\n</p>\n<h3 style=\"font-size: 14px;\nfont-weight: bold;\nline-height: 20px;\nmargin-bottom: -5px;\nmargin-top: 0px;\ntext-align: right;\">TRUSTED &amp; SECURE</h3>\n<p style=\"font-size: 14px;\nline-height: 20px;\ntext-align: right;\">\nFully authorised and regulated by the FCA*, ETX is a trusted and secure provider of spread betting, forex and CFD products. Retail client funds in segregated accounts in accordance with the FCA’s client money rules.<br>\n<br>\n</p>\n<h3 style=\"font-size: 14px;\nfont-weight: bold;\nline-height: 20px;\nmargin-bottom: -5px;\nmargin-top: 0px;\ntext-align: right;\">WIDE RANGE OF PAYMENT SOLUTIONS<br>\n&amp; NO DEPOSIT CHARGES</h3>\n<p style=\"font-size: 14px;\nline-height: 20px;\ntext-align: right;\">\nIn addition to low fees and commissions, we will not charge you to deposit money in your account regardless of your credit card or other payment provider.<br>\n&nbsp;<br>\n*Binary Options are not regulated\n</p>\n<br>\n<div class=\"btn-wrapper hidden-smartphone\" style=\"text-align:right;\">\n<a href=\"/account/sign-up/?v=3&amp;Platform=TraderPro\" class=\"btn btn-std lg\">\n<span style=\"color: white;\"><strong style=\"font-size: 20px;\">OPEN LIVE ACCOUNT</strong></span>\n</a>\n</div>\n<div class=\"btn-wrapper visible-smartphone\" style=\"text-align: right;\">\n<a href=\"/account/sign-up/?v=3&amp;Platform=TraderPro\" class=\"btn btn-std lg\">\n<span style=\"color: white;\"><strong>OPEN LIVE ACCOUNT</strong></span>\n</a>\n</div>\n<p style=\"font-size:14px; text-align:right;\" class=\"underlinelinks\">or <strong><a href=\"https://www.etxcapital.co.uk/account/sign-in\" style=\"color:#000000;\"><strong>LOGIN</strong></a></strong> as existing customer</p>\n</div>\n\n\n</div>\n            \n        </div>\n    </div>\n    <div style=\"width: 50%;\" class=\"sf_colsOut sf_2cols_2_75 col-6 col-md-4 switchtoetxbg\">\n        <div id=\"mainBodyPlaceholder_C280_Col01\" class=\"sf_colsIn sf_2cols_2in_50\"><div class=\"sfContentBlock\"><div class=\"visible-desktop\" style=\"margin-left:20px;\">\n<h1 style=\"font-size: 14px;\nline-height: 25px;\nmargin-top: 10px;\ntext-align: left;\">Experienced trader? Here's why you should</h1>\n<h1 style=\"text-align: left;\"><span style=\"font-size: 38px;\"><strong>SWITCH <em>to</em> ETX</strong></span></h1>\n<h3 style=\"text-align: left; font-size: 18px;\nfont-weight: bold;\nline-height: 20px;\nmargin-bottom: -5px;\nmargin-top: 30px;\">TECHNICAL TOOLS &amp; ADVANCED CHARTS</h3>\n<p style=\"text-align: left; font-size: 14px;\nline-height: 20px;\">\nAdvanced charts, powerful technical analysis tools and support from our dedicated sales trading team on TraderPro and MT4.<br>\n<br>\n</p>\n<h3 style=\"text-align: left; font-size: 18px;\nfont-weight: bold;\nline-height: 20px;\nmargin-bottom: -5px;\nmargin-top: 0px;\">TIGHT SPREADS &amp; COMPETITIVE MARGINS</h3>\n<p style=\"text-align: left; font-size: 14px;\nline-height: 20px;\">\nHighly competitive spreads on thousands of markets, from 0.6 pips on major forex pairs. We offer low margins – leverage of up to 200:1.<br>\n<br>\n</p>\n<h3 style=\"text-align: left; font-size: 18px;\nfont-weight: bold;\nmargin-bottom: -5px;\nline-height: 20px;\nmargin-top: 0px;\">PERSONAL RELATIONSHIP MANAGEMENT<br>\n&amp; HIGHLY EXPERIENCED CUSTOMER SERVICE</h3>\n<p style=\"text-align: left; font-size: 14px;\nline-height: 20px;\">\nGet your own account relationship manager who will help you with the platforms, inform you of the latest market trends and events, and offer ongoing support over the phone or email.<br>\n<br>\n</p>\n<h3 style=\"text-align: left; font-size: 18px;\nfont-weight: bold;\nmargin-bottom: -5px;\nline-height: 20px;\nmargin-top: 0px;\">13 YEARS OF EXPERIENCE IN THE INDUSTRY</h3>\n<p style=\"text-align: left; font-size: 14px;\nline-height: 20px;\">\nJoin one of the best Forex and spread betting providers with 13 years of experience in the industry and an award-winning multi-asset multi-product platform.<br>\n<br>\n</p>\n<br>\n<br>\n<div class=\"btn-wrapper hidden-smartphone\" style=\"text-align:left;\">\n<a href=\"/account/sign-up/?v=3&amp;Platform=TraderPro\" class=\"btn btn-std lg\">\n<span style=\"color: white;\"><strong style=\"font-size: 20px;\">OPEN LIVE ACCOUNT</strong></span>\n</a>\n</div>\n<div class=\"btn-wrapper visible-smartphone\" style=\"text-align: left;\">\n<a href=\"/account/sign-up/?v=3&amp;Platform=TraderPro\" class=\"btn btn-std lg\">\n<span style=\"color: white;\"><strong>OPEN LIVE ACCOUNT</strong></span>\n</a>\n</div>\n<p style=\"text-align: left; font-size:14px;\" class=\"underlinelinks\">or <strong><a href=\"https://www.etxcapital.co.uk/account/sign-in\" style=\"color:#000000;\"><strong>LOGIN</strong></a></strong> as existing customer</p>\n</div>\n<div class=\"visible-tablet\" style=\"margin-left:20px;\">\n<h1 style=\"font-size: 14px;\nline-height: 25px;\nmargin-top: 10px;\ntext-align: left;\">Experienced trader? Here's why you should</h1>\n<h1 style=\"text-align: left;\"><span style=\"font-size: 38px;\"><strong>SWITCH <em>to</em> ETX</strong></span></h1>\n<h3 style=\"text-align: left; font-size: 14px;\nfont-weight: bold;\nline-height: 20px;\nmargin-bottom: -5px;\nmargin-top: 30px;\">TECHNICAL TOOLS &amp; ADVANCED CHARTS</h3>\n<p style=\"text-align: left; font-size: 14px;\nline-height: 20px;\">\nAdvanced charts, powerful technical analysis tools and support from our dedicated sales trading team on TraderPro and MT4.<br>\n<br>\n</p>\n<h3 style=\"text-align: left; font-size: 14px;\nfont-weight: bold;\nline-height: 20px;\nmargin-bottom: -5px;\nmargin-top: 0px;\">TIGHT SPREADS &amp; COMPETITIVE MARGINS</h3>\n<p style=\"text-align: left; font-size: 14px;\nline-height: 20px;\">\nHighly competitive spreads on thousands of markets, from 0.6 pips on major forex pairs. We offer low margins – leverage of up to 200:1.<br>\n<br>\n</p>\n<h3 style=\"text-align: left; font-size: 14px;\nfont-weight: bold;\nmargin-bottom: -5px;\nline-height: 20px;\nmargin-top: 0px;\">PERSONAL RELATIONSHIP MANAGEMENT<br>\n&amp; HIGHLY EXPERIENCED CUSTOMER SERVICE</h3>\n<p style=\"text-align: left; font-size: 14px;\nline-height: 20px;\">\nGet your own account relationship manager who will help you with the platforms, inform you of the latest market trends and events, and offer ongoing support over the phone or email.<br>\n<br>\n</p>\n<h3 style=\"text-align: left; font-size: 14px;\nfont-weight: bold;\nmargin-bottom: -5px;\nline-height: 20px;\nmargin-top: 0px;\">13 YEARS OF EXPERIENCE IN THE INDUSTRY</h3>\n<p style=\"text-align: left; font-size: 14px;\nline-height: 20px;\">\nJoin one of the best Forex and spread betting providers with 13 years of experience in the industry and an award-winning multi-asset multi-product platform.<br>\n<br>\n</p>\n<br>\n<br>\n<br>\n<div class=\"btn-wrapper hidden-smartphone\" style=\"text-align:left;\">\n<a href=\"/account/sign-up/?v=3&amp;Platform=TraderPro\" class=\"btn btn-std lg\">\n<span style=\"color: white;\"><strong style=\"font-size: 20px;\">OPEN LIVE ACCOUNT</strong></span>\n</a>\n</div>\n<div class=\"btn-wrapper visible-smartphone\" style=\"text-align: left;\">\n<a href=\"/account/sign-up/?v=3&amp;Platform=TraderPro\" class=\"btn btn-std lg\">\n<span style=\"color: white;\"><strong>OPEN LIVE ACCOUNT</strong></span>\n</a>\n</div>\n<p style=\"text-align: left; font-size:14px;\" class=\"underlinelinks\">or <strong><a href=\"https://www.etxcapital.co.uk/account/sign-in\" style=\"color:#000000;\"><strong>LOGIN</strong></a></strong> as existing customer</p>\n</div>\n\n\n</div>            \n        </div>\n    </div>\n</div>\n         </div>\n     </div>\n </div>\n            \n        </div>\n    </div>\n</div><div class=\"sf_cols visible-smartphone\">\n    <div style=\"\" class=\"sf_colsOut sf_1col_1_100 s-sec s-aside-media s-odd\">\n        <div id=\"mainBodyPlaceholder_C288_Col00\" class=\"sf_colsIn sf_1col_1in_100\">\n\n<div class=\"sf_cols\">\n     <div class=\"sf_colsOut sf_1col_1_100 inner\">\n         <div id=\"mainBodyPlaceholder_C289_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sf_cols\">\n    <div style=\"\" class=\"sf_colsOut sf_1col_1_100 mobile-sec\">\n        <div id=\"mainBodyPlaceholder_C290_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sfContentBlock\"><h1 class=\"mobile-title visible-smartphone\" style=\"text-align: left;\npadding-left: 0px; text-transform:uppercase;\">Why Choose ETX</h1>\n\n\n</div>\n\n<div class=\"sf_cols mobile-expand\">\n    <div class=\"sf_colsOut sf_1col_1_100\">\n         <div id=\"mainBodyPlaceholder_C291_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sfContentBlock\"><!--<p>Whether you are an experienced trader or just starting.</p>\n<br>-->\n<div id=\"body\">\n<!-- panel -->\n<!--<div class=\"accordion\" id=\"section1\">Why choose ETX<span></span></div>-->\n<div class=\"container2\" style=\"padding-top: 0;\">\n<div class=\"content\" style=\"background: #e4e4e4 none repeat scroll 0 0; color:#000000;\">\n<p>\n</p>\n<h3 style=\"font-size: 18px;\nfont-weight: bold;\nline-height: 0;\nmargin-top: 0;\ntext-align: left;\">TRADING PLATFORMS</h3>\n<p style=\"font-size: 14px;\nline-height: 20px;\">\nETX Capital delivers three easy-to-use trading platforms. Choose from TraderPro, MT4 or Binary.<br>\n<br>\n</p>\n<h3 style=\"font-size: 18px;\nfont-weight: bold;\nline-height: 0;\nmargin-top: 10px;\ntext-align: left;\">EDUCATION PROGRAMME</h3>\n<p style=\"font-size: 14px;\nline-height: 20px;\">\nFree webinars, technical analysis tools and support from our customer service team based in London.<br>\n<br>\n</p>\n<h3 style=\"font-size: 18px;\nfont-weight: bold;\nline-height: 0;\nmargin-top: 10px;\ntext-align: left;\">TRUSTED &amp; SECURE</h3>\n<p style=\"font-size: 14px;\nline-height: 20px;\">\nFully authorised and regulated by the FCA*, ETX is a trusted and secure provider of spread betting, forex and CFD products. Retail client funds in segregated accounts in accordance with the FCA’s client money rules.<br>\n<br>\n</p>\n<h3 style=\"font-size: 18px;\nfont-weight: bold;\nline-height: 20px;\nmargin-top: 10px;\ntext-align: left;\">WIDE RANGE OF PAYMENT<br>\nSOLUTIONS &amp; NO DEPOSIT<br>\nCHARGES</h3>\n<p style=\"font-size: 14px;\nline-height: 20px;\">\nIn addition to low fees and commissions, we will not charge you to deposit money in your account regardless of your credit card or other payment provider.<br>\n<br>\n*Binary Options are not regulated\n<br>\n&nbsp;\n</p>\n<br>\n<div class=\"btn-wrapper\" style=\"margin-right: 10px;\ntext-align: center;\">\n<a href=\"/account/sign-up/?v=3&amp;Platform=TraderPro\" class=\"btn btn-std lg\">\n<span style=\"font-size: 16px; color: white;\"><strong>OPEN LIVE ACCOUNT</strong></span>\n</a>\n</div>\n</div>\n</div>\n<!-- end panel -->\n</div>\n\n\n</div>\n         </div>\n     </div>\n </div>\n            \n        </div>\n    </div>\n</div>\n         </div>\n     </div>\n </div>\n            \n        </div>\n    </div>\n</div><div class=\"sf_cols visible-smartphone\">\n    <div style=\"\" class=\"sf_colsOut sf_1col_1_100 s-sec s-aside-media clearfix\">\n        <div id=\"mainBodyPlaceholder_C293_Col00\" class=\"sf_colsIn sf_1col_1in_100\">\n\n<div class=\"sf_cols\">\n     <div class=\"sf_colsOut sf_1col_1_100 inner\">\n         <div id=\"mainBodyPlaceholder_C294_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sf_cols\">\n    <div style=\"\" class=\"sf_colsOut sf_1col_1_100 mobile-sec\">\n        <div id=\"mainBodyPlaceholder_C295_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sfContentBlock\"><h1 class=\"mobile-title visible-smartphone\" style=\"text-align: left;\npadding-left: 0px; text-transform:uppercase;\">Why Switch to ETX</h1>\n\n\n</div>\n\n<div class=\"sf_cols mobile-expand\">\n    <div class=\"sf_colsOut sf_1col_1_100\">\n         <div id=\"mainBodyPlaceholder_C297_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sfContentBlock\"><!--<p>Whether you are an experienced trader or just starting.</p>\n<br>-->\n<div id=\"body\">\n<!-- panel -->\n<!--<div class=\"accordion\" id=\"section2\">Why switch to ETX<span></span></div>-->\n<div class=\"container2\" style=\"padding-top: 0;\">\n<div class=\"content\" style=\"color:#000000;\">\n<p>\n</p>\n<h3 style=\"font-size: 18px;\nfont-weight: bold;\nline-height: 20px;\nmargin-top: 0;\ntext-align: left;\">TECHNICAL TOOLS &amp; ADVANCED CHARTS</h3>\n<p style=\"font-size: 14px;\nline-height: 20px;\">\nAdvanced charts, powerful technical analysis tools and support from our dedicated sales trading team on TraderPro and MT4.<br>\n<br>\n</p>\n<h3 style=\"font-size: 18px;\nfont-weight: bold;\nline-height: 20px;\nmargin-top: 10px;\ntext-align: left;\">TIGHT SPREADS &amp; COMPETITIVE MARGINS</h3>\n<p style=\"font-size: 14px;\nline-height: 20px;\">\nHighly competitive spreads on thousands of markets, from 0.6 pips on major forex pairs. We offer low margins – leverage of up to 200:1.<br>\n<br>\n</p>\n<h3 style=\"font-size: 18px;\nfont-weight: bold;\nline-height: 20px;\nmargin-top: 10px;\ntext-align: left;\">PERSONAL RELATIONSHIP MANAGEMENT<br>\n&amp; HIGHLY EXPERIENCED CUSTOMER SERVICE</h3>\n<p style=\"font-size: 14px;\nline-height: 20px;\">\nGet your own account relationship manager who will help you with the platforms, inform you of the latest market trends and events, and offer ongoing support over the phone or email.<br>\n<br>\n</p>\n<h3 style=\"font-size: 18px;\nfont-weight: bold;\nline-height: 20px;\nmargin-top: 10px;\ntext-align: left;\">13 YEARS OF EXPERIENCE IN THE INDUSTRY</h3>\n<p style=\"font-size: 14px;\nline-height: 20px;\">\nJoin one of the best Forex and spread betting providers with 13 years of experience in the industry and an award-winning multi-asset multi-product platform.<br>\n<br>\n</p>\n<br>\n<div class=\"btn-wrapper\" style=\"margin-right: 10px;\ntext-align: center;\">\n<a href=\"/account/sign-up/?v=3&amp;Platform=TraderPro\" class=\"btn btn-std lg\">\n<span style=\"font-size: 16px; color: white;\"><strong>OPEN LIVE ACCOUNT</strong></span>\n</a>\n</div>\n</div>\n</div>\n<!-- end panel -->\n</div>\n\n\n</div>\n         </div>\n     </div>\n </div>\n            \n        </div>\n    </div>\n</div>\n         </div>\n     </div>\n </div>\n            \n        </div>\n    </div>\n</div><span id=\"mainBodyPlaceholder_C021\" class=\"hidden-smartphone\"><section id=\"mainBodyPlaceholder_C021_ctl00_ctl00_marqueeWrapper\" class=\"s-small-info-banner hidden-smartphone\">\n    <div class=\"inner\">\n        <a href=\"blog\" id=\"mainBodyPlaceholder_C021_ctl00_ctl00_blogPageLink\"><h3>ETX Blog</h3></a>\n        <div class=\"strip\">\n            <p style=\"left: -43.05px;\">\n                 <span><a href=\"https://www.etxcapital.co.uk/blog/french-election-2017-what-to-watch-and-how-to-trade-it\">French Election 2017: What to watch and how to trade it</a></span> <a href=\"https://www.etxcapital.co.uk/blog?author=Neil_Wilson\">Neil Wilson</a> / <span><a href=\"https://www.etxcapital.co.uk/blog/week-ahead-french-presidential-election-and-us-earnings-season\">Week Ahead: French presidential election and US earnings season</a></span> <a href=\"https://www.etxcapital.co.uk/blog?author=Neil_Wilson\">Neil Wilson</a> / <span><a href=\"https://www.etxcapital.co.uk/blog/us-earnings-season-q1-what-to-watch\">US earnings season Q1: what to watch</a></span> <a href=\"https://www.etxcapital.co.uk/blog?author=Neil_Wilson\">Neil Wilson</a> / <span><a href=\"https://www.etxcapital.co.uk/blog/week-ahead-banks-kick-off-wall-street-earnings-season\">Week Ahead: Banks kick off Wall Street earnings season</a></span> <a href=\"https://www.etxcapital.co.uk/blog?author=Neil_Wilson\">Neil Wilson</a> / <span><a href=\"https://www.etxcapital.co.uk/blog/3-reasons-investors-are-piling-into-european-stocks-over-us-equities\">3 reasons investors are piling into European stocks over US equities</a></span> <a href=\"https://www.etxcapital.co.uk/blog?author=Neil_Wilson\">Neil Wilson</a> \n            </p>\n        </div>\n    </div>\n    <!-- inner -->\n</section>\n\n\n</span><div class=\"sf_cols\">\n    <div style=\"\" class=\"sf_colsOut sf_1col_1_100 s-sec s-aside-media clearfix\">\n        <div id=\"mainBodyPlaceholder_C197_Col00\" class=\"sf_colsIn sf_1col_1in_100\">\n\n<div class=\"sf_cols\">\n     <div class=\"sf_colsOut sf_1col_1_100 inner\">\n         <div id=\"mainBodyPlaceholder_C198_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sf_cols\">\n    <div style=\"\" class=\"sf_colsOut sf_1col_1_100 mobile-sec \">\n        <div id=\"mainBodyPlaceholder_C199_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sfContentBlock\"><h1 class=\"mobile-title visible-smartphone\" style=\"text-align: left;\npadding-left: 0px; text-transform:uppercase; display:none;\">Cards ​Accepted</h1>\n\n\n</div>\n\n<div class=\"sf_cols mobile-expand\">\n    <div class=\"sf_colsOut sf_1col_1_100\">\n         <div id=\"mainBodyPlaceholder_C201_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sfContentBlock\"><div class=\"visible-desktop\">\n<table style=\"border:0; width:100%;\">\n    <tbody>\n        <tr>\n            <td><hr style=\"height:1px;border:none;color:#baa96f;background-color:#baa96f;\">\n            </td>\n            <td style=\"width:20%\">\n            <p style=\"text-align: center; font-weight:bold; margin-bottom: 15px;\">WE ACCEPT</p>\n            </td>\n            <td><hr style=\"height:1px;border:none;color:#baa96f;background-color:#baa96f;\">\n            </td>\n        </tr>\n    </tbody>\n</table>\n</div>\n<div class=\"visible-tablet\">\n<table style=\"border:0; width:100%;\">\n    <tbody>\n        <tr>\n            <td><hr style=\"height:1px;border:none;color:#baa96f;background-color:#baa96f;\">\n            </td>\n            <td style=\"width:20%\">\n            <p style=\"text-align: center; font-weight:bold; margin-bottom: 15px;\">WE ACCEPT</p>\n            </td>\n            <td><hr style=\"height:1px;border:none;color:#baa96f;background-color:#baa96f;\">\n            </td>\n        </tr>\n    </tbody>\n</table>\n</div>\n\n\n</div>\n\n<div class=\"sf_cols grid\">\n     <div class=\"sf_colsOut sf_3cols_1_33 col-4 col-md-3\">\n         <div id=\"mainBodyPlaceholder_C203_Col00\" class=\"sf_colsIn sf_3cols_1in_33\"><div class=\"sfContentBlock\"><div class=\"visible-desktop\">\n<p style=\"text-align: center;\"><img style=\"vertical-align: middle; margin: 10px 35px; width:80px; height:45px;\" title=\"card_visa\" alt=\"card_visa\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/card_visa.png?sfvrsn=4\"><img style=\"vertical-align: middle; margin: 10px 35px; width:75px; height:45px;\" title=\"card_mastercard\" alt=\"card_mastercard\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/card_mastercard.png?sfvrsn=4\"></p>\n</div>\n<div class=\"visible-tablet\">\n<p style=\"text-align: center;\"><img style=\"vertical-align: middle; margin: 10px 15px; width:80px; height:45px;\" title=\"card_visa\" alt=\"card_visa\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/card_visa.png?sfvrsn=4\"><img style=\"vertical-align: middle; margin: 10px 15px; width:75px; height:45px;\" title=\"card_mastercard\" alt=\"card_mastercard\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/card_mastercard.png?sfvrsn=4\"></p>\n</div>\n<div class=\"visible-smartphone\">\n<p style=\"text-align: center;\">\n<img style=\"vertical-align: middle; margin: 10px; width:20%;\" title=\"card_visa\" alt=\"card_visa\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/card_visa.png?sfvrsn=4\">\n<img style=\"vertical-align: middle; margin: 20px; width:20%;\" title=\"card_mastercard\" alt=\"card_mastercard\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/card_mastercard.png?sfvrsn=4\">\n<img style=\"vertical-align: middle; margin: 10px; width:20%;\" title=\"card_maestro\" alt=\"card_maestro\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/card_maestro.png?sfvrsn=4\">\n<img style=\"vertical-align: middle; margin: 10px 0 10px 15px; width:20%;\" title=\"card_unionpay\" alt=\"card_unionpay\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/card_unionpay.png?sfvrsn=4\">\n<img style=\"vertical-align: middle; margin: 10px 0 10px 30px; width:20%;\" title=\"card_skrill\" alt=\"card_skrill\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/card_skrill.png?sfvrsn=4\">\n<img style=\"vertical-align: middle; margin: 10px 0 10px 25px; width:30%;\" title=\"card_neteller\" alt=\"card_neteller\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/card_neteller.png?sfvrsn=4\">\n</p>\n</div>\n\n\n</div>\n         </div>\n     </div>\n    \n     <div class=\"sf_colsOut sf_3cols_2_34 col-4 col-md-3\">\n         <div id=\"mainBodyPlaceholder_C203_Col01\" class=\"sf_colsIn sf_3cols_2in_34\"><div class=\"sfContentBlock\"><div class=\"visible-desktop\">\n<p style=\"text-align: center;\"><img style=\"vertical-align: middle; margin: 10px 35px; width:75px; height:45px;\" title=\"card_maestro\" alt=\"card_maestro\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/card_maestro.png?sfvrsn=4\"><img style=\"vertical-align: middle; margin: 10px 35px; width:73px; height:45px;\" title=\"card_unionpay\" alt=\"card_unionpay\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/card_unionpay.png?sfvrsn=4\"></p>\n</div>\n<div class=\"visible-tablet\">\n<p style=\"text-align: center;\"><img style=\"vertical-align: middle; margin: 10px 15px; width:75px; height:45px;\" title=\"card_maestro\" alt=\"card_maestro\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/card_maestro.png?sfvrsn=4\"><img style=\"vertical-align: middle; margin: 10px 15px; width:73px; height:45px;\" title=\"card_unionpay\" alt=\"card_unionpay\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/card_unionpay.png?sfvrsn=4\"></p>\n</div>\n\n\n</div>\n         </div>\n     </div>\n\n    <div class=\"sf_colsOut sf_2cols_2_75 col-4 col-md-3\">\n         <div id=\"mainBodyPlaceholder_C203_Div1\" class=\"sf_colsIn sf_3cols_3in_33\"><div class=\"sfContentBlock\"><div class=\"visible-desktop\">\n<p style=\"text-align: center;\"><img style=\"vertical-align: middle; margin: 10px 30px; width:61px; height:45px;\" title=\"card_skrill\" alt=\"card_skrill\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/card_skrill.png?sfvrsn=4\"><img style=\"vertical-align: middle; margin: 10px 30px; width:118px; height:42px;\" title=\"card_neteller\" alt=\"card_neteller\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/card_neteller.png?sfvrsn=4\"></p>\n</div>\n<div class=\"visible-tablet\">\n<p style=\"text-align: center;\"><img style=\"vertical-align: middle; margin: 10px; width:61px; height:45px;\" title=\"card_skrill\" alt=\"card_skrill\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/card_skrill.png?sfvrsn=4\"><img style=\"vertical-align: middle; margin: 10px; width:121px; height:45px;\" title=\"card_neteller\" alt=\"card_neteller\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/card_neteller.png?sfvrsn=4\"></p>\n</div>\n\n\n</div>\n         </div>\n     </div>\n </div>\n         </div>\n     </div>\n </div>\n            \n        </div>\n    </div>\n</div>\n         </div>\n     </div>\n </div>\n            \n        </div>\n    </div>\n</div><div class=\"sf_cols\">\n    <div style=\"\" class=\"sf_colsOut sf_1col_1_100 s-sec s-aff-forex\">\n        <div id=\"mainBodyPlaceholder_C207_Col00\" class=\"sf_colsIn sf_1col_1in_100\">\n\n<div class=\"sf_cols\">\n     <div class=\"sf_colsOut sf_1col_1_100 inner\">\n         <div id=\"mainBodyPlaceholder_C209_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sf_cols\">\n    <div style=\"\" class=\"sf_colsOut sf_1col_1_100 mobile-sec s-aff-award\">\n        <div id=\"mainBodyPlaceholder_C208_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sfContentBlock\"><h1 class=\"mobile-title visible-smartphone\" style=\"text-align: left;\npadding-left: 0px; text-transform:uppercase; display:none;\">Our Awards</h1>\n\n\n</div>\n\n<div class=\"sf_cols mobile-expand\">\n    <div class=\"sf_colsOut sf_1col_1_100\">\n         <div id=\"mainBodyPlaceholder_C211_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sfContentBlock\"><div class=\"visible-desktop\" style=\"margin-bottom:30px;\">\n<table style=\"border:0; width:100%;\">\n    <tbody>\n        <tr>\n            <td><hr style=\"height:1px;border:none;color:#baa96f;background-color:#baa96f;\">\n            </td>\n            <td style=\"width:20%\">\n            <p style=\"text-align: center; font-weight:bold;\">OUR AWARDS</p>\n            </td>\n            <td><hr style=\"height:1px;border:none;color:#baa96f;background-color:#baa96f;\">\n            </td>\n        </tr>\n    </tbody>\n</table>\n</div>\n<div class=\"visible-tablet\" style=\"margin-bottom:30px;\">\n<table style=\"border:0; width:100%;\">\n    <tbody>\n        <tr>\n            <td><hr style=\"height:1px;border:none;color:#baa96f;background-color:#baa96f;\">\n            </td>\n            <td style=\"width:20%\">\n            <p style=\"text-align: center; font-weight:bold;\">OUR AWARDS</p>\n            </td>\n            <td><hr style=\"height:1px;border:none;color:#baa96f;background-color:#baa96f;\">\n            </td>\n        </tr>\n    </tbody>\n</table>\n</div>\n\n\n</div><div class=\"sf_cols visible-smartphone\">\n    <div style=\"\" class=\"sf_colsOut sf_1col_1_100\">\n        <div id=\"mainBodyPlaceholder_C213_Col00\" class=\"sf_colsIn sf_1col_1in_100\"><div class=\"sfContentBlock\"><p style=\"text-align: center;\">\n<img title=\"awards_shares2011\" alt=\"awards_shares2011\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/awards_shares2011.jpg?sfvrsn=4\" style=\"width:128px; height:113px;\">\n<img title=\"awards_shares2012\" alt=\"awards_shares2012\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/awards_shares2012.jpg?sfvrsn=4\" style=\"width:117px; height:113px;\">\n<img title=\"awards_money2012\" alt=\"awards_money2012\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/awards_money2012.jpg?sfvrsn=4\" style=\"width:74px; height:113px;\">\n<img title=\"awards_investmenttrends2011\" alt=\"awards_investmenttrends2011\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/awards_investmenttrends2011.jpg?sfvrsn=4\" style=\"width:178px; height:113px;\">\n<img title=\"awards_ukforex2013\" alt=\"awards_ukforex2013\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/awards_ukforex2013.jpg?sfvrsn=4\" style=\"width:179px; height:113px;\">\n</p>\n\n\n</div>\n            \n        </div>\n    </div>\n</div><div class=\"sf_cols visible-desktop\">\n    <div style=\"\" class=\"sf_colsOut sf_5cols_1_20\">\n        <div id=\"mainBodyPlaceholder_C214_Col00\" class=\"sf_colsIn sf_5cols_1in_20\"><div class=\"sfContentBlock\"><p style=\"text-align: center;\"><img title=\"awards_ukforex2013\" alt=\"awards_ukforex2013\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/awards_ukforex2013.jpg?sfvrsn=4\" style=\"width:179px; height:113px;\"></p>\n\n\n</div>\n            \n        </div>\n    </div>\n    <div style=\"\" class=\"sf_colsOut sf_5cols_2_20\">\n        <div id=\"mainBodyPlaceholder_C214_Col01\" class=\"sf_colsIn sf_5cols_2in_20\"><div class=\"sfContentBlock\"><p style=\"text-align: center;\"><img title=\"awards_shares2012\" alt=\"awards_shares2012\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/awards_shares2012.jpg?sfvrsn=4\" style=\"width:117px; height:113px;\"></p>\n\n\n</div>\n            \n        </div>\n    </div>\n    <div style=\"\" class=\"sf_colsOut sf_5cols_3_20\">\n        <div id=\"mainBodyPlaceholder_C214_Col02\" class=\"sf_colsIn sf_5cols_3in_20\"><div class=\"sfContentBlock\"><p style=\"text-align: center;\"><img title=\"awards_money2012\" alt=\"awards_money2012\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/awards_money2012.jpg?sfvrsn=4\" style=\"width:74px; height:113px;\"></p>\n\n\n</div>\n            \n        </div>\n    </div>\n    <div style=\"\" class=\"sf_colsOut sf_5cols_4_20\">\n        <div id=\"mainBodyPlaceholder_C214_Col03\" class=\"sf_colsIn sf_5cols_4in_20\"><div class=\"sfContentBlock\"><p style=\"text-align: center;\"><img title=\"awards_investmenttrends2011\" alt=\"awards_investmenttrends2011\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/awards_investmenttrends2011.jpg?sfvrsn=4\" style=\"width:178px; height:113px;\"></p>\n\n\n</div>\n            \n        </div>\n    </div>\n    <div style=\"\" class=\"sf_colsOut sf_5cols_5_20\">\n        <div id=\"mainBodyPlaceholder_C214_Col04\" class=\"sf_colsIn sf_5cols_5in_20\"><div class=\"sfContentBlock\"><p style=\"text-align: center;\"><img title=\"awards_shares2011\" alt=\"awards_shares2011\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/awards_shares2011.jpg?sfvrsn=4\" style=\"width:128px; height:113px;\"></p>\n\n\n</div>\n            \n        </div>\n    </div>\n</div><div class=\"sf_cols visible-tablet\">\n    <div style=\"\" class=\"sf_colsOut sf_5cols_1_20\">\n        <div id=\"mainBodyPlaceholder_C215_Col00\" class=\"sf_colsIn sf_5cols_1in_20\"><div class=\"sfContentBlock\"><p style=\"text-align: center;\"><img title=\"awards_ukforex2013\" alt=\"awards_ukforex2013\" displaymode=\"Original\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/awards_ukforex2013.jpg?sfvrsn=4\"></p>\n\n\n</div>\n            \n        </div>\n    </div>\n    <div style=\"\" class=\"sf_colsOut sf_5cols_2_20\">\n        <div id=\"mainBodyPlaceholder_C215_Col01\" class=\"sf_colsIn sf_5cols_2in_20\"><div class=\"sfContentBlock\"><p style=\"text-align: center;\"><img title=\"awards_shares2012\" alt=\"awards_shares2012\" displaymode=\"Original\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/awards_shares2012.jpg?sfvrsn=4\"></p>\n\n\n</div>\n            \n        </div>\n    </div>\n    <div style=\"\" class=\"sf_colsOut sf_5cols_3_20\">\n        <div id=\"mainBodyPlaceholder_C215_Col02\" class=\"sf_colsIn sf_5cols_3in_20\"><div class=\"sfContentBlock\"><p style=\"text-align: center;\"><img title=\"awards_investmenttrends2011\" alt=\"awards_investmenttrends2011\" displaymode=\"Original\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/awards_investmenttrends2011.jpg?sfvrsn=4\"></p>\n\n\n</div>\n            \n        </div>\n    </div>\n    <div style=\"\" class=\"sf_colsOut sf_5cols_4_20\">\n        <div id=\"mainBodyPlaceholder_C215_Col03\" class=\"sf_colsIn sf_5cols_4in_20\"><div class=\"sfContentBlock\"><p style=\"text-align: center;\"><img title=\"awards_shares2011\" alt=\"awards_shares2011\" displaymode=\"Original\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/awards_shares2011.jpg?sfvrsn=4\"></p>\n\n\n</div>\n            \n        </div>\n    </div>\n    <div style=\"\" class=\"sf_colsOut sf_5cols_5_20\">\n        <div id=\"mainBodyPlaceholder_C215_Col04\" class=\"sf_colsIn sf_5cols_5in_20\"><div class=\"sfContentBlock\"><p style=\"text-align: center;\"><img title=\"awards_money2012\" alt=\"awards_money2012\" displaymode=\"Original\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/Landing/global_markets/awards_money2012.jpg?sfvrsn=4\"></p>\n\n\n</div>\n            \n        </div>\n    </div>\n</div>\n         </div>\n     </div>\n </div>\n            \n        </div>\n    </div>\n</div>\n         </div>\n     </div>\n </div>\n            \n        </div>\n    </div>\n</div>\n         </div>\n     </div>\n </div>\n            \n        </div>\n    </div>\n</div><div class=\"sf_cols mobile-accordion\">\n    <div style=\"\" class=\"sf_colsOut sf_1col_1_100\" data-placeholder-label=\"Main section\">\n         <div id=\"mainBodyPlaceholder_TA1D12251020_Col00\" style=\"margin: 0px;\" class=\"sf_colsIn sf_1col_1in_100\">\n         </div>\n     </div>\n </div>\n            </main>\n\n            <footer class=\"foot\">\n                <div class=\"foot-top\">\n                    <div class=\"inner\">\n                        \n\n\n<div class=\"sf_cols grid\">\n     <div class=\"sf_colsOut sf_5cols_1_20 col-2 col-md-2\">\n         <div id=\"footerTopPlaceholder_TA1D12251005_Col00\" class=\"sf_colsIn sf_5col_1in_20\"><div class=\"sfContentBlock\"><h4><span style=\"display: block; font-weight: 400; margin: 0px auto; position: relative; text-transform: uppercase; width: 280px;\">About us <button class=\"ft-more visible-smartphone\"></button></span></h4>\n\n\n</div>\n\n\n\n\n<div class=\"sfNavWrp sfNavVerticalWrp \">\n    \n    \n    \n    \n\n    <ul class=\"sfNavVertical sfNavList\">\n        \n                            <li>\n                                <a href=\"https://www.etxcapital.co.uk/blog\">Blog</a>          \n                            </li>\n                         \n                            <li>\n                                <a href=\"http://www.etxaffiliates.com\" target=\"_blank\">Affiliates</a>          \n                            </li>\n                         \n                            <li>\n                                <a href=\"https://www.etxcapital.co.uk/about-us/platforms\">Platforms</a>          \n                            </li>\n                         \n                            <li>\n                                <a href=\"https://www.etxcapital.co.uk/about-us/education\">Education</a>          \n                            </li>\n                         \n                            <li>\n                                <a href=\"https://www.etxcapital.co.uk/about-us/meet-the-team\">Meet the Team</a>          \n                            </li>\n                         \n                            <li>\n                                <a href=\"https://www.etxcapital.co.uk/about-us/why-etx-capital\">Why ETX?</a>          \n                            </li>\n                         \n                            <li>\n                                <a href=\"http://www.etxcapitalgroup.com/\" target=\"_blank\">Corporate Website</a>          \n                            </li>\n                         \n                            <li>\n                                <a href=\"https://www.etxcapital.co.uk/about-us/partnerships\">Partnerships</a>          \n                            </li>\n                         \n                            <li>\n                                <a href=\"https://www.etxcapital.co.uk/about-us/payments\">Payments</a>          \n                            </li>\n                         \n                            <li>\n                                <a href=\"https://www.etxcapital.co.uk/about-us/about-us\">About Us</a>          \n                            </li>\n                         \n                            <li>\n                                <a href=\"https://www.etxcapital.co.uk/about-us/legal\">Legal</a>          \n                            </li>\n                         \n    </ul>\n</div>\n<div class=\"sfContentBlock\"><ul>\n    <li class=\"\">&nbsp;</li>\n    <li class=\"visible-desktop\"><img title=\"Cyber Essentials\" alt=\"Cyber Essentials\" displaymode=\"Original\" src=\"/images/default-source/blog/etx-uk/cyber-essentials-b-amp-w-small.jpg?sfvrsn=4\"></li>\n    <li class=\"visible-tablet\"><img title=\"Cyber Essentials\" alt=\"Cyber Essentials\" displaymode=\"Original\" src=\"/images/default-source/blog/etx-uk/cyber-essentials-b-amp-w-small.jpg?sfvrsn=4\"></li>\n    <li class=\"visible-smartphone\"><img title=\"Cyber Essentials\" alt=\"Cyber Essentials\" displaymode=\"Original\" src=\"/images/default-source/blog/etx-uk/cyber-essentials-b-amp-w-small.jpg?sfvrsn=4\"></li>\n</ul>\n\n\n</div>\n         </div>\n     </div>\n    \n     <div class=\"sf_colsOut sf_5cols_2_20 col-2 offset-1 col-md-2\">\n         <div id=\"footerTopPlaceholder_TA1D12251005_Col01\" class=\"sf_colsIn sf_5col_2in_20\"><div class=\"sfContentBlock\"><h4>\n<span style=\"display: block; font-weight: 400; margin: 0px auto; position: relative; text-transform: uppercase; width: 280px;\">Learn <button class=\"ft-more visible-smartphone\"></button></span>\n</h4>\n\n\n</div>\n\n\n\n\n<div class=\"sfNavWrp sfNavVerticalWrp \">\n    \n    \n    \n    \n\n    <ul class=\"sfNavVertical sfNavList\">\n        \n                            <li>\n                                <a href=\"https://www.etxcapital.co.uk/forex-trading/what-is-forex-trading\">What is Forex Trading?</a>          \n                            </li>\n                         \n                            <li>\n                                <a href=\"https://www.etxcapital.co.uk/spread-betting/what-is-spread-betting\">What is Spread Betting?</a>          \n                            </li>\n                         \n                            <li>\n                                <a href=\"https://www.etxcapital.co.uk/cfd-trading/what-is-cfd-trading\">What is CFD Trading?</a>          \n                            </li>\n                         \n                            <li>\n                                <a href=\"https://www.etxcapital.co.uk/binary-options/what-are-binary-options\">What are Binary Options?</a>          \n                            </li>\n                         \n                            <li>\n                                <a href=\"https://www.etxcapital.co.uk/equities-trading/what-are-equities\">What are Shares?</a>          \n                            </li>\n                         \n                            <li>\n                                <a href=\"https://www.etxcapital.co.uk/commodities-trading/what-are-commodities\">What is Commodities Trading?</a>          \n                            </li>\n                         \n                            <li>\n                                <a href=\"https://www.etxcapital.co.uk/indices-trading/what-are-indices\">What are Indices?</a>          \n                            </li>\n                         \n    </ul>\n</div>\n<div class=\"sfContentBlock\"><br>\n<br>\n<div class=\"visible-desktop\"><a href=\"http://www.etxaffiliates.com\" target=\"_blank\"><img title=\"ETX Affiliates\" alt=\"ETX Affiliates\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/etx_affiliates_white-150x30px.png?sfvrsn=4\" style=\"width:150px; height:30px;\"></a></div>\n<div class=\"visible-tablet\"><a href=\"http://www.etxaffiliates.com\" target=\"_blank\"><img title=\"ETX Affiliates\" alt=\"ETX Affiliates\" displaymode=\"Original\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/etx_affiliates_white-150x30px.png?sfvrsn=4\" style=\"width:150px; height:30px;\"></a></div>\n<div class=\"visible-smartphone\" style=\"display:none;\"><a href=\"http://www.etxaffiliates.com\" target=\"_blank\"><img title=\"ETX Affiliates\" alt=\"ETX Affiliates\" displaymode=\"Original\" src=\"https://cdn.monecor.com/sitefinity/images/default-source/ETX-Website-Assets/etx_affiliates_white-150x30px.png?sfvrsn=4\" style=\"width:150px; height:30px;\"></a></div>\n\n\n</div>\n         </div>\n     </div>\n  \n     <div class=\"sf_colsOut sf_5cols_3_20 col-2 offset-1 col-md-1 ft-socials\">\n         <div id=\"footerTopPlaceholder_TA1D12251005_Col02\" class=\"sf_colsIn sf_5col_3in_20\"><div class=\"sfContentBlock\"><h4>\n<span style=\"display: block; font-weight: 400; margin: 0px auto; position: relative; text-transform: uppercase; width: 280px;\">Social <button class=\"ft-more visible-smartphone\"></button></span>\n</h4>\n\n\n</div><div class=\"sfContentBlock\"><ul>\n    <li class=\"ft-s ft-fb\"><a href=\"https://www.facebook.com/ETXCapitalGroup?_rdr\" target=\"_blank\">Facebook</a></li>\n    <li class=\"ft-s ft-tw\"><a href=\"https://twitter.com/etxcapital?refId=20150226171322__916__\" target=\"_blank\">Twitter</a></li>\n    <li class=\"ft-s ft-yt\"><a href=\"https://www.youtube.com/user/ETXCapitalTV\" target=\"_blank\">Youtube</a></li>\n    <li class=\"ft-s ft-ln\"><a href=\"https://www.linkedin.com/company/etx-capital\" target=\"_blank\">LinkedIn</a></li>\n</ul>\n\n\n</div>\n         </div>\n     </div>\n  \n     <div class=\"sf_colsOut sf_5cols_4_20 col-2 col-md-2 ft-contact\">\n         <div id=\"footerTopPlaceholder_TA1D12251005_Col03\" class=\"sf_colsIn sf_5col_4in_20\"><div class=\"sfContentBlock\"><h4>\n<span style=\"display: block; font-weight: 400; margin: 0px auto; position: relative; text-transform: uppercase; width: 280px;\">Contact <button class=\"ft-more visible-smartphone\">\n</button></span></h4>\n\n\n</div><div class=\"sfContentBlock\"><ul>\n    <li>ETX Capital</li>\n    <li>One Broadgate</li>\n    <li>London</li>\n    <li>EC2M 2QS</li>\n    <li>&nbsp;</li>\n    <li><a href=\"/contact-us\">Contact Us</a></li>\n    <li>&nbsp;</li>\n    <li><a href=\"/about-us/legal/complaints\">Complaints</a></li>\n    <li>&nbsp;</li>\n    <li>\n    Monday to Friday<br>\n    7:30am - 9:00pm\n    <br>\n    (London time)\n    </li>\n    <li>&nbsp;</li>\n    <li><a href=\"tel:08001384582\">0800 138 4582</a>\n    <a href=\"tel:+44(0)2073921400\">+44 (0) 20 7392 1400</a>\n    </li>\n</ul>\n\n\n</div>\n         </div>\n     </div>\n  \n     <div class=\"sf_colsOut sf_5cols_5_20 col-2 col-md-2 ft-help\">\n         <div id=\"footerTopPlaceholder_TA1D12251005_Col04\" class=\"sf_colsIn sf_5col_5in_20\"><div class=\"sfContentBlock\"><h4>\n<span style=\"display: block; font-weight: 400; margin: 0px auto; position: relative; text-transform: uppercase; width: 280px;\">My Account <button class=\"ft-more visible-smartphone\"></button></span>\n</h4>\n\n\n</div><div class=\"sfContentBlock\"><ul>\n    <li><a href=\"/account/sign-up/?v=3&amp;Platform=TraderPro\">Trader Pro Sign up</a></li>\n    <li><a href=\"/account/sign-up/?v=3&amp;Platform=MT4-Spreadbet\">MT4 Sign up</a></li>\n    <li><a href=\"/account/sign-up/?v=3&amp;Platform=MarketsPulse\">Binary Sign up</a></li>\n    <li>&nbsp;</li>\n    <li><a href=\"/account/demo-sign-up?v=1&amp;Platform=TraderPro\">Trader Pro DEMO Sign Up</a></li>\n    <li><a href=\"/account/demo-sign-up?v=1&amp;Platform=MT4-Spreadbet\">MT4 DEMO Sign Up</a></li>\n    <li><a href=\"/account/demo-sign-up?v=1&amp;Platform=Binary\">Binary DEMO Sign Up</a></li>\n    <li>&nbsp;</li>\n    <li><a href=\"https://www.etxcapital.co.uk/account/sign-in\">Login</a></li>\n    <li>&nbsp;</li>\n    <li><a href=\"/support\">Support &amp; FAQ</a></li>\n</ul>\n\n\n</div>\n         </div>\n     </div>\n </div>\n                    </div>\n                    <!-- / inner -->\n                </div>\n                <!-- / foot-top -->\n\n                <div class=\"foot-bott\">\n                    <div class=\"inner\">\n                        \n<span id=\"footerBottomPlaceholder_TA1D12251027\">\n\n<div class=\"lang-picker\">\n<button id=\"footerBottomPlaceholder_TA1D12251027_ctl00_ctl00_selectorButton\">EN</button>\n    <div class=\"lang-wrapper\">\n    <ul>\n        \n                <li>\n                    <a href=\"https://www.etxcapital.com/home\" id=\"footerBottomPlaceholder_TA1D12251027_ctl00_ctl00_languagesRepeater_langLink_0\">English</a>\n                </li>\n            \n                <li>\n                    <a href=\"https://www.etxcapital.co.za/home\" id=\"footerBottomPlaceholder_TA1D12251027_ctl00_ctl00_languagesRepeater_langLink_1\">English (South Africa)</a>\n                </li>\n            \n                <li>\n                    <a href=\"https://www.etxcapital.ie/home\" id=\"footerBottomPlaceholder_TA1D12251027_ctl00_ctl00_languagesRepeater_langLink_2\">English (Ireland)</a>\n                </li>\n            \n                <li class=\"active\">\n                    <a href=\"https://www.etxcapital.co.uk/home\" id=\"footerBottomPlaceholder_TA1D12251027_ctl00_ctl00_languagesRepeater_langLink_3\">English (United Kingdom)</a>\n                </li>\n            \n                <li>\n                    <a href=\"https://www.etxcapital.fr/accueil\" id=\"footerBottomPlaceholder_TA1D12251027_ctl00_ctl00_languagesRepeater_langLink_4\">français</a>\n                </li>\n            \n                <li>\n                    <a href=\"https://www.etxcapital.de/home\" id=\"footerBottomPlaceholder_TA1D12251027_ctl00_ctl00_languagesRepeater_langLink_5\">Deutsch</a>\n                </li>\n            \n                <li>\n                    <a href=\"https://www.etxcapital.cz/domov\" id=\"footerBottomPlaceholder_TA1D12251027_ctl00_ctl00_languagesRepeater_langLink_6\">čeština</a>\n                </li>\n            \n                <li>\n                    <a href=\"https://www.etxcapital.pl/powitanie\" id=\"footerBottomPlaceholder_TA1D12251027_ctl00_ctl00_languagesRepeater_langLink_7\">polski</a>\n                </li>\n            \n                <li>\n                    <a href=\"https://www.etxcapital.it/home\" id=\"footerBottomPlaceholder_TA1D12251027_ctl00_ctl00_languagesRepeater_langLink_8\">italiano</a>\n                </li>\n            \n                <li>\n                    <a href=\"https://www.etxcapital.no/home\" id=\"footerBottomPlaceholder_TA1D12251027_ctl00_ctl00_languagesRepeater_langLink_9\">norsk, bokmål</a>\n                </li>\n            \n                <li>\n                    <a href=\"https://www.etxcapital.es/home\" id=\"footerBottomPlaceholder_TA1D12251027_ctl00_ctl00_languagesRepeater_langLink_10\">Español</a>\n                </li>\n            \n                <li>\n                    <a href=\"https://www.etxcapital.dk/hjem\" id=\"footerBottomPlaceholder_TA1D12251027_ctl00_ctl00_languagesRepeater_langLink_11\">dansk</a>\n                </li>\n            \n                <li>\n                    <a href=\"https://www.etxcapital.cn/home\" id=\"footerBottomPlaceholder_TA1D12251027_ctl00_ctl00_languagesRepeater_langLink_12\">中文</a>\n                </li>\n            \n                <li>\n                    <a href=\"https://www.etxcapital.gr/home\" id=\"footerBottomPlaceholder_TA1D12251027_ctl00_ctl00_languagesRepeater_langLink_13\">Ελληνικά</a>\n                </li>\n            \n                <li>\n                    <a href=\"https://www.etxcapital.sk/domov\" id=\"footerBottomPlaceholder_TA1D12251027_ctl00_ctl00_languagesRepeater_langLink_14\">slovenčina</a>\n                </li>\n            \n                <li>\n                    <a href=\"https://www.etxcapital.hu/honlapja\" id=\"footerBottomPlaceholder_TA1D12251027_ctl00_ctl00_languagesRepeater_langLink_15\">magyar</a>\n                </li>\n            \n    </ul>\n        <!-- / lang-wrapper -->\n</div>\n    <!-- / lang-picker -->\n    </div>\n<div id=\"footerBottomPlaceholder_TA1D12251027_ctl00_ctl00_contentPanel\"><p>Apple, iPad, iPhone and iPod touch, are trademarks of Apple Inc., registered in the U.S. and other countries. App Store is a service mark of Apple Inc. Google, the Google logo, Google Play logo and the Google interface are trademarks or registered trademarks of Google, Inc.</p>\n<br>\n<p>We use cookies to enhance your experience. By staying on our website you agree to our use of cookies.\n<a href=\"/about-us/legal/cookies\" class=\"more\">Find out about our cookie policy</a>.</p>\n<br>\n<p>Monecor (London) Ltd is a member firm of the London Stock Exchange. Authorised and regulated by the Financial Conduct Authority with Financial Services register number 124721. Please note: Binary Options are not a regulated product.\n</p>\n<br>\n<p>The information on this site is not directed at residents of the United States, Belgium, Canada, Singapore, or any particular country outside the UK and is not intended for distribution to, or use by, any person in any country or jurisdiction where such distribution or use would be contrary to local law or regulation.</p>\n<br>\n<div class=\"fb-copyrights\">\n<a href=\"/about-us/legal\">Terms of Use</a>\n<span>ETX Capital © 201​6</span>\n</div>\n<!-- / fb-copyrights --></div>\n\n\n\n\n\n</span><div class=\"sfContentBlock\"><div class=\"sticky-message\">\n<div class=\"inner\">\n<p class=\"hidden-smartphone\"><strong>The leveraged trading products available on this website are not appropriate for everyone. It is possible for losses to exceed your account balance. Do not trade with funds you cannot afford to lose and seek advice if you do not understand the risks.</strong></p>\n<p class=\"visible-smartphone\"><strong>Leveraged trading is high risk. Your losses can exceed your deposits.</strong></p>\n</div>\n</div>\n\n\n</div>\n                    </div>\n                    <!-- / inner -->\n                </div>\n                <!-- / foot-bott -->\n            </footer>\n            <!-- / foot -->\n        </div>\n        <!-- / container -->\n    \n<script type=\"text/javascript\" src=\"https://cdn.monecor.com/ETX-F5/bower_components/iframe-resizer/js/iframeResizer.min.js\"></script><script type=\"text/javascript\">iFrameResize({log: true, enablePublicMethods: true});</script><script type=\"text/javascript\" src=\"/CustomResources/js/ParameterEvaluator.js\"></script><script type=\"text/javascript\" src=\"/CustomResources/js/SignUpParameters.js\"></script><script type=\"text/javascript\" src=\"/Content/Scripts/webslidemenu.js\"></script>\n<script type=\"text/javascript\">\n//<![CDATA[\nvar sf_appPath='/';;(function() {\n                        function loadHandler() {\n                            var hf = $get('ctl08_TSSM');\n                            if (!hf._RSSM_init) { hf._RSSM_init = true; hf.value = ''; }\n                            hf.value += ';Telerik.Sitefinity.Resources, Version=9.2.6200.0, Culture=neutral, PublicKeyToken=b28c218413bdf563:en-GB:9540f265-c918-463e-95d1-134a48200f7f:7a90d6a:83fa35c7';\n                            Sys.Application.remove_load(loadHandler);\n                        };\n                        Sys.Application.add_load(loadHandler);\n                    })();//]]>\n</script>\n</form><script type=\"text/javascript\" id=\"\" src=\"//platform.twitter.com/oct.js\"></script><script type=\"text/javascript\" id=\"\">(function(b,c,e,g,d){var f,a;b[d]=b[d]||[];f=function(){var a={ti:\"4031039\"};a.q=b[d];b[d]=new UET(a);b[d].push(\"pageLoad\")};a=c.createElement(e);a.src=g;a.async=1;a.onload=a.onreadystatechange=function(){var b=this.readyState;b&&\"loaded\"!==b&&\"complete\"!==b||(f(),a.onload=a.onreadystatechange=null)};c=c.getElementsByTagName(e)[0];c.parentNode.insertBefore(a,c)})(window,document,\"script\",\"//bat.bing.com/bat.js\",\"uetq\");</script>\n<noscript>&lt;img src=\"//bat.bing.com/action/0?ti=4031039&amp;amp;Ver=2\" height=\"0\" width=\"0\" style=\"display:none; visibility: hidden;\"&gt;</noscript>\n<script type=\"text/javascript\" id=\"\">!function(b,e,f,g,a,c,d){b.fbq||(a=b.fbq=function(){a.callMethod?a.callMethod.apply(a,arguments):a.queue.push(arguments)},b._fbq||(b._fbq=a),a.push=a,a.loaded=!0,a.version=\"2.0\",a.queue=[],c=e.createElement(f),c.async=!0,c.src=g,d=e.getElementsByTagName(f)[0],d.parentNode.insertBefore(c,d))}(window,document,\"script\",\"//connect.facebook.net/en_US/fbevents.js\");fbq(\"init\",\"808534595842409\");fbq(\"track\",\"PageView\");</script>\n<noscript>&lt;img height=\"1\" width=\"1\" style=\"display:none\" src=\"https://www.facebook.com/tr?id=808534595842409&amp;amp;ev=PageView&amp;amp;noscript=1\"&gt;</noscript>\n\n<script type=\"text/javascript\" id=\"\" src=\"//platform.twitter.com/oct.js\"></script>\n<script type=\"text/javascript\">\npiAId = '54012';\npiCId = '1610';\n\n(function() {\n\tfunction async_load(){\n\t\tvar s = document.createElement('script'); s.type = 'text/javascript';\n\t\ts.src = ('https:' == document.location.protocol ? 'https://pi' : 'http://cdn') + '.pardot.com/pd.js';\n\t\tvar c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);\n\t}\n\tif(window.attachEvent) { window.attachEvent('onload', async_load); }\n\telse { window.addEventListener('load', async_load, false); }\n})();\n</script>\n<script type=\"text/javascript\">\n\tStatsClient.LogVisit('3a11f827-68d0-68c1-9ecd-ff0000969874', '5de2f18c-ddf9-4534-8c96-c3d36527cd80');\n</script>\n\n<div style=\"width:0px; height:0px; display:none; visibility:hidden;\" id=\"batBeacon0.25535580172839234\"><img style=\"width:0px; height:0px; display:none; visibility:hidden;\" id=\"batBeacon0.5901643258781999\" width=\"0\" height=\"0\" alt=\"\" src=\"https://bat.bing.com/action/0?ti=4031039&amp;Ver=2&amp;mid=eb5a5a54-b05a-a36a-2813-629dd9a9d11e&amp;evt=pageLoad&amp;sid=61f1c618-1&amp;lt=2448&amp;pi=0&amp;lg=en-US&amp;sw=1280&amp;sh=1024&amp;sc=24&amp;tl=Forex, Spread betting &amp; CFD Trading UK | ETX Capital&amp;p=https%3A%2F%2Fwww.etxcapital.co.uk%2F&amp;r=&amp;rn=977775\"></div>\n<script type=\"text/javascript\" id=\"\">twttr.conversion.trackPid(\"l5fgl\");</script>\n<noscript>\n&lt;img height=\"1\" width=\"1\" style=\"display:none;\" alt=\"\" src=\"https://analytics.twitter.com/i/adsct?txn_id=l5fgl&amp;amp;p_id=Twitter\"&gt;\n&lt;img height=\"1\" width=\"1\" style=\"display:none;\" alt=\"\" src=\"//t.co/i/adsct?txn_id=l5fgl&amp;amp;p_id=Twitter\"&gt;</noscript>\n<script type=\"text/javascript\" id=\"\">twttr.conversion.trackPid(\"nuvws\",{tw_sale_amount:0,tw_order_quantity:0});</script>\n<noscript>\n&lt;img height=\"1\" width=\"1\" style=\"display:none;\" alt=\"\" src=\"https://analytics.twitter.com/i/adsct?txn_id=nuvws&amp;amp;p_id=Twitter&amp;amp;tw_sale_amount=0&amp;amp;tw_order_quantity=0\"&gt;\n&lt;img height=\"1\" width=\"1\" style=\"display:none;\" alt=\"\" src=\"//t.co/i/adsct?txn_id=nuvws&amp;amp;p_id=Twitter&amp;amp;tw_sale_amount=0&amp;amp;tw_order_quantity=0\"&gt;\n</noscript>\n</body>"}
