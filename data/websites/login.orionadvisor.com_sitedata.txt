{"link":"https://login.orionadvisor.com/","html":"<head><style type=\"text/css\">@charset \"UTF-8\";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\">\n\n    <title>LOGIN</title>\n\n    <style type=\"text/css\">\n        .ng-cloak {\n            display: none !important;\n        }\n    </style>\n\n    <link rel=\"stylesheet\" href=\"styles/css/site.min.css\">\n\n\n    <style type=\"text/css\">\n        form {\n            position: absolute;\n            top: 0;\n            bottom: 0;\n            left: 0;\n            right: 0;\n            margin: auto;\n            padding: 0;\n        }\n\n        a {\n            cursor: pointer;\n        }\n\n        iframe[seamless] {\n            border: 0;\n            width: 100%;\n        }\n\n        .form-section.ng-enter, .form-section.ng-leave {\n            transition: all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n            position: absolute;\n            left: 15px;\n            right: 15px;\n        }\n\n        .form-section.ng-enter,\n        .form-section.ng-leave.ng-leave-active {\n            opacity: 0;\n        }\n\n        .form-section.ng-leave,\n        .form-section.ng-enter.ng-enter-active {\n            opacity: 1;\n        }\n\n        /* for IE9 placeholder polyfill */\n        .empty {\n            color: #999;\n        }\n\n        /* bootstrap ui datepicker */\n        table[dp] {\n            margin: 0 5px;\n        }\n\n        table[dp] button {\n            color: #333;\n            padding: 2px 7px;\n        }\n\n        table[dp] .btn-info {\n            color: #FFF;\n            font-weight: bold;\n            background-color: #999999;\n            box-shadow: none;\n            border-radius: 2px !important;\n        }\n\n        /* end - bootstrap ui datepicker */\n    </style>\n</head>\n<body class=\"ng-scope\" ng-controller=\"AppCtrl\">\n\n<form class=\"form-horizontal ng-pristine ng-valid\" ng-style=\"{height: current.formHeight}\" style=\"height: 400px;\">\n    <!-- ngIf: !current.hideLogo && current.mainLogoUrl -->\n    <!-- ngIf: current.loginMsgs.length -->\n    <ng-switch on=\"current.mode\">\n        <!-- ngSwitchWhen: login-old -->\n        <!-- ngSwitchWhen: login --><div ng-switch-when=\"login\" class=\"form-section ng-scope\">\n            <div class=\"form-group\">\n                <label class=\"sr-only\" for=\"txtUsername\">Username</label>\n                <div class=\"col-sm-8 col-sm-offset-4 col-md-6 col-md-offset-5 col-lg-4 col-lg-offset-6\">\n                    <input id=\"txtUsername\" type=\"text\" class=\"form-control ng-pristine ng-untouched ng-valid\" placeholder=\"Username\" ng-model=\"current.username\">\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label class=\"sr-only\" for=\"txtPassword\">Password</label>\n                <div class=\"col-sm-8 col-sm-offset-4 col-md-6 col-md-offset-5 col-lg-4 col-lg-offset-6\">\n                    <input id=\"txtPassword\" type=\"password\" class=\"form-control ng-pristine ng-untouched ng-valid\" placeholder=\"Password\" ng-model=\"current.password\">\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <div class=\"col-sm-8 col-sm-offset-4 col-md-6 col-md-offset-5 col-lg-4 col-lg-offset-6\">\n                    <div class=\"checkbox text-center\">\n                        <label>\n                            <input type=\"checkbox\" ng-model=\"current.rememberDevice\" class=\"ng-pristine ng-untouched ng-valid\"> Remember My Device\n                        </label>\n                    </div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <div class=\"col-sm-8 col-sm-offset-4 col-md-6 col-md-offset-5 col-lg-4 col-lg-offset-6\">\n                    <button type=\"submit\" ng-click=\"login()\" class=\"btn btn-lg btn-primary btn-block\" ng-style=\"{'background-color': current.primaryBgColor, 'border-color': current.primaryBgColor}\" ng-disabled=\"mainTracker.active()\" style=\"background-color: rgb(119, 119, 119); border-color: rgb(119, 119, 119);\">\n                        <i class=\"fa\" ng-class=\"{'fa-spinner fa-spin': mainTracker.active()}\"></i> Sign In\n                    </button>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <div class=\"col-sm-8 col-sm-offset-4 col-md-6 col-md-offset-5 col-lg-4 col-lg-offset-6 text-center\" ng-class=\"{'text-center': !createLoginOptions || createLoginOptions.count == 0}\">\n                    <!-- ngIf: createLoginOptions.count > 0 -->\n                    <a ng-click=\"toggleForgotPassword()\">Forgot password?</a>\n                </div>\n            </div>\n        </div><!-- end ngSwitchWhen: -->\n        <!-- ngSwitchWhen: twoFactorPrompt -->\n        <!-- ngSwitchWhen: twoFactorCode -->\n        <!-- ngSwitchWhen: forgot -->\n        <!-- ngSwitchWhen: reset -->\n        <!-- ngSwitchWhen: createLogin -->\n    </ng-switch>\n</form>\n\n<script type=\"text/javascript\" async=\"\" src=\"https://www.gstatic.com/recaptcha/api2/r20170411114922/recaptcha__en.js\"></script><script src=\"https://www.google.com/recaptcha/api.js?render=explicit\" async=\"\" defer=\"\"></script>\n\n<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.4.7/angular.min.js\"></script>\n<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.4.7/angular-animate.min.js\"></script>\n<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.4.7/angular-sanitize.min.js\"></script>\n<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.4.7/angular-touch.min.js\"></script>\n\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/sugar/1.4.1/sugar-full.min.js\"></script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.13.3/ui-bootstrap-tpls.min.js\"></script>\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/iframe-resizer/2.6.1/iframeResizer.min.js\"></script><!-- TODO Update -->\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/highcharts/4.0.4/highcharts.js\"></script>\n\n<script src=\"app/lib.min.js\"></script>\n\n\n<script type=\"text/javascript\">\n    var onloadCallback = function () {\n        if (!document.getElementById('html_element').firstChild) {\n            widget1 = grecaptcha.render('html_element', {\n                'sitekey': '6LfcFv4SAAAAAJlqVEXmoz2VjYuG6YJqjKK0bTTU'\n            });\n        }\n    };\n</script>\n\n<script type=\"text/javascript\">\n    'use strict';\n\n    var app = angular.module('orionLogin', ['ngAnimate', 'ngTouch', 'ui.bootstrap', 'ng.shims.placeholder', 'ajoslin.promise-tracker']);\n\n    app.config(function ($httpProvider, datepickerConfig, datepickerPopupConfig) {\n        $httpProvider.interceptors.push('httpGlobalInterceptor');\n        $httpProvider.defaults.headers.get = {'Cache-Control': 'no-cache', Pragma: 'no-cache'};\n\n        datepickerConfig.showWeeks = false;\n        datepickerConfig.maxDate = Date.create('today');\n        datepickerPopupConfig.showButtonBar = false;\n        datepickerPopupConfig.datepickerPopup = 'MM/dd/yyyy';\n        datepickerPopupConfig.appendToBody = true;\n    });\n\n    app.factory('httpGlobalInterceptor', function httpGlobalInterceptor(APP_CONFIG) {\n        return {\n            request: function (config) {\n                var url = config.url;\n                if (url.startsWith(\"/\") && !url.startsWith(\"//\")) {\n                    config.url = APP_CONFIG.baseApiUrl + url;\n                    config.headers.App = \"OrionLogin\";\n                    config.headers.AppPath = \"login.html\";\n                }\n\n                return config;\n            }\n        };\n    });\n\n    app.run(function ($rootScope, $templateCache, promiseTracker) {\n        $rootScope.mainTracker = promiseTracker('main');\n\n        ['day', 'month', 'year'].forEach(function (type) {\n            var datePicker = $templateCache.get('template/datepicker/' + type + '.html');\n            datePicker = datePicker.replace(\"<table \", \"<table dp \").replace(/glyphicon/g, \"fa\").replace(/btn-default/g, \"btn-link\").replace(/btn-sm/g, \"btn-xs\");\n            $templateCache.put('template/datepicker/' + type + '.html', datePicker);\n        });\n    });\n\n    app.controller(\"AppCtrl\", function AppCtrl($scope, $sce, $http, $q, APP_CONFIG) {\n        //REGISTER FOR IFRAME MESSAGES\n        var eventMethod = window.addEventListener ? \"addEventListener\" : \"attachEvent\";  //Good browsers or IE\n        var eventer = window[eventMethod];\n        var messageEvent = eventMethod == \"attachEvent\" ? \"onmessage\" : \"message\";     //IE or good browser\n\n        eventer(messageEvent, function (e) {\n            if (e.origin === 'https://auth.orionadvisor.com' && !e.data.startsWith(\"[iFrameSizer]\")) {\n                $scope.hideSecureAuthFrame = true;\n                redirect(e.data);\n            }\n        }, false);\n\n\n        //PRIVATE VARIABLES\n        var ALERT_MSGS = {\n            expiredPassword: {type: 'warning', icon: 'fa-exclamation-circle', title: 'Expired Password', msg: \"Your password has expired.  Please enter a new password.\"},\n            userProfile: {type: 'warning', icon: 'fa-exclamation-circle', title: 'Uh oh!', msg: \"We were unable to load your user information.  Please try again or contact your advisor if the problem persists.\"},\n            inactiveUser: {type: 'warning', icon: 'fa-exclamation-circle', title: 'Uh oh!', msg: \"This user account is inactive.  Please contact your advisor.\"},\n            invalidLogin: {type: 'danger', icon: 'fa-exclamation-triangle', title: 'Uh oh!', msg: \"You entered an invalid username and/or password.  Please try again.\"},\n            internalServer: {type: 'danger', icon: 'fa-exclamation-triangle', title: 'Uh oh!', msg: \"An internal server error occurred.  Please try again or contact your advisor if the problem persists.\"},\n            unknownError: {type: 'danger', icon: 'fa-exclamation-triangle', title: 'Uh oh!', msg: \"An unexpected error occurred.  Please try again or contact your advisor if the problem persists.\"},\n            resetInstructions: {type: 'info', icon: 'fa-info-circle', title: 'Heads up!', msg: \"You will receive an e-mail from portal@orionadvisor.com shortly.  Follow the link in the e-mail to set your password.\"},\n            createUserError: {type: 'danger', icon: 'fa-exclamation-triangle', title: 'Uh oh!', msg: \"The following error has occurred: Please address the error or contact your advisor if the problem persists.\"},\n            mismatchPassword: {type: 'danger', icon: 'fa-exclamation-triangle', title: 'Uh oh!', msg: \"The password fields must match.\"},\n            passwordReset: {type: 'success', icon: 'fa-info-circle', title: 'Success!', msg: \"Your password has been reset.  Please login.\"},\n            invalidSecurityAnswer: {type: 'danger', icon: 'fa-exclamation-triangle', title: 'Uh oh!', msg: \"The answer to your security question is incorrect or your new password does not meet the minimum criteria below.\"},\n            invalidNewPassword: {type: 'danger', icon: 'fa-exclamation-triangle', title: 'Uh oh!', msg: \"Your new password does not meet the minimum criteria below.\"},\n            invalidTwoFactorCode: {type: 'danger', icon: 'fa-exclamation-triangle', title: 'Uh oh!', msg: \"The code you entered is invalid or has expired. Please try again.\"},\n            invalidAdvisorNumber: {type: 'danger', icon: 'fa-exclamation-triangle', title: 'Uh oh!', msg: \"The advisor number you entered is invalid. Please try again.\"},\n            resetExpired: {type: 'danger', icon: 'fa-exclamation-triangle', title: 'Link Expired', msg: \"The reset period has ended. The email will need to be resent.\"}\n        };\n        var params,\n            currentTempPassword,\n            twoFactorToken;\n\n\n        //PRIVATE METHODS\n        function init() {\n            var getParameterByName = function (name) {\n                name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");\n                var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n                    results = regex.exec(window.location.search);\n                return results == null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n            };\n\n            params = {\n                action: getParameterByName(\"a\"),\n                reset: getParameterByName(\"reset\"),\n                page: getParameterByName(\"p\"),\n                site: getParameterByName(\"s\"),\n                dbGuid: getParameterByName(\"g\"),\n                color: getParameterByName(\"c\") || \"#777777\",\n                entity: getParameterByName(\"e\"),\n                entityId: getParameterByName(\"i\"),\n                hideLogo: getParameterByName(\"l\"),\n                margin: getParameterByName(\"m\")\n            };\n\n            if (!params.color.startsWith(\"#\")) {\n                params.color = \"#\" + params.color;\n            }\n\n            if (params.reset) {\n                $http.get(\"/Public/SecurityQuestion/\" + params.reset)\n                    .then(function (response) {\n                        var data = response.data;\n                        $scope.current.securityQuestion = data.securityQuestion;\n                        $scope.current.entityEnum = data.entity;\n                    });\n\n                $scope.current.mode = 'reset';\n\n                if (params.site) {  //then user was redirected here from a 'password expired' response from within an app\n                    $scope.current.loginMsgs.push(ALERT_MSGS.expiredPassword);\n                }\n            }\n\n            if (params.dbGuid) {\n                localStorage.oas_alc = params.dbGuid;\n            }\n\n            if (localStorage.oas_alc) {\n                $scope.current.mainLogoUrl = \"/Public/Databases/\" + localStorage.oas_alc + \"/Image\";\n\n                $http.get(\"/Public/Databases/\" + localStorage.oas_alc)\n                    .then(function (response) {\n                        var options = response.data.createLoginOptions;\n                        options.count = 0;\n\n                        if (options.client !== 'None') {\n                            options.count += 1;\n                            $scope.userToCreate.entity = \"Client\";\n                        }\n\n                        if (options.representative !== \"None\") {\n                            options.count += 1;\n                            if (!$scope.userToCreate.entity) {\n                                $scope.userToCreate.entity = \"Representative\";\n                            }\n                        }\n\n                        if (params.action === 'create' && options.count > 0) {\n                            $scope.current.mode = 'createLogin';\n                            setTimeout(onloadCallback);\n                        }\n\n                        $scope.createLoginOptions = options;\n                    });\n            }\n\n            if (params.entity && params.entityId) {\n                localStorage.oas_portal_theme = JSON.stringify({primaryBgColor: params.color, entity: params.entity, entityId: params.entityId});\n            }\n\n            if (localStorage.oas_portal_theme) {\n                var theme = JSON.parse(localStorage.oas_portal_theme);\n                $scope.current.primaryBgColor = theme.primaryBgColor;\n                if ($scope.current.mainLogoUrl) {\n                    $scope.current.mainLogoUrl += \"?entity=\" + (theme.entity || '') + \"&entityId=\" + (theme.entityId || '');\n                }\n            } else {\n                $scope.current.primaryBgColor = params.color;\n            }\n\n            if (params.hideLogo) {\n                $scope.current.hideLogo = true;\n            }\n\n            if (!params.margin) {\n                $scope.current.formHeight = \"400px\";\n            }\n\n            if (!localStorage.oas_device_id) {\n                localStorage.oas_device_id = randomString(255);\n            }\n        }\n\n        function redirect(token) {\n            if (params.action === \"saml\" && params.page) {\n                window.top.location.href = params.page + \"?t=\" + token;\n                return;\n            }\n\n            $http.defaults.headers.common.Authorization = 'Session ' + token;\n\n            $http.get(\"/Authorization/User?forMobileApp=false\", {tracker: 'main'})\n                .then(function (response) {\n                    var user = response.data;\n                    var isClient = user.entity === \"Household\";\n                    localStorage.oas_alc = user.alClientGuid;\n\n                    var promises = {primaryBgColor: $http.get(\"/Settings/CustomSettings/theme-primary-bg-color\", {tracker: 'main'})};\n                    if (!params.page) {\n                        promises.landingPage = $http.get(isClient ? \"/Settings/CustomSettings/default-landing-page\" : \"/Settings/UserOptions/main_menu_apps\", {tracker: 'main'});\n                    }\n\n                    var redirectUrl;\n\n                    $q.all(promises)\n                        .then(function (responses) {\n                            var theme = {primaryBgColor: responses.primaryBgColor.data.value, entity: user.entity, entityId: user.entityId};\n                            if (responses.landingPage) {\n                                if (isClient) {\n                                    theme.landingPage = responses.landingPage.data.value;\n                                    params.site = \"portal\";\n                                    params.page = theme.landingPage;\n                                } else if (responses.landingPage.data.value) {\n                                    var app = JSON.parse(responses.landingPage.data.value).defaultApp;\n\n                                    if (app) {\n                                        app.routeUrl = app.routeUrl.replace('[TOKEN]', token)\n                                            .replace('[BASEURL]', APP_CONFIG.baseApiUrl)\n                                            .replace('[HIDDENLEVERAPIKEY]', APP_CONFIG.hiddenLeversApiKey)\n                                            .replace('[USERDETAILID]', user.loginUserId + \"_\" + user.userDetailId);\n\n                                        switch (app.ssoType) {\n                                            case \"None\":\n                                                params.site = \"orion-app\";\n                                                params.page = app.routeUrl.from(1);\n                                                break;\n                                            case \"NewTabRedirect\":\n                                                redirectUrl = app.routeUrl;\n                                                break;\n                                            case \"Portal\":  // = Rep Portal\n                                                redirectUrl = app.routeUrl + token;\n                                                break;\n                                        }\n                                    }\n                                }\n                            }\n                            localStorage.oas_portal_theme = JSON.stringify(theme);\n                        })\n                        .finally(function () {\n                            if (!redirectUrl) {\n                                redirectUrl = (isClient ? APP_CONFIG.portalUrl : APP_CONFIG.oasAppUrl) + \"?t=\" + token;\n\n                                if (params.site && params.page) {\n                                    if ((isClient && params.site === \"portal\") || (!isClient && params.site === \"orion-app\")) {\n                                        redirectUrl += \"&p=\" + params.page;\n                                    }\n                                }\n                            }\n\n                            window.top.location.href = redirectUrl;\n                        });\n                })\n                .catch(function () {\n                    $scope.current.loginMsgs.push(ALERT_MSGS.userProfile);\n                });\n        }\n\n        function randomString(len, charSet) {\n            charSet = charSet || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\n            var randomString = '';\n            for (var i = 0; i < len; i++) {\n                var randomPoz = Math.floor(Math.random() * charSet.length);\n                randomString += charSet.substring(randomPoz, randomPoz + 1);\n            }\n            return randomString;\n        }\n\n\n        //PUBLIC METHODS\n        $scope.login = function () {\n            localStorage.oas_username = $scope.current.username;\n\n            var headers = {Authorization: \"Basic \" + ($scope.current.username + \":\" + $scope.current.password).encodeBase64()};\n            if ($scope.current.rememberDevice) {\n                headers.DeviceId = localStorage.oas_device_id;\n            }\n\n            $http.get(\"/security/token\", {tracker: 'main', headers: headers})\n                .then(function (response) {\n                    var twoFactorMethods = response.data.two_factor_opts;\n\n                    if (twoFactorMethods) {\n                        twoFactorToken = response.data.access_token;\n\n                        $scope.toggleTwoFactorPrompt();\n\n                        $scope.twoFactorMethods = {\n                            list: twoFactorMethods,\n                            selected: twoFactorMethods.length ? twoFactorMethods[0].type : null\n                        };\n                    } else {\n                        redirect(response.data.access_token);\n                    }\n                })\n                .catch(function (response) {\n                    var msg;\n                    switch (response.status) {\n                        case 401:\n                            //check for reset header (safari 8+ eats the custom status text)\n                            var statusText = response.headers().reset ? \"password expired\" : response.statusText.toLowerCase();\n\n                            switch (statusText) {\n                                case \"password expired\":\n                                    msg = ALERT_MSGS.expiredPassword;\n                                    currentTempPassword = $scope.current.password;\n                                    $scope.current.mode = 'reset';\n                                    break;\n                                case \"user inactive\":\n                                    msg = ALERT_MSGS.inactiveUser;\n                                    break;\n                                default:\n                                    msg = ALERT_MSGS.invalidLogin;\n                            }\n                            break;\n                        case 500:\n                            msg = ALERT_MSGS.internalServer;\n                            break;\n                        default:\n                            msg = ALERT_MSGS.unknownError;\n                    }\n\n                    $scope.current.loginMsgs.push(msg);\n                    $scope.current.password = null;\n                });\n        };\n\n        $scope.sendTwoFactorCode = function () {\n            var headers = {Authorization: \"Session \" + twoFactorToken};\n\n            $http.post(\"/security/token/sendtwofactorcode?deliveryType=\" + $scope.twoFactorMethods.selected, null, {tracker: 'main', headers: headers})\n                .then(function () {\n                    $scope.current.mode = 'twoFactorCode';\n                })\n                .catch(function () {\n                    $scope.current.loginMsgs.push(ALERT_MSGS.unknownError);\n                });\n        };\n\n        $scope.submitTwoFactorCode = function () {\n            var headers = {Authorization: \"2FA \" + twoFactorToken + '|' + $scope.current.twoFactorCode};\n            if ($scope.current.rememberDevice) {\n                headers.DeviceId = localStorage.oas_device_id;\n            }\n\n            $http.get(\"/security/token\", {tracker: 'main', headers: headers})\n                .then(function (response) {\n                    redirect(response.data.access_token);\n                })\n                .catch(function () {\n                    $scope.current.twoFactorCode = null;\n                    $scope.current.loginMsgs.push(ALERT_MSGS.invalidTwoFactorCode);\n                });\n        };\n\n        $scope.deleteMsg = function (index) {\n            $scope.current.loginMsgs.splice(index, 1);\n        };\n\n        $scope.toggleForgotPassword = function () {\n            $scope.current.loginMsgs.length = 0;\n            $scope.current.password = null;\n            $scope.current.mode = $scope.current.mode === 'login' ? 'forgot' : 'login';\n        };\n\n        $scope.toggleTwoFactorPrompt = function () {\n            $scope.current.loginMsgs.length = 0;\n            $scope.current.mode = 'twoFactorPrompt';\n        };\n\n        $scope.sendPasswordLink = function () {\n            $http.post('/Public/RequestForgotPassword/' + $scope.current.username + '?urlId=1', null, {tracker: 'main'})\n                .then(function () {\n                    $scope.current.loginMsgs.push(ALERT_MSGS.resetInstructions);\n                    $scope.current.mode = 'login';\n                })\n                .catch(function (response) {\n                    var data = response.data;\n                    $scope.current.loginMsgs.push(data && data.userException ? data.userException.detail : ALERT_MSGS.unknownError);\n                });\n        };\n\n        $scope.resetPassword = function () {\n            if ($scope.current.password !== $scope.current.password2) {\n                $scope.current.loginMsgs.push(ALERT_MSGS.mismatchPassword);\n                return;\n            }\n\n            var headers = {\n                Authorization: params.reset ? \"Forgot \" + params.reset : \"Basic \" + ($scope.current.username + \":\" + currentTempPassword).encodeBase64(),\n                ChangePassword: $scope.current.password2.encodeBase64()\n            };\n\n            if ($scope.current.securityQuestion) {\n                headers.SecurityAnswer = $scope.current.securityAnswer.encodeBase64();\n            }\n\n            if ($scope.current.advisorNumber){\n                headers.AdvisorNumber = $scope.current.advisorNumber;\n            }\n\n            $http.get(\"/security/token\", {tracker: 'main', headers: headers})\n                .then(function () {\n                    $scope.current.loginMsgs = [];\n                    $scope.current.loginMsgs.push(ALERT_MSGS.passwordReset);\n                    $scope.current.mode = 'login';\n                })\n                .catch(function (response) {\n                    var msg = ALERT_MSGS.unknownError;\n\n                    if (response.status === 401) {\n                        msg = ALERT_MSGS[response.statusText.camelize(false)];\n                        if (!msg) {\n                            msg = ALERT_MSGS.invalidNewPassword;\n                        }\n                    }\n\n                    $scope.current.loginMsgs.push(msg);\n                });\n        };\n\n        $scope.toggleCreateLogin = function () {\n            $scope.current.loginMsgs.length = 0;\n            $scope.current.password = null;\n            $scope.current.mode = $scope.current.mode === 'login' ? 'createLogin' : 'login';\n\n            setTimeout(onloadCallback);\n        };\n\n        $scope.createUser = function () {\n            $scope.userToCreate.username = $scope.current.username;\n            $scope.userToCreate.captchaResponse = grecaptcha.getResponse(widget1);\n\n            $http.post('/Public/User/' + localStorage.oas_alc, $scope.userToCreate, {tracker: 'main'})\n                .then(function (response) {\n                    var data = response.data;\n                    $scope.current.loginMsgs.length = 0;\n                    if (!data.success) {\n                        if (data[\"error-codes\"]) {\n                            ALERT_MSGS.createUserError.msg = \"The following error has occurred: \\\"\" + data[\"error-codes\"][0] + \"\\\" Please address the error or contact your advisor if the problem persists.\";\n                        } else {\n                            ALERT_MSGS.createUserError.msg = \"An error has occurred. Please try resetting the reCaptcha. Contact your advisor if the problem persists.\";\n                        }\n                        $scope.current.loginMsgs.push(ALERT_MSGS.createUserError);\n                    } else {\n                        $scope.current.loginMsgs.push(ALERT_MSGS.resetInstructions);\n                        $scope.current.mode = 'login';\n                    }\n                })\n                .catch(function () {\n                    $scope.current.loginMsgs.push(ALERT_MSGS.unknownError);\n                })\n                .finally(function () {\n                    $scope.userToCreate.captchaResponse = null;\n                });\n        };\n\n        $scope.resetRecaptcha = function () {\n            grecaptcha.reset(widget1);\n        };\n\n\n        //INITIALIZE\n        $scope.current = {username: localStorage.oas_username, password: null, password2: null, rememberDevice: true, mainLogoUrl: null, hideLogo: null, hideMargin: null, primaryBgColor: null, mode: 'login', loginMsgs: []};\n        $scope.userToCreate = {};\n        $scope.secureAuthUrl = $sce.trustAsResourceUrl(APP_CONFIG.secureAuthUrl);\n        init();\n    });\n</script>\n\n<script src=\"app/login.constants.js\"></script>\n<script src=\"app/directives/oasImgSrc.js\"></script>\n<script src=\"app/directives/iframeResizer.js\"></script>\n\n\n</body>"}
