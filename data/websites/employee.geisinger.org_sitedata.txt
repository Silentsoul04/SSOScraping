{"link":"https://employee.geisinger.org/","html":"<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<meta http-equiv=\"pragma\" content=\"no-cache\">\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n<title>employee.geisinger.org</title>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/public/include/css/apm.css\">\n<script language=\"JavaScript\" src=\"/public/include/js/session_check.js\"></script>\n<script language=\"JavaScript\" src=\"/public/include/js/agent_common.js\"></script>\n<script language=\"JavaScript\" src=\"/public/include/js/web_host.js\"></script>\n<script language=\"javascript\">\n<!--\nif(!String.prototype.trim){ String.prototype.trim = function() { return this.replace(/^\\s+|\\s+$/g, \"\"); }; }\n\n/////////////////////////////////////////////////////////////////////////\n// function to return the customized screen when session expiration\n// is detected on the client-side\n/////////////////////////////////////////////////////////////////////////\nfunction SessionExpired_CustomizedScreenGet()\n{\n  return '<br><h3>Session Expired/Timeout</h3><br>Due to user inactivity, your session expired. Click the following link to start a new session.<br><br><table id=\"IHoptions\"><tr><td><a href=\"[SESSION_RESTART_URL]\" class=\"option\"><img src=\"/public/images/sq-positive.gif\" ></a><a href=\"[SESSION_RESTART_URL]\">Start a new session</a></td></tr></table>';\n}\n\nvar globalRestartOnSubmit = false;\n\nfunction sessionTimedOut()\n{\n    // restart session automatically upon \"submit\" for edge-like clients if logon form is compatibile\n    if (externalWebHost.hasWebLogonResetSession() && logonFormCompatible) {\n       globalRestartOnSubmit = true;\n    }\n    else {\n       // display session expired msg for non-compatible forms or\n       // non-edge clients\n       window.sessionTimeout.window.sessionTimeout.showSplashLayer(\"MessageDIV\", SessionExpired_CustomizedScreenGet());\n    }\n}\n\n/**\n * Place the focus and init the form fields\n */\n\nif(self != top) { top.location = self.location; }\nwindow.onerror=function(){ return function(){ return; } }\n\n//--------------------------------------------------------------------\nvar doAutoSubmit = true;\n\nvar globalFormId = 'auth_form';\nvar globalTableId = 'credentials_table';\nvar globalSubmitTrId = 'submit_row';\n\nvar globalSavePasswordCheckbox = null;\nvar logonFormCompatible = false;\n\nvar softTokenInput = null;\nvar softTokenFieldId = \"\";\nvar softTokenState = \"\";\nvar softTokenNewPIN = \"\";\nvar softTokenPINAutoPopulate = false;\nif( !softTokenState ) {\n    softTokenState = \"SECURID_AUTH_STATE_START\";}\n\n    var challengeMode = false;\n\nfunction getInputField(fieldId)\n{\n    var form = document.getElementById( globalFormId );\n    if( form == null ){\n        return null;\n    }\n\n    if(fieldId == null || fieldId == \"\"){\n        return null;\n    }\n\n    var inputs = form.getElementsByTagName(\"input\");\n    for( var i=0; i<inputs.length; i++ ){\n        if(  inputs[i].name == fieldId){\n            return inputs[i];\n        }\n    }\n    return null;\n}\n\nfunction getSoftTokenInput()\n{\n    return getInputField(softTokenFieldId);\n}\n\nfunction getUsernameInput()\n{\n    return getInputField(\"username\");\n}\n\nfunction getPasswordInput()\n{\n    return getInputField(\"password\");\n}\n\nfunction edgeClientSoftTokenSupport()\n{\n    try {\n        return externalWebHost.hasWebLogonSoftTokenSupport();\n    } catch(e) {}\n    return false;\n}\n\nfunction getSoftTokenPrompt()\n{\n    if ( softTokenFieldId != \"\" && edgeClientSoftTokenSupport()) {\n        var div = document.getElementById(\"formHeaderSoftToken\");\n        if (div)  {\n            return div.innerHTML;\n        }\n    }\n    return  null;\n}\n\nfunction OnSubmitEdgeRSASoftToken()\n{\n    var support = edgeClientSoftTokenSupport();\n    if( true != support ) {\n        return;\n    }\n    var form = document.getElementById( globalFormId );\n    if( form == null ){\n        return;\n    }\n    var inputs = form.getElementsByTagName(\"input\");\n\n    var hiddenInput = document.createElement(\"input\");\n    hiddenInput.setAttribute(\"type\", \"hidden\");\n        hiddenInput.setAttribute(\"name\", \"softTokenError\");\n    //append to form element that you want .\n    form.appendChild(hiddenInput);\n\n    try{\n        if(softTokenInput != null) { //normal mode\n            // if the client cannot request soft-token PIN,\n            // ask user to enter it in the logon page and pass the value to the client\n            // Otherwise, the client already has the PIN\n            if(!softTokenPINAutoPopulate) {\n                externalWebHost.setWebLogonSoftTokenPIN(softTokenInput.value);\n            }\n            var passcode = externalWebHost.getWebLogonSoftTokenPasscode();\n            if( passcode ) {\n                softTokenInput.value = passcode;\n            }\n        } else if( challengeMode ) { //challenge mode\n            // If the client can provide response to the challenge, use it instead of user input\n            if(externalWebHost.hasWeblogonSoftTokenChallengeResponse()){\n                var challengeResponse = externalWebHost.getWeblogonSoftTokenChallengeResponse();\n                if(null != challengeResponse){\n                    inputs[0].value = challengeResponse;\n                }\n            }else{\n                // Request user input by default\n                externalWebHost.setWebLogonSoftTokenPIN(inputs[0].value);\n\n                var passcode = externalWebHost.getWebLogonSoftTokenPasscode();\n                if( passcode ) {\n                    inputs[0].value = passcode;\n                }\n            }\n\n        }\n        hiddenInput.value = externalWebHost.getWebLogonSoftTokenError();\n    } catch(e) { }\n\n    return;\n}\n\n\n\n// check whether logon form is compatible with the client for auto-population and auto-submission\n// only \"username\", \"password\" and soft token field (the name is stored in softTokenFieldId ) are supported\n// fields can be configured in either order, but can only be text, password or checkbox types\n// form is not considered compatible if it contains any additional fields not supported by the client\n// The form is compatible even if it contains a subset of the supported fields\n// In this case the client will auto-populate only those fields\nfunction getFormCompatibility()\n{\n    var form = document.getElementById( globalFormId );\n    if( form == null ){\n        return false;\n    }\n    // check if form suites\n    var inputs = [];\n    var inputsTemp = form.getElementsByTagName(\"input\");\n    // filter submit, reset, hidden and little green men\n    for( var i=0; i<inputsTemp.length; i++ ){\n        if( inputsTemp[i].type == \"text\" || inputsTemp[i].type == \"password\"){\n            inputs[ inputs.length ] = inputsTemp[i];\n        }\n    }\n\n    var softTokenSupported = edgeClientSoftTokenSupport() && (null != softTokenInput);\n    // Check if there are any custom fields that are not supported by Edge Client for auto-population and auto-submission\n    for( var i=0; i<inputs.length; i++ ){\n       if((inputs[i].type == \"text\" && inputs[i].name == \"username\") ||\n          (inputs[i].type == \"password\" && inputs[i].name == \"password\") ||\n          (softTokenSupported && inputs[i].type == \"password\" && inputs[i].name == softTokenInput.name)){\n               continue;\n       }else {\n          return false;\n       }\n    }\n    return true;\n}\n\nfunction OnLoad()\n{\n    var header = document.getElementById(\"credentials_table_header\");\n    var softTokenHeaderStr = getSoftTokenPrompt();\n    if ( softTokenHeaderStr ) {\n        header.innerHTML = softTokenHeaderStr;\n    }\n    setFormAttributeByQueryParams(\"auth_form\", \"action\", \"/subsession_logon_submit.php3\");\n    setFormAttributeByQueryParams(\"logon_original_url\", \"href\", \"/subsession_logon_submit.php3\");\n\n    // check if form suites\n    var form = document.getElementById( globalFormId );\n    if( form == null ){\n        return;\n    }\n    // check if form suites\n    var inputs = form.getElementsByTagName(\"input\");\n    // filter submit, reset, hidden and little green men\n    for( var i=0; i<inputs.length; i++ ){\n        if( ( inputs[i].type == \"text\" || inputs[i].type == \"password\" ) && inputs[i].value == \"\" ){\n            inputs[i].focus();\n            if (inputs[i].type == \"password\") {\n                window.setTimeout( function(elem){ return function(){ elem.blur(); elem.focus(); } }(inputs[i]) , 266 );\n            }\n            return;\n        }\n    }\n}\n\nfunction disableSubmit(form)\n{\n    // disable!\n    var inputs = form.getElementsByTagName( \"input\" );\n    for( var i=0; i<inputs.length; i++ ){\n        if( inputs[i].type == \"submit\" || inputs[i].type == \"reset\" ){\n            inputs[i].disabled = true;\n        }\n    }\n\n    return true;\n}\n\n//This function is called from Edge Client. Update setWeblogonCallbacks call if renamed\nfunction challengeAutoSubmit()\n{\n    if(!challengeMode) {\n       return false;\n    }\n\n    var form = document.getElementById( globalFormId );\n    if( form == null ){\n       return false;\n    }\n\n    disableSubmit(form);\n\n    form.onsubmit();\n    form.submit();\n    return true;\n}\n\n//This function is called from Edge Client. Update setWeblogonCallbacks call if renamed\nfunction weblogonAutoSubmit()\n{\n      if(!logonFormCompatible){\n          return false;\n      }\n\n      var form = document.getElementById( globalFormId );\n      if( form == null ){\n          return false;\n      }\n\n      // autosubmit check\n      if(externalWebHost.hasWebLogonAutoLogon() && externalWebHost.getWebLogonAutoLogon() && doAutoSubmit){\n\n         disableSubmit(form);\n\n         form.onsubmit();\n         form.submit();\n         return true;\n      }else{\n        return false;\n      }\n}\n\n\n// support for autologon from Client API\nfunction checkExternalAddCheckbox()\n{\n    var checkbox_txt = 'Save Password';\n\n    if( !logonFormCompatible ){\n        try {\n            if (externalWebHost.hasWebLogonNotifyUser()){\n                externalWebHost.webLogonNotifyUser();\n            }\n        } catch(e){};\n        return;\n    }\n\n    // find form\n    var form = document.getElementById( globalFormId );\n    if( form == null ){\n        return;\n    }\n\n    // find table\n    var table = document.getElementById( globalTableId );\n    if( table == null ){\n        return;\n    }\n\n    // find tr\n    var submitTr = document.getElementById( globalSubmitTrId );\n    if( submitTr == null ){\n        return;\n    }\n\n    try {\n        if(externalWebHost.isAvailable()){\n            // push values\n            var usernameInput = getUsernameInput();\n            if( null != usernameInput && externalWebHost.hasWebLogonUserName() && usernameInput.value == \"\"){\n                usernameInput.value = externalWebHost.getWebLogonUserName();\n            }\n\n            var passwordInput = getPasswordInput();\n                        var allowSavingPassword = ((null != passwordInput) && (passwordInput.name != softTokenFieldId));\n            //don't populate RSA SecurID token field with the cached password\n            if(allowSavingPassword) {\n                if( externalWebHost.hasWebLogonPassword() && (passwordInput.value == \"\")){\n                     passwordInput.value =  externalWebHost.getWebLogonPassword();\n                }\n            }else{\n                doAutoSubmit = false;\n            }\n\n            // push data to cells\n            if(allowSavingPassword && externalWebHost.isWebLogonSavePasswordAvailable()){\n                // right - text\n\n                // create cells\n                var newTr = table.insertRow( submitTr.rowIndex );\n                var leftTd = newTr.insertCell( 0 );\n                var rightTd = newTr.insertCell( 1 );\n\n                leftTd.className = \"credentials_table_label_cell\";\n                rightTd.className = \"credentials_table_field_cell credentials_table_field_checkbox_fix\";\n\n                rightTd.innerHTML = checkbox_txt;\n                // left - checkbox\n                globalSavePasswordCheckbox = document.createElement(\"input\");\n                globalSavePasswordCheckbox.type = \"checkbox\";\n                globalSavePasswordCheckbox.className = \"credentials_input_checkbox\";\n                globalSavePasswordCheckbox.value = 1;\n                globalSavePasswordCheckbox = leftTd.appendChild( globalSavePasswordCheckbox );\n                globalSavePasswordCheckbox.checked = externalWebHost.getWebLogonSavePasswordChecked();\n                if( globalSavePasswordCheckbox.autocomplete ) {\n                    globalSavePasswordCheckbox.autocomplete = \"off\";\n                }\n            }\n\n            // autosubmit if possible\n            if(weblogonAutoSubmit()){\n               return;\n            }\n        }\n    } catch (e) { }\n}\n\nfunction OnSubmit()\n{\n    // find form\n    var form = document.getElementById( globalFormId );\n    if( form == null ){\n        return;\n    }\n    try{\n      if( externalWebHost.isAvailable() ){\n         // pass weblogon credentials back to the client\n         if( logonFormCompatible ){\n              var usernameInput = getUsernameInput();\n              if( null != usernameInput && externalWebHost.hasWebLogonUserName() ){\n                  externalWebHost.setWebLogonUserName(usernameInput.value);\n              }\n\n              var passwordInput = getPasswordInput();\n              if( null != passwordInput && externalWebHost.hasWebLogonPassword() ){\n                  externalWebHost.setWebLogonPassword(passwordInput.value);\n              }\n              // pass user decision to save the password back to the client\n              if( externalWebHost.hasWebLogonSavePasswordChecked() ){\n                  externalWebHost.setWebLogonSavePasswordChecked((null != globalSavePasswordCheckbox) && globalSavePasswordCheckbox.checked);\n              }\n          }\n          if (softTokenFieldId != \"\") {\n              OnSubmitEdgeRSASoftToken();\n          }\n      }\n    } catch(e) { }\n\n    return;\n}\n\nfunction verifyNewPassword()\n{\n    var form = document.getElementById( globalFormId );\n    if( form == null ){\n        return true;\n    }\n\n    var inputs = form.getElementsByTagName(\"input\");\n    if( inputs.length >= 2 && inputs[0].name == \"_F5_challenge\" && inputs[0].type == \"password\" && inputs[1].name == \"_F5_verify_password\" && inputs[1].type == \"password\" ){\n        if( inputs[0].value != inputs[1].value ){\n            alert(\"Password and confirmation do not match.\");\n            inputs[0].focus();\n            return false;\n        } else {\n            // Not sending the second field.\n            inputs[1].disabled = true;\n\n            try{\n                  if( externalWebHost.hasWebLogonPassword() ){\n                      externalWebHost.setWebLogonPassword(inputs[0].value);\n                  }\n            } catch(e) { }\n        }\n    }\n    return true;\n}\n\nfunction masterSubmit(form)\n{\n    if( !verifyNewPassword() /* || ... */){\n        return false;\n    }\n\n    OnSubmit(); // this required by edge\n\n    if (globalRestartOnSubmit) {\n        try {\n            var usernameInput = getUsernameInput();\n            var passwordInput = getPasswordInput();\n            externalWebHost.setWebLogonAutoLogon((usernameInput != null ) && (\"\" != usernameInput.value) && (null != passwordInput) && (\"\" != passwordInput.value));\n        }\n        catch (e) {}\n        // restart session\n        externalWebHost.webLogonResetSession();\n        return false;\n    }\n\n    disableSubmit(form);\n    return true;\n}\n//-->\n</script>\n</head>\n\n<body onload=\"OnLoad()\">\n\n<meta name=\"viewport\" id=\"viewport\" content=\"width=device-width, initial-scale=1.0\">       \n<meta name=\"robots\" context=\"noindex,nofollow\">\n<script language=\"javascript\">\n//orientation toolbox\nfunction setViewport(){\n    document.getElementById(\"viewport\").setAttribute('content', Math.abs(window.orientation) == 90 ? 'width=device-height, initial-scale=1' : 'width=device-width, initial-scale=1.0' );\n}\nsetViewport();\nwindow.onorientationchange = function() {\n    setViewport();\n}    \n</script>\n<table id=\"page_header\">\n  <tbody><tr>\n    <td id=\"header_leftcell\"><img src=\"/public/images/customization/Common/GHS_MAIN_AP_general_ui/logo_image_en.png\"></td>             \n    <td id=\"header_rightcell\"></td>\n  </tr>\n  <tr>\n     <td></td>\n     <td id=\"maxTimeoutTd\"><span id=\"maxTimeoutTag\" title=\"\"></span></td>\n  </tr>\n</tbody></table>\n<noscript>\n&lt;div id=\"noscript_warning_red\"&gt;JavaScript is not enabled. Please enable JavaScript in your browser or contact your system administrator for assistance.&lt;/div&gt;\n&lt;div id=\"noscript_warning_newsession\"&gt;To open a new session, please  &lt;A href=\"/\"&gt;click here.&lt;/A&gt;&lt;/div&gt;\n</noscript>\n\n<table id=\"main_table\" class=\"logon_page\">\n<tbody><tr>\n        <td id=\"main_table_info_cell\">\n    <form id=\"auth_form\" name=\"e1\" method=\"post\" onsubmit=\"javascript: return masterSubmit(this);\" autocomplete=\"off\">\n    <table id=\"credentials_table\">\n    <tbody><tr>\n        <td colspan=\"2\" id=\"credentials_table_header\">Employee Portal</td>\n    </tr>\n    <tr>\n        <td colspan=\"2\" id=\"credentials_table_postheader\"></td>\n    </tr>\n    <tr>\n        <td colspan=\"2\" class=\"credentials_table_unified_cell\"><label for=\"input_1\" id=\"label_input_1\">Username</label><input type=\"text\" name=\"username\" class=\"credentials_input_text\" value=\"\" id=\"input_1\" autocomplete=\"off\" autocapitalize=\"off\"></td>\n    </tr>\n    <tr>\n        <td colspan=\"2\" class=\"credentials_table_unified_cell\"><label for=\"input_2\" id=\"label_input_2\">Password</label><input type=\"password\" name=\"password\" class=\"credentials_input_password\" value=\"\" id=\"input_2\" autocomplete=\"off\" autocapitalize=\"off\"></td>\n    </tr>\n    <tr id=\"submit_row\">\n        <td class=\"credentials_table_unified_cell\"><input type=\"submit\" class=\"credentials_input_submit\" value=\"Logon\"></td>\n    </tr>\n    <tr>\n        <td colspan=\"2\" id=\"credentials_table_footer\" style=\"font-size:18px;\">\n        Help Desk Problem Submission Form\n        <br>\n        <a href=\"https://webapps.geisinger.org/HDproblemsubmission\" style=\"font-size:18px;color:#006aa7;\">Click here to access the help desk problem submission form</a>\n        </td>\n    </tr>\n    </tbody></table>\n    <input type=\"hidden\" name=\"vhost\" value=\"standard\">\n    </form>\n    <script language=\"javascript\"><!--//\n        softTokenInput = getSoftTokenInput();\n        logonFormCompatible = getFormCompatibility();\n        // Pass method names to the client for auto-submit triggered by the client\n        externalWebHost.setWeblogonCallbacks(\n             \"weblogonAutoSubmit();\",\n             \"challengeAutoSubmit();\"\n        );\n\n        // Check if the softTokenInput exists or in case of RSA challenge mode\n        if((softTokenFieldId != \"\") && (null != softTokenInput || challengeMode ) && edgeClientSoftTokenSupport()){\n            externalWebHost.setWebLogonSoftTokenPrompt(getSoftTokenPrompt());\n            externalWebHost.setWebLogonSoftTokenState(softTokenState);\n        }\n\n        // Check if the client can ask user for soft-token PIN\n        if((softTokenFieldId != \"\") && (softTokenInput != null)\n               && edgeClientSoftTokenSupport()\n               && externalWebHost.canRequestWeblogonSoftTokenPIN()){\n            softTokenInput.readOnly = true;\n            softTokenPINAutoPopulate = true;\n            // No need to request input of RSA PIN, as the client can show PIN input UI if needed,\n            // make the field read-only\n            // set bogus value to display\n            softTokenInput.value = \"********\";\n        }\n\n        checkExternalAddCheckbox();\n        window.sessionTimeout = new APMSessionTimeout(sessionTimedOut);\n\n        function dontChangePasswordClick(){\n            var checkbox = document.getElementById(\"dont_change_password_checkbox\");\n            var password = document.getElementById(\"input_1\");\n            var verify = document.getElementById(\"input_2\");\n            if( checkbox.checked ){\n                password.value = \"\";\n                password.disabled = true;\n                verify.value = \"\";\n                verify.disabled = true;\n            }else{\n                password.disabled = false;\n                verify.disabled = false;\n            }\n        }\n\n        var finitvalues=[ '','','','','' ];\n        var sessionLogonCustomizations = [ \"\", \"\", \"\", \"\", \"\" ];\n        var sessionLogonCustomizationPairs = [ [], [], [], [], [] ];\n        for( var i=0; i<sessionLogonCustomizations.length; i++ ){\n            var pairs = ( sessionLogonCustomizations[i].indexOf(\";\") == -1 ? [ sessionLogonCustomizations[i] ] : sessionLogonCustomizations[i].trim().split(\";\") );\n            for( var j=0; j<pairs.length; j++ ){\n                if( pairs[j].indexOf(\"=>\") != -1 ){\n                    var pair = pairs[j].split(\"=>\");\n                    sessionLogonCustomizationPairs[i][pair[0]] = pair[1];\n                }\n            }\n        }\n\n        var sessionLogonValuesets = [ \"\", \"\", \"\", \"\", \"\" ];\n        for( var i=0; i<sessionLogonValuesets.length; i++ ){\n            var inpx = document.getElementById(\"input_\" + (i+1) );\n            if( inpx !== null && inpx.tagName.toUpperCase() == \"SELECT\" ){\n                if( sessionLogonValuesets[i].trim() != \"\" ){\n                    inpx.options.length = 0;\n                    var options = sessionLogonValuesets[i].trim().split(\";\");\n                    for( var j=0; j<options.length; j++ ){\n                        inpx.options.add( new Option( options[j], options[j] ) );\n                    }\n                }\n                if( sessionLogonCustomizations[i].trim() != \"\" ){\n                    for( var j=0; j<inpx.options.length; j++ ){\n                        if( typeof sessionLogonCustomizationPairs[i][ inpx.options[j].value ] != \"undefined\" ){\n                            inpx.options[j].text = sessionLogonCustomizationPairs[i][ inpx.options[j].value ];\n                        }\n                    }\n                }\n                // set value\n                for( var j=0; j<inpx.options.length; j++ ){\n                    if( inpx.options[j].value == finitvalues[i] ){\n                        inpx.value = finitvalues[i];\n                        break;\n                    }\n                }\n            }else if( document.getElementById(\"input_\" + (i+1) + \"_0\" ) ){ // RADIO\n                var initValue = finitvalues[i];\n                var radio = null;\n                var name = document.getElementById(\"input_\" + (i+1) + \"_0\" ).name;\n                if( sessionLogonValuesets[i].trim() != \"\" ){\n                    var parent = document.getElementById( \"label_input_\" + (i+1) ).parentNode;\n                    while( parent.childNodes.length > 1 ){\n                        parent.removeChild( parent.lastChild );\n                    }\n                    var options = sessionLogonValuesets[i].trim().split(\";\");\n                    for( var j=0; j<options.length; j++ ){\n                        var div = parent.appendChild( document.createElement( \"div\" ) );\n                        var elmdef = document.all && navigator.userAgent.match(/MSIE (\\d+)/)[1] < 9 ? \"<input type='radio'>\" : \"input\";\n                        var input = div.appendChild( document.createElement( elmdef ) );\n                        if( input.type != 'radio' ){ input.type = 'radio'; }\n                        input.id = \"input_\" + (i+1) + \"_\" + j;\n                        input.name = \"name\";\n                        input.value = options[j];\n                        var label = div.appendChild( document.createElement( \"label\" ) );\n                        label.htmlFor = input.id;\n                        label.id = \"label_\" + input.id;\n                        label.className = \"radio-label\";\n                        label.style.display = \"inline\";\n                        label.innerHTML = options[j];\n                    }\n                }\n                if( sessionLogonCustomizations[i].trim() != \"\" ){\n                    var j = 0;\n                    while( ( radio = document.getElementById(\"input_\" + (i+1) + \"_\" + j++ ) ) !== null ){ // what number\n                        if( typeof sessionLogonCustomizationPairs[i][ radio.value ] != \"undefined\" ){\n                            document.getElementById(\"label_input_\" + (i+1) + \"_\" + (j-1) ).innerHTML = sessionLogonCustomizationPairs[i][ radio.value ];\n                        }\n                    }\n                }\n                var anyChecked = false, j = 0;\n                while( initValue != \"\" && ( radio = document.getElementById(\"input_\" + (i+1) + \"_\" + j++ ) ) !== null ){\n                    radio.checked = ( radio.value == initValue );\n                    if( radio.checked ){ anyChecked = true; }\n                }\n                if( !anyChecked && ( radio = document.getElementById(\"input_\" + (i+1) + \"_\" + 0 ) ) !== null ){\n                    radio.checked = true;\n                }\n            }else if( inpx !== null && inpx.tagName.toUpperCase() == \"INPUT\" && inpx.type.toUpperCase() == \"CHECKBOX\" ){\n                if( inpx.disabled && finitvalues[i] != \"\" ){\n                    inpx.checked = true;\n                }else if( !inpx.disabled && inpx.value == \"\" ){\n                    inpx.value = \"1\";\n                }\n            }\n        }\n    --></script>\n    </td>\n    </tr>\n</tbody></table>\n\n<div id=\"page_footer\"><div>© 2016 Geisinger Health System. All rights reserved.</div></div>\n<script type=\"text/javascript\">\n    function F5_include_JS(jsFile)\n    {\n        document.write('<script type=\"text/javascript\" src=\"'\n                         + jsFile + '\"></scr' + 'ipt>'); // <-- IE7 workaround\n    }\n\n    if (\"\" == \"1\") {\n        var f5VirtualKeyboardMove = ( \"\" == 1 ? \"1\" : \"0\" );\n        var f5VirtualKeyboardForceBlur = ( \"\" == 1 ? \"0\" : \"1\" );\n        function VirtualKeyboard_CustomizedMessageTextGet()\n{\n  return 'Virtual Keyboard';\n}\n\nfunction VirtualKeyboard_CustomizedHideTextGet()\n{\n  return 'Hide Keyboard';\n}\n\n        var f5VirtualKeyboardMessageText =  VirtualKeyboard_CustomizedMessageTextGet();\n        var f5VirtualKeyboardHideText =  VirtualKeyboard_CustomizedHideTextGet();\n        F5_include_JS('/public/include/js/vk/f5_vk.js');\n    }\n</script>\n<div id=\"MessageDIV\" class=\"inspectionHostDIVSmall\"></div>\n<div id=\"formHeaderSoftToken\" style=\"overflow: hidden; visibility: hidden; height: 0; width: 0;\"></div>\n\n\n</body>"}
