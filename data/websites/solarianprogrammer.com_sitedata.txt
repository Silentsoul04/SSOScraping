{"link":"solarianprogrammer.com","html":"<head> <meta charset=\"utf-8\"> <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"> <title>Solarian Programmer | My programming ramblings</title> <meta name=\"description\" content=\"My ramblings about programming and productivity\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <link rel=\"stylesheet\" href=\"/css/style.min.css\"> <!--[if lt IE 9]><script type=\"text/javascript\" src=\"/js/html5shiv.min.js\"></script> <script type=\"text/javascript\" src=\"/js/respond.min.js\"></script> <script type=\"text/javascript\" src=\"/js/jquery-1.11.2.min.js\"></script> <script type=\"text/javascript\" src=\"/js/bootstrap.min.js\"></script><![endif]--> <script src=\"https://pagead2.googlesyndication.com/pub-config/r20160913/ca-pub-5384871893435364.js\"></script><script async=\"\" src=\"//www.google-analytics.com/analytics.js\"></script><script type=\"text/javascript\">\n            (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n            })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n            ga('create', 'UA-25961119-1', 'solarianprogrammer.com');\n            ga('send', 'pageview');        \n        </script> <style type=\"text/css\">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}\n.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -webkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}\n.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px}\n.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!important}\n.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}\n</style><style type=\"text/css\">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}\n#MathJax_About.MathJax_MousePost {outline: none}\n.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 5px 0px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 5px; -webkit-border-radius: 5px; -moz-border-radius: 5px; -khtml-border-radius: 5px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}\n.MathJax_MenuItem {padding: 1px 2em; background: transparent}\n.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; color: #666666; font-size: .75em}\n.MathJax_MenuActive .MathJax_MenuArrow {color: white}\n.MathJax_MenuArrow.RTL {left: .5em; right: auto}\n.MathJax_MenuCheck {position: absolute; left: .7em}\n.MathJax_MenuCheck.RTL {right: .7em; left: auto}\n.MathJax_MenuRadioCheck {position: absolute; left: .7em}\n.MathJax_MenuRadioCheck.RTL {right: .7em; left: auto}\n.MathJax_MenuLabel {padding: 1px 2em 3px 1.33em; font-style: italic}\n.MathJax_MenuRule {border-top: 1px solid #DDDDDD; margin: 4px 3px}\n.MathJax_MenuDisabled {color: GrayText}\n.MathJax_MenuActive {background-color: #606872; color: white}\n.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E8E8E8}\n.MathJax_ContextMenu:focus {outline: none}\n.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}\n#MathJax_AboutClose {top: .2em; right: .2em}\n.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}\n.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Courier New',Courier; font-size: 24px; color: #F0F0F0}\n.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}\n.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!important}\n.MathJax_MenuClose:hover span {background-color: #CCC!important}\n.MathJax_MenuClose:hover:focus {outline: none}\n</style><style type=\"text/css\">.MathJax_Preview .MJXf-math {color: inherit!important}\n</style><style type=\"text/css\">.MJX_Assistive_MathML {position: absolute!important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 0 0!important; border: 0!important; height: 1px!important; width: 1px!important; overflow: hidden!important; display: block!important; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none}\n.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}\n</style><style type=\"text/css\">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}\n#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}\n#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}\n#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}\n</style><style type=\"text/css\">.MathJax_Preview {color: #888}\n#MathJax_Message {position: fixed; left: 1px; bottom: 2px; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}\n#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}\n.MathJax_Error {color: #CC0000; font-style: italic}\n</style><style type=\"text/css\">.MJXp-script {font-size: .8em}\n.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right; -ms-transform-origin: right; -o-transform-origin: right; transform-origin: right}\n.MJXp-bold {font-weight: bold}\n.MJXp-italic {font-style: italic}\n.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,serif}\n.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGeneral,serif}\n.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGeneral,serif}\n.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGeneral,serif}\n.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGeneral,serif}\n.MJXp-largeop {font-size: 150%}\n.MJXp-largeop.MJXp-int {vertical-align: -.2em}\n.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-family: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; border-collapse: collapse}\n.MJXp-display {display: block; text-align: center; margin: 1em 0}\n.MJXp-math span {display: inline-block}\n.MJXp-box {display: block!important; text-align: center}\n.MJXp-box:after {content: \" \"}\n.MJXp-rule {display: block!important; margin-top: .1em}\n.MJXp-char {display: block!important}\n.MJXp-mo {margin: 0 .15em}\n.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}\n.MJXp-denom {display: inline-table!important; width: 100%}\n.MJXp-denom > * {display: table-row!important}\n.MJXp-surd {vertical-align: top}\n.MJXp-surd > * {display: block!important}\n.MJXp-script-box > *  {display: table!important; height: 50%}\n.MJXp-script-box > * > * {display: table-cell!important; vertical-align: top}\n.MJXp-script-box > *:last-child > * {vertical-align: bottom}\n.MJXp-script-box > * > * > * {display: block!important}\n.MJXp-mphantom {visibility: hidden}\n.MJXp-munderover {display: inline-table!important}\n.MJXp-over {display: inline-block!important; text-align: center}\n.MJXp-over > * {display: block!important}\n.MJXp-munderover > * {display: table-row!important}\n.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}\n.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}\n.MJXp-mtr {display: table-row!important}\n.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em 0 0 .5em}\n.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}\n.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}\n.MJXp-mlabeledtr {display: table-row!important}\n.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}\n.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}\n.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}\n.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -ms-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}\n.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -ms-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}\n.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -ms-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}\n.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -ms-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}\n.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -ms-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}\n.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -ms-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}\n.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -ms-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}\n.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -ms-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}\n.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -ms-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}\n.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -ms-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}\n.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}\n</style></head> <body><div id=\"MathJax_Message\" style=\"display: none;\"></div> <!--[if lt IE 8]><p class=\"browserupgrade\">You are using an <strong>outdated</strong> browser. Please <a href=\"http://browsehappy.com/\">upgrade your browser</a> to improve your experience.</p><![endif]--> <div class=\"container\"> <header class=\"row\"> <section id=\"title_subtitle\" class=\"col-md-8 col-xs-6\"> <h1 id=\"blog_title\"> <a id=\"blog_title_link\" href=\"https://solarianprogrammer.com\" title=\"Solarian Programmer\" rel=\"home\">Solarian Programmer</a> </h1> <h4 id=\"blog_subtitle\">My programming ramblings</h4> </section> <nav class=\"row links_pages_header\"> <a class=\"col-md-1 links_pages_a\" href=\"/\">Home</a> <a class=\"col-md-1 links_pages_a\" href=\"/archives/\">Archives</a> <a class=\"col-md-1 links_pages_a\" href=\"/contact/\">Contact</a> <a class=\"col-md-1 links_pages_a\" href=\"/privacy/\">Privacy</a> </nav> </header> <section class=\"row\"> <article class=\"col-md-8\"> <section id=\"advert\" class=\"col-md-4 col-xs-6\"> <script async=\"\" src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script> <ins class=\"adsbygoogle\" style=\"display: block; height: 60px;\" data-ad-client=\"ca-pub-5384871893435364\" data-ad-slot=\"8698481522\" data-ad-format=\"auto\" data-adsbygoogle-status=\"done\"><ins id=\"aswift_0_expand\" style=\"display:inline-table;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:690px;background-color:transparent\"><ins id=\"aswift_0_anchor\" style=\"display:block;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:690px;background-color:transparent\"><iframe width=\"690\" height=\"60\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" vspace=\"0\" hspace=\"0\" allowtransparency=\"true\" scrolling=\"no\" allowfullscreen=\"true\" onload=\"var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}\" id=\"aswift_0\" name=\"aswift_0\" style=\"left:0;position:absolute;top:0;\"></iframe></ins></ins></ins> <script>\n        (adsbygoogle = window.adsbygoogle || []).push({});\n        </script> </section> <h1 class=\"class_article_title\"> <a class=\"post_titles_cls\" href=\"/2017/04/19/getting-started-swift-windows-subsystem-linux/\" rel=\"bookmark\" title=\"Permanent link to \">Getting started with Swift 3 on Windows Subsystem for Linux</a> </h1> <h2 class=\"class_article_title_date\"> Posted on April 19, 2017 by Sol </h2> <p>Recently, I’ve played a bit with Swift 3 on WSL (Windows Subsystem for Linux). In this article, I will show you how to install the latest stable version of Swift under WSL. Combining the open source <a href=\"https://swift.org/\">Swift</a> compiler with a text editor like <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a> is quite a pleasant coding experience, as you can see in the next screenshot:</p> <p><img src=\"/images/2017/04/19/swift_vscode_editing.png\" alt=\"Editing and running Swift code in Visual Studio Code\" class=\"center_image img-responsive\" width=\"750\"></p> <p class=\"more\"><a href=\"/2017/04/19/getting-started-swift-windows-subsystem-linux/\">►&nbsp;&nbsp;Continue reading</a></p> <hr> <h1 class=\"class_article_title\"> <a class=\"post_titles_cls\" href=\"/2017/04/16/windows-susbsystem-for-linux-xfce-4/\" rel=\"bookmark\" title=\"Permanent link to \">Using the Windows Subsystem for Linux with Xfce 4</a> </h1> <h2 class=\"class_article_title_date\"> Posted on April 16, 2017 by Sol </h2> <p>In my previous <a href=\"/2017/04/15/install-wsl-windows-subsystem-for-linux/\">article</a>, I’ve shown you how to install WSL, the Windows System for Linux, on a fresh Windows 10 Creators Update. Officially, at the time of this writing, WSL supports only command-line applications. However, you can install graphical Linux applications and run these under WSL if you have an X server like <a href=\"https://sourceforge.net/projects/vcxsrv/\">VcXsrv</a> or <a href=\"https://sourceforge.net/projects/xming/\">Xming</a>, on your Windows machine. </p> <p>Assuming that you have a working WSL installation, start <em>Bash on Ubuntu on Windows</em>, or open a <em>Command Prompt</em> and type <em>bash</em> in it. First step is to install a window manager. From my experience, <a href=\"https://www.xfce.org/\">Xfce</a> works reasonably well with WSL:</p> <div class=\"highlight\"><pre><span></span><span class=\"lineno\">1 </span><span class=\"go\">sudo apt install xfce4</span>\n</pre></div> <p class=\"more\"><a href=\"/2017/04/16/windows-susbsystem-for-linux-xfce-4/\">►&nbsp;&nbsp;Continue reading</a></p> <hr> <h1 class=\"class_article_title\"> <a class=\"post_titles_cls\" href=\"/2017/04/15/install-wsl-windows-subsystem-for-linux/\" rel=\"bookmark\" title=\"Permanent link to \">Install WSL - Windows Subsystem for Linux</a> </h1> <h2 class=\"class_article_title_date\"> Posted on April 15, 2017 by Sol </h2> <p>With the recent release of Windows 10 Creators Update, I’ve decided that I want to test the <a href=\"https://blogs.msdn.microsoft.com/wsl/\">Windows Subsystem for Linux</a>, WSL, aka Bash on Ubuntu on Windows. WSL is a way to run unmodified Ubuntu binaries on Windows natively, using the Windows kernel instead of the Linux kernel. The advantage of WSL is that you can run Linux command-line applications without the extra weight of a virtual machine. At this time, WSL on Windows 10 Creators Update uses binaries from Ubuntu 16.04.2. </p> <p>If you want to run WSL on your Windows 10 installation, make sure that you have a 64 bits machine with a 64 bits Windows. If this is the case, check if your system is updated. Ideally, you will have at least the Creators Update which is version 1703. You can check the above by going in Settings → System → About:</p> <p class=\"more\"><a href=\"/2017/04/15/install-wsl-windows-subsystem-for-linux/\">►&nbsp;&nbsp;Continue reading</a></p> <hr> <h1 class=\"class_article_title\"> <a class=\"post_titles_cls\" href=\"/2017/04/12/transferring-data-matlab-armadillo/\" rel=\"bookmark\" title=\"Permanent link to \">Transferring data between Matlab and Armadillo</a> </h1> <h2 class=\"class_article_title_date\"> Posted on April 12, 2017 by Sol </h2> <p>In this article, I will show you how to move data between Matlab and <a href=\"http://arma.sourceforge.net/\">Armadillo</a>, specifically how to move matrices between the two. If you need an introduction in how to install Armadillo on your system, check my <a href=\"/2017/03/24/getting-started-armadillo-cpp-linear-algebra-windows-mac-linux/\">previous</a> article.</p> <p>Easiest approach is to transfer data between Matlab and Armadillo using text files. For example, the next Matlab code will generate some data and save it in a text file that can be loaded from Armadillo:</p> <div class=\"highlight\"><pre><span></span><span class=\"lineno\">1 </span><span class=\"n\">A</span> <span class=\"p\">=</span> <span class=\"nb\">rand</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">);</span>\n<span class=\"lineno\">2 </span>\n<span class=\"lineno\">3 </span><span class=\"c\">% Save the matrix A to \"matlab_data.txt\" the content of the file is overwritten</span>\n<span class=\"lineno\">4 </span><span class=\"n\">dlmwrite</span><span class=\"p\">(</span><span class=\"s\">'matlab_data.txt'</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"s\">'delimiter'</span><span class=\"p\">,</span> <span class=\"s\">'\\t'</span><span class=\"p\">,</span> <span class=\"s\">'precision'</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">);</span>\n</pre></div> <p>Reading the matrix from <em>matlab_data.txt</em> in Armadillo can be done with:</p> <div class=\"highlight\"><pre><span></span><span class=\"lineno\">1 </span><span class=\"n\">arma</span><span class=\"o\">::</span><span class=\"n\">Mat</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span> <span class=\"n\">A</span><span class=\"p\">;</span>\n<span class=\"lineno\">2 </span><span class=\"n\">A</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s\">\"matlab_data.txt\"</span><span class=\"p\">);</span>\n</pre></div> <p class=\"more\"><a href=\"/2017/04/12/transferring-data-matlab-armadillo/\">►&nbsp;&nbsp;Continue reading</a></p> <hr> <h1 class=\"class_article_title\"> <a class=\"post_titles_cls\" href=\"/2017/03/24/getting-started-armadillo-cpp-linear-algebra-windows-mac-linux/\" rel=\"bookmark\" title=\"Permanent link to \">Getting started with Armadillo a C++ Linear Algebra Library on Windows, Mac and Linux</a> </h1> <h2 class=\"class_article_title_date\"> Posted on March 24, 2017 by Sol </h2> <p>In this article, I will give you a quick introduction in how to get started with <a href=\"http://arma.sourceforge.net/\">Armadillo</a>, a C++ Matlab like Linear Algebra Library on Windows, Mac and Linux. Armadillo is particularly interesting for Matlab users that want to port their code to C++ for speed. Please note that Armadillo is not a drop in replacement for all Matlab functionality. If your code uses some specialized Matlab toolbox, you will need to find another library to complement Armadillo or implement the missing functionality from scratch.</p> <p>Armadillo uses <a href=\"http://www.netlib.org/blas/\">BLAS</a> and <a href=\"http://www.netlib.org/lapack/\">LAPACK</a> for matrix operations. It is recommended that you install an optimized version of the above libraries on your system and not the reference implementations from <em>Netlib</em>. I will guide you on how to install accelerated versions of <em>BLAS</em> and <em>LAPACK</em> for your operating system, in the install sections of this article.</p> <p class=\"more\"><a href=\"/2017/03/24/getting-started-armadillo-cpp-linear-algebra-windows-mac-linux/\">►&nbsp;&nbsp;Continue reading</a></p> <hr> <h1 class=\"class_article_title\"> <a class=\"post_titles_cls\" href=\"/2017/02/25/install-numpy-scipy-matplotlib-python-3-windows/\" rel=\"bookmark\" title=\"Permanent link to \">Install NumPy, SciPy, Matplotlib with Python 3 on Windows</a> </h1> <h2 class=\"class_article_title_date\"> Posted on February 25, 2017 by Sol </h2> <p>This is a short tutorial about installing <a href=\"https://www.python.org/\">Python 3</a> with <a href=\"http://www.numpy.org/\">NumPy</a>, <a href=\"https://www.scipy.org/\">SciPy</a> and <a href=\"http://matplotlib.org/\">Matplotlib</a> on Windows.</p> <p>We’ll start by installing the latest stable version of Python 3, which at the time of this writing is 3.6. Head over to <a href=\"https://www.python.org/downloads/\">https://www.python.org/downloads/</a> and download the installer. The default Python Windows installer is 32 bits and this is what I will use in this article. If you need the 64 bits version of Python, check the <em>Looking for a specific release?</em> section from the above page.</p> <p class=\"more\"><a href=\"/2017/02/25/install-numpy-scipy-matplotlib-python-3-windows/\">►&nbsp;&nbsp;Continue reading</a></p> <hr> <h1 class=\"class_article_title\"> <a class=\"post_titles_cls\" href=\"/2017/02/14/ios-remote-push-notifications-nodejs-backend/\" rel=\"bookmark\" title=\"Permanent link to \">iOS Remote Push Notifications with a Node.js backend</a> </h1> <h2 class=\"class_article_title_date\"> Posted on February 14, 2017 by Sol </h2> <p>In this tutorial I will show you how to get started with Swift 3 and iOS 10 push notifications, using your own custom <a href=\"https://nodejs.org/en/\">Node.js</a> server. Please note that there are plenty of alternatives to the custom server solution I will present here, like <a href=\"https://firebase.google.com/\">Firebase</a> and similar services, these will start charging you a monthly fee after you reach a certain number of users. Using your own server is advantageous if you want complete control over what software you run on it and how you store and use your data.</p> <p>If you want to follow this tutorial you will need to be a paying member of the <a href=\"https://developer.apple.com/programs/\">Apple Developer Program</a> and have an iOS device. It is also recommended, but not required, that you have a working web server with root access. Personally I tend to use <a href=\"https://m.do.co/c/b00f127954b1\">DigitalOcean</a>, but you can use any VPS provider. For the purpose of this article, I will show you how to use a local web server.</p> <p class=\"more\"><a href=\"/2017/02/14/ios-remote-push-notifications-nodejs-backend/\">►&nbsp;&nbsp;Continue reading</a></p> <hr> <h1 class=\"class_article_title\"> <a class=\"post_titles_cls\" href=\"/2017/01/31/arduino-buzzer-player-adjustable-volume-playing-fur-elise-beethoven/\" rel=\"bookmark\" title=\"Permanent link to \">Arduino buzzer player with adjustable volume - playing a part of Für Elise by Ludwing van Beethoven</a> </h1> <h2 class=\"class_article_title_date\"> Posted on January 31, 2017 by Sol </h2> <p><em>The code for this post is on GitHub:</em> <a href=\"https://github.com/sol-prog/Arduino_music\" target=\"_blank\">https://github.com/sol-prog/Arduino_music</a>.</p> <p>In this article, I will show you how to play music with the Arduino, using a passive piezo buzzer. You can see the final result in the next video:</p> <div class=\"super_resp_video\"> <div class=\"resp_video\"> <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/VXYVRjQmzQQ\" frameborder=\"0\" allowfullscreen=\"\"></iframe> </div> </div> <p class=\"more\"><a href=\"/2017/01/31/arduino-buzzer-player-adjustable-volume-playing-fur-elise-beethoven/\">►&nbsp;&nbsp;Continue reading</a></p> <hr> <h1 class=\"class_article_title\"> <a class=\"post_titles_cls\" href=\"/2017/01/22/beginning-c-game-development-sdl-2-videos/\" rel=\"bookmark\" title=\"Permanent link to \">Beginning C Game Development with SDL 2 - video series</a> </h1> <h2 class=\"class_article_title_date\"> Posted on January 22, 2017 by Sol </h2> <p>This is an ongoing video series about beginning C game development with SDL 2 by our partner <a href=\"https://www.youtube.com/channel/UC8LMLwQZn7RzXUS1xsBsz9A/videos\">AtoZ Programming Tutorials</a>. While the videos where recorded on Windows 10, everything should work the same on macOS and Linux as long as you use <a href=\"https://www.libsdl.org/\">SDL 2</a> and a C99 compiler like GCC, Clang or Visual Studio 2015/2017.</p> <p>Currently, the series presents how to setup SDL 2 on Windows using <a href=\"https://www.visualstudio.com/\">Visual Studio 2015</a> and <a href=\"http://www.codeblocks.org/\">Code::Blocks</a>. Let us know in the comments section if you would like to have SDL 2 setup videos for macOS and Linux.</p> <p><strong>Setup SDL 2 with Visual Studio 2015</strong></p> <div class=\"super_resp_video\"> <div class=\"resp_video\"> <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/f6BH5HoNTFA\" frameborder=\"0\" allowfullscreen=\"\"></iframe> </div> </div> <p class=\"more\"><a href=\"/2017/01/22/beginning-c-game-development-sdl-2-videos/\">►&nbsp;&nbsp;Continue reading</a></p> <hr> <h1 class=\"class_article_title\"> <a class=\"post_titles_cls\" href=\"/2017/01/21/arduino-pulse-led-cosine-wave-function/\" rel=\"bookmark\" title=\"Permanent link to \">Arduino - pulse an LED with a cosine wave function</a> </h1> <h2 class=\"class_article_title_date\"> Posted on January 21, 2017 by Sol </h2> <p>In this short article, I will show you how to pulse an LED with <a href=\"https://www.arduino.cc/\">Arduino</a> using a cosine function. You can see the final result in the next short video:</p> <div class=\"super_resp_video\"> <div class=\"resp_video\"> <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/qP0X35gf-5Y\" frameborder=\"0\" allowfullscreen=\"\"></iframe> </div> </div> <p class=\"more\"><a href=\"/2017/01/21/arduino-pulse-led-cosine-wave-function/\">►&nbsp;&nbsp;Continue reading</a></p> <hr> <h1 class=\"class_article_title\"> <a class=\"post_titles_cls\" href=\"/2017/01/08/c99-c11-dynamic-array-mimics-cpp-vector-api-improvements/\" rel=\"bookmark\" title=\"Permanent link to \">C99/C11 dynamic array that mimics C++'s std::vector - API improvements</a> </h1> <h2 class=\"class_article_title_date\"> Posted on January 8, 2017 by Sol </h2> <p>In my last article I wrote a portable C dynamic array, auto-resizable and theoretically capable to store any C representable data type. While the original implementation works, it is a bit cumbersome to use in practice. A better approach is to create a dynamic array that looks like a normal C array, but it is capable to automatically adjust its size as needed. I took from Sean Barrett’s <a href=\"https://github.com/nothings/stb\">stb</a> libraries the idea that you can store the size information of an array at the beginning of the array, while publicly exposing a pointer to where the array data resides in memory. The advantage of this approach is that from a user point of view a dynamic array can be used like a C array, except for the creation and destruction phases.</p> <p>It goes without saying that this article is written for <em>C programmers</em> or people that use a <em>C compiler</em>. If you are using C++, you usually don’t need to implement a vector type, you already have one in the STL, use it.</p> <p>It will be easier to understand how the general case works if we start with an explicit implementation for a dynamic array of integers. Conceptually, our code has three phases</p> <div class=\"highlight\"><pre><span></span><span class=\"lineno\"> 1 </span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\"></span>\n<span class=\"lineno\"> 2 </span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\"></span>\n<span class=\"lineno\"> 3 </span>\n<span class=\"lineno\"> 4 </span><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 5 </span>    <span class=\"c1\">// 1. Create and initialize the array</span>\n<span class=\"lineno\"> 6 </span>    <span class=\"c1\">// ...</span>\n<span class=\"lineno\"> 7 </span>\n<span class=\"lineno\"> 8 </span>    <span class=\"c1\">// 2. Fill the array with data and do something with this data</span>\n<span class=\"lineno\"> 9 </span>    <span class=\"c1\">// ...</span>\n<span class=\"lineno\">10 </span>\n<span class=\"lineno\">11 </span>    <span class=\"c1\">// 3. Destroy the array, freeing the memory</span>\n<span class=\"lineno\">12 </span>    <span class=\"c1\">// ...</span>\n<span class=\"lineno\">13 </span>\n<span class=\"lineno\">14 </span>    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"lineno\">15 </span><span class=\"p\">}</span>\n</pre></div> <p class=\"more\"><a href=\"/2017/01/08/c99-c11-dynamic-array-mimics-cpp-vector-api-improvements/\">►&nbsp;&nbsp;Continue reading</a></p> <hr> <h1 class=\"class_article_title\"> <a class=\"post_titles_cls\" href=\"/2017/01/06/c99-c11-dynamic-array-mimics-cpp-vector/\" rel=\"bookmark\" title=\"Permanent link to \">C99/C11 dynamic array that mimics C++'s std::vector</a> </h1> <h2 class=\"class_article_title_date\"> Posted on January 6, 2017 by Sol </h2> <p>Recently, I’ve worked on a large <em>C</em> library used to store items from a database. The idea was to get all records that matched a particular criteria and store these in a <em>C</em> data structure for further processing. The original author of the library used a linked list to store the records which probably was a sensible idea 20 years ago. However, today’s computers perform better if you use a cache friendly data structure like an array. Basically, I wanted a dynamic array that automatically increases his size if needed, something like C++'s <a href=\"http://en.cppreference.com/w/cpp/container/vector\">std::vector</a>.</p> <p><strong>UPDATE 8 January 2017</strong> <br> <a href=\"/2017/01/08/c99-c11-dynamic-array-mimics-cpp-vector-api-improvements/\">Part 2</a> of this article presents a better, more flexible, implementation for a C dynamic array. Feel free to skip the remaining of this article and read the <a href=\"/2017/01/08/c99-c11-dynamic-array-mimics-cpp-vector-api-improvements/\">second part</a>.</p> <p class=\"more\"><a href=\"/2017/01/06/c99-c11-dynamic-array-mimics-cpp-vector/\">►&nbsp;&nbsp;Continue reading</a></p> <hr> <h1 class=\"class_article_title\"> <a class=\"post_titles_cls\" href=\"/2016/11/29/install-opencv-3-with-python-3-on-macos/\" rel=\"bookmark\" title=\"Permanent link to \">Install OpenCV 3 with Python 3 on macOS Sierra</a> </h1> <h2 class=\"class_article_title_date\"> Posted on November 29, 2016 by Sol </h2> <p>In this article, I will show you how to install OpenCV 3 with Python 3 on macOS Sierra. Most tutorials I found online, including the OpenCV documentation, seem concerned only with Python 2.7.</p> <p>MacOS comes by default with Python 2.7 which, at this point, receives only bug fixes and will be <a href=\"http://legacy.python.org/dev/peps/pep-0373/\">EOL</a> by 2020. Python 3.x is the future and it is supported by all major Python libraries. In this tutorial, we’ll use the latest stable Python 3 release, Python 3.5.2.</p> <p class=\"more\"><a href=\"/2016/11/29/install-opencv-3-with-python-3-on-macos/\">►&nbsp;&nbsp;Continue reading</a></p> <hr> <h1 class=\"class_article_title\"> <a class=\"post_titles_cls\" href=\"/2016/11/28/cpp-passing-c-style-array-with-size-information-to-function/\" rel=\"bookmark\" title=\"Permanent link to \">C++ - Passing a C-style array with size information to a function</a> </h1> <h2 class=\"class_article_title_date\"> Posted on November 28, 2016 by Sol </h2> <p>When you pass a C-style array to a function it will decay to a pointer to the first element of the array, basically losing the size information.</p> <p>As a side note, in a pure C++ code, one will prefer to use <em>std::vector</em> or <em>std::array</em> instead of C-style arrays. However, there are cases like in embedded systems in which using the Standard Template Library is forbidden by your company guide rules or simply not available on the platform. This is why I think the approach presented in this article could be of some interest to C++ programmers.</p> <p>In C, you will need to pass the size of the array as an extra parameter to the function or use a global variable. A potential problem with this approach is that it is easy to screw up by forgetting the array to pointer decay rule or by passing the wrong size information.</p> <p>Here is an example of a classical bug when one forgets about the array to pointer decay rule:</p> <div class=\"highlight\"><pre><span></span><span class=\"lineno\"> 1 </span><span class=\"kt\">void</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">my_array</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"lineno\"> 2 </span>\t<span class=\"c1\">// Wrong, my_array_size won't be equal with the actual number of the elements from the original array</span>\n<span class=\"lineno\"> 3 </span>\t<span class=\"kt\">size_t</span> <span class=\"n\">my_array_size</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">my_array</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">my_array</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n<span class=\"lineno\"> 4 </span>\n<span class=\"lineno\"> 5 </span>\t<span class=\"c1\">// ...</span>\n<span class=\"lineno\"> 6 </span>\n<span class=\"lineno\"> 7 </span><span class=\"p\">}</span>\n<span class=\"lineno\"> 8 </span>\n<span class=\"lineno\"> 9 </span><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"lineno\">10 </span>\t<span class=\"c1\">// C-style array</span>\n<span class=\"lineno\">11 </span>\t<span class=\"kt\">int</span> <span class=\"n\">my_array</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">};</span>\n<span class=\"lineno\">12 </span>\n<span class=\"lineno\">13 </span>\t<span class=\"c1\">// Good, here my_array_size will be 5!</span>\n<span class=\"lineno\">14 </span>\t<span class=\"kt\">size_t</span> <span class=\"n\">my_array_size</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">my_array</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">my_array</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n<span class=\"lineno\">15 </span>\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"lineno\">16 </span><span class=\"p\">}</span>\n</pre></div> <p class=\"more\"><a href=\"/2016/11/28/cpp-passing-c-style-array-with-size-information-to-function/\">►&nbsp;&nbsp;Continue reading</a></p> <hr> <h1 class=\"class_article_title\"> <a class=\"post_titles_cls\" href=\"/2016/11/19/swift-opengl-linux-macos-glfw/\" rel=\"bookmark\" title=\"Permanent link to \">Swift 3 and OpenGL on Linux and macOS with GLFW</a> </h1> <h2 class=\"class_article_title_date\"> Posted on November 19, 2016 by Sol </h2> <p>This is a short article about how to get started with <a href=\"https://swift.org/\">Swift 3</a> and OpenGL on Linux and macOS. In order to keep the code portable on both operating systems, we’ll use <a href=\"http://www.glfw.org/\">GLFW</a> to create a window with an OpenGL context. Keep in mind that, at time of this writing, Swift can call directly any C library. However, if you need to use a C++ library you will need to write a C wrapper around it, because Swift 3 is not interoperable with C++.</p> <p>As a practical example, we’ll use OpenGL to draw a yellow rectangle on a red background. In order to keep the code short and as simple as possible, we’ll use the fixed OpenGL functionality. If you want to use modern OpenGL, please check my other <a href=\"https://solarianprogrammer.com/categories/OpenGL/\">OpenGL articles</a>. Replacing the fixed OpenGL functionality from the article example is left as an exercise for the reader. Basically, once you know how to call OpenGL functions from Swift and compile the code, it is just a question of writing supporting code for dealing with shaders, buffers and so on.</p> <p class=\"more\"><a href=\"/2016/11/19/swift-opengl-linux-macos-glfw/\">►&nbsp;&nbsp;Continue reading</a></p> <hr> <div id=\"older\"><a href=\"/page/2\">Older posts →</a></div> </article> <section id=\"sidebar\" class=\"col-md-4\"> <section id=\"advert2\" class=\"col-md-3\"> <script async=\"\" src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script> <ins class=\"adsbygoogle\" style=\"display: inline-block; width: 300px; height: 250px;\" data-ad-client=\"ca-pub-5384871893435364\" data-ad-slot=\"8286352329\" data-adsbygoogle-status=\"done\"><ins id=\"aswift_1_expand\" style=\"display:inline-table;border:none;height:250px;margin:0;padding:0;position:relative;visibility:visible;width:300px;background-color:transparent\"><ins id=\"aswift_1_anchor\" style=\"display:block;border:none;height:250px;margin:0;padding:0;position:relative;visibility:visible;width:300px;background-color:transparent\"><iframe width=\"300\" height=\"250\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" vspace=\"0\" hspace=\"0\" allowtransparency=\"true\" scrolling=\"no\" allowfullscreen=\"true\" onload=\"var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}\" id=\"aswift_1\" name=\"aswift_1\" style=\"left:0;position:absolute;top:0;\"></iframe></ins></ins></ins> <script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script> </section> <nav id=\"categories\" class=\"row\"> <p>Categories</p> <a class=\"categories_links\" href=\"/categories/Arduino\" rel=\"bookmark\" title=\"Permanent link to \">Arduino</a> <a class=\"categories_links\" href=\"/categories/Armadillo\" rel=\"bookmark\" title=\"Permanent link to \">Armadillo</a> <a class=\"categories_links\" href=\"/categories/Books\" rel=\"bookmark\" title=\"Permanent link to \">Books</a> <a class=\"categories_links\" href=\"/categories/C\" rel=\"bookmark\" title=\"Permanent link to \">C</a> <a class=\"categories_links\" href=\"/categories/C++\" rel=\"bookmark\" title=\"Permanent link to \">C++</a> <a class=\"categories_links\" href=\"/categories/C++11\" rel=\"bookmark\" title=\"Permanent link to \">C++11</a> <a class=\"categories_links\" href=\"/categories/C++14\" rel=\"bookmark\" title=\"Permanent link to \">C++14</a> <a class=\"categories_links\" href=\"/categories/C++17\" rel=\"bookmark\" title=\"Permanent link to \">C++17</a> <a class=\"categories_links\" href=\"/categories/C11\" rel=\"bookmark\" title=\"Permanent link to \">C11</a> <a class=\"categories_links\" href=\"/categories/C99\" rel=\"bookmark\" title=\"Permanent link to \">C99</a> <a class=\"categories_links\" href=\"/categories/Charts\" rel=\"bookmark\" title=\"Permanent link to \">Charts</a> <a class=\"categories_links\" href=\"/categories/Clang\" rel=\"bookmark\" title=\"Permanent link to \">Clang</a> <a class=\"categories_links\" href=\"/categories/Cling\" rel=\"bookmark\" title=\"Permanent link to \">Cling</a> <a class=\"categories_links\" href=\"/categories/Csharp\" rel=\"bookmark\" title=\"Permanent link to \">C#</a> <a class=\"categories_links\" href=\"/categories/CUDA\" rel=\"bookmark\" title=\"Permanent link to \">CUDA</a> <a class=\"categories_links\" href=\"/categories/Fortran\" rel=\"bookmark\" title=\"Permanent link to \">Fortran</a> <a class=\"categories_links\" href=\"/categories/Fractals\" rel=\"bookmark\" title=\"Permanent link to \">Fractals</a> <a class=\"categories_links\" href=\"/categories/GCC\" rel=\"bookmark\" title=\"Permanent link to \">GCC</a> <a class=\"categories_links\" href=\"/categories/iOS\" rel=\"bookmark\" title=\"Permanent link to \">iOS</a> <a class=\"categories_links\" href=\"/categories/JavaScript\" rel=\"bookmark\" title=\"Permanent link to \">JavaScript</a> <a class=\"categories_links\" href=\"/categories/Jekyll\" rel=\"bookmark\" title=\"Permanent link to \">Jekyll</a> <a class=\"categories_links\" href=\"/categories/Linux\" rel=\"bookmark\" title=\"Permanent link to \">Linux</a> <a class=\"categories_links\" href=\"/categories/macOS\" rel=\"bookmark\" title=\"Permanent link to \">macOS</a> <a class=\"categories_links\" href=\"/categories/Matplotlib\" rel=\"bookmark\" title=\"Permanent link to \">Matplotlib</a> <a class=\"categories_links\" href=\"/categories/Multithreading\" rel=\"bookmark\" title=\"Permanent link to \">Multithreading</a> <a class=\"categories_links\" href=\"/categories/Node.js\" rel=\"bookmark\" title=\"Permanent link to \">Node.js</a> <a class=\"categories_links\" href=\"/categories/NumPy\" rel=\"bookmark\" title=\"Permanent link to \">NumPy</a> <a class=\"categories_links\" href=\"/categories/Objective-C\" rel=\"bookmark\" title=\"Permanent link to \">Objective-C</a> <a class=\"categories_links\" href=\"/categories/OpenCV\" rel=\"bookmark\" title=\"Permanent link to \">OpenCV</a> <a class=\"categories_links\" href=\"/categories/OpenGL\" rel=\"bookmark\" title=\"Permanent link to \">OpenGL</a> <a class=\"categories_links\" href=\"/categories/OpenMP\" rel=\"bookmark\" title=\"Permanent link to \">OpenMP</a> <a class=\"categories_links\" href=\"/categories/OSX\" rel=\"bookmark\" title=\"Permanent link to \">OSX</a> <a class=\"categories_links\" href=\"/categories/Perlin\" rel=\"bookmark\" title=\"Permanent link to \">Perlin</a> <a class=\"categories_links\" href=\"/categories/Posix\" rel=\"bookmark\" title=\"Permanent link to \">Posix</a> <a class=\"categories_links\" href=\"/categories/Productivity\" rel=\"bookmark\" title=\"Permanent link to \">Productivity</a> <a class=\"categories_links\" href=\"/categories/Python\" rel=\"bookmark\" title=\"Permanent link to \">Python</a> <a class=\"categories_links\" href=\"/categories/Raspberry Pi\" rel=\"bookmark\" title=\"Permanent link to \">Raspberry Pi</a> <a class=\"categories_links\" href=\"/categories/Regex\" rel=\"bookmark\" title=\"Permanent link to \">Regex</a> <a class=\"categories_links\" href=\"/categories/Roguelike\" rel=\"bookmark\" title=\"Permanent link to \">Roguelike</a> <a class=\"categories_links\" href=\"/categories/Scheme\" rel=\"bookmark\" title=\"Permanent link to \">Scheme</a> <a class=\"categories_links\" href=\"/categories/SciPy\" rel=\"bookmark\" title=\"Permanent link to \">SciPy</a> <a class=\"categories_links\" href=\"/categories/Swift\" rel=\"bookmark\" title=\"Permanent link to \">Swift</a> <a class=\"categories_links\" href=\"/categories/Videos\" rel=\"bookmark\" title=\"Permanent link to \">Videos</a> <a class=\"categories_links\" href=\"/categories/Windows\" rel=\"bookmark\" title=\"Permanent link to \">Windows</a> <a class=\"categories_links\" href=\"/categories/WSL\" rel=\"bookmark\" title=\"Permanent link to \">WSL</a> </nav> <nav id=\"social_links\" class=\"row\"> <div id=\"RSS\" class=\"col-md-3 col-xs-2\"> <a href=\"http://feeds.feedburner.com/SolarianProgrammer\" target=\"_blank\"> <img src=\"/images/common/rss.png\" alt=\"My RSS\" style=\"border: 0;\" height=\"50\" width=\"50\"> </a> </div> <div id=\"RSS_twitter\" class=\"col-md-3 col-xs-2\"> <a href=\"https://twitter.com/sol_prog\" target=\"_blank\"> <img src=\"/images/common/twitter.png\" alt=\"My Twitter\" style=\"border: 0;\" height=\"50\" width=\"50\"> </a> </div> </nav> <nav id=\"last_articles\" class=\"row\"> <p>Recent posts</p> <ul> <li> <a href=\"/2017/04/19/getting-started-swift-windows-subsystem-linux/\" rel=\"bookmark\" title=\"Permanent link to \">Getting started with Swift 3 on Windows Subsystem for Linux</a> </li> <li> <a href=\"/2017/04/16/windows-susbsystem-for-linux-xfce-4/\" rel=\"bookmark\" title=\"Permanent link to \">Using the Windows Subsystem for Linux with Xfce 4</a> </li> <li> <a href=\"/2017/04/15/install-wsl-windows-subsystem-for-linux/\" rel=\"bookmark\" title=\"Permanent link to \">Install WSL - Windows Subsystem for Linux</a> </li> <li> <a href=\"/2017/04/12/transferring-data-matlab-armadillo/\" rel=\"bookmark\" title=\"Permanent link to \">Transferring data between Matlab and Armadillo</a> </li> <li> <a href=\"/2017/03/24/getting-started-armadillo-cpp-linear-algebra-windows-mac-linux/\" rel=\"bookmark\" title=\"Permanent link to \">Getting started with Armadillo a C++ Linear Algebra Library on Windows, Mac and Linux</a> </li> <li> <a href=\"/2017/02/25/install-numpy-scipy-matplotlib-python-3-windows/\" rel=\"bookmark\" title=\"Permanent link to \">Install NumPy, SciPy, Matplotlib with Python 3 on Windows</a> </li> <li> <a href=\"/2017/02/14/ios-remote-push-notifications-nodejs-backend/\" rel=\"bookmark\" title=\"Permanent link to \">iOS Remote Push Notifications with a Node.js backend</a> </li> <li> <a href=\"/2017/01/31/arduino-buzzer-player-adjustable-volume-playing-fur-elise-beethoven/\" rel=\"bookmark\" title=\"Permanent link to \">Arduino buzzer player with adjustable volume - playing a part of Für Elise by Ludwing van Beethoven</a> </li> <li> <a href=\"/2017/01/22/beginning-c-game-development-sdl-2-videos/\" rel=\"bookmark\" title=\"Permanent link to \">Beginning C Game Development with SDL 2 - video series</a> </li> <li> <a href=\"/2017/01/21/arduino-pulse-led-cosine-wave-function/\" rel=\"bookmark\" title=\"Permanent link to \">Arduino - pulse an LED with a cosine wave function</a> </li> </ul> </nav> </section> </section> <footer class=\"row\"> <div class=\"col-md-12\"> <p id=\"blog_disclaimer\"><strong>Disclaimer:</strong><br> <em>All data and information provided on this site is for informational purposes only. solarianprogrammer.com makes no representations as to accuracy, completeness, currentness, suitability, or validity of any information on this site and will not be liable for any errors, omissions, or delays in this information or any losses, injuries, or damages arising from its display or use. All information is provided on an as-is basis. solarianprogrammer.com does not collect any personal information about its visitors except that which they provide voluntarily when leaving comments. This information will never be disclosed to any third party for any purpose. Some of the links contained within this site have my referral id, which provides me with a small commission for each sale. Thank you for understanding.</em></p> <p id=\"blog_copyright\">Copyright © 2017 - solarianprogrammer.com</p> </div> </footer> <script type=\"text/javascript\" src=\"https://www.google.com/jsapi\"></script> <script type=\"text/javascript\" src=\"/js/update.js\"></script> <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script> <script>\n    MathJax.Hub.Config({\n      tex2jax: {\n        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre']\n      },\n      \"HTML-CSS\": {  linebreaks: { automatic: true }, matchFontHeight: false },\n      \"SVG\": {  linebreaks: { automatic: true }, matchFontHeight: false }\n    });\n\n    MathJax.Hub.Queue(function() {\n        var all = MathJax.Hub.getAllJax(), i;\n        for(i=0; i < all.length; i += 1) {\n            all[i].SourceElement().parentNode.className += ' has-jax';\n        }\n    });\n\n  </script> </div>  </body>"}
