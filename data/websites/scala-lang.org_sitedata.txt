{"link":"scala-lang.org","html":"<head>\n\n    <title>The Scala Programming Language</title>\n    \n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n\n    <link rel=\"icon\" type=\"image/png\" href=\"/resources/favicon.ico\">\n    <link rel=\"shortcut icon\" type=\"image/png\" href=\"/resources/favicon.ico\">\n\n    <!-- prettify CSS (corresponding js at footer)-->\n    <link rel=\"stylesheet\" href=\"/resources/css/prettify.css\" type=\"text/css\">\n\n    <!-- Bootstrap CSS -->\n    <link rel=\"stylesheet\" href=\"/resources/css/bootstrap.css\" type=\"text/css\">\n\n    <link href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,600,700,900,400italic,700italic\" rel=\"stylesheet\" type=\"text/css\">\n\n    <!-- Custom stylesheet -->\n    <link rel=\"stylesheet\" href=\"/resources/css/main.css\" type=\"text/css\">\n\n    <!-- Typekit (should stay at top of page, do not move to footer)-->\n    <script async=\"\" src=\"//www.google-analytics.com/analytics.js\"></script><script type=\"text/javascript\" async=\"\" src=\"https://ssl.google-analytics.com/ga.js\"></script><script type=\"text/javascript\" src=\"//use.typekit.net/abh3wgk.js\"></script>\n    <style type=\"text/css\">.tk-proxima-nova{font-family:\"proxima-nova\",sans-serif;}.tk-museo-slab{font-family:\"museo-slab\",serif;}</style><style type=\"text/css\">@font-face{font-family:proxima-nova;src:url(https://use.typekit.net/af/03034e/00000000000000003b9ad1b1/27/l?subset_id=2&fvd=n7&v=3) format(\"woff2\"),url(https://use.typekit.net/af/03034e/00000000000000003b9ad1b1/27/d?subset_id=2&fvd=n7&v=3) format(\"woff\"),url(https://use.typekit.net/af/03034e/00000000000000003b9ad1b1/27/a?subset_id=2&fvd=n7&v=3) format(\"opentype\");font-weight:700;font-style:normal;}@font-face{font-family:museo-slab;src:url(https://use.typekit.net/af/bb10f8/00000000000000000000ec0f/27/l?subset_id=2&fvd=n1&v=3) format(\"woff2\"),url(https://use.typekit.net/af/bb10f8/00000000000000000000ec0f/27/d?subset_id=2&fvd=n1&v=3) format(\"woff\"),url(https://use.typekit.net/af/bb10f8/00000000000000000000ec0f/27/a?subset_id=2&fvd=n1&v=3) format(\"opentype\");font-weight:100;font-style:normal;}@font-face{font-family:museo-slab;src:url(https://use.typekit.net/af/b0f02a/00000000000000000000ec05/27/l?subset_id=2&fvd=i1&v=3) format(\"woff2\"),url(https://use.typekit.net/af/b0f02a/00000000000000000000ec05/27/d?subset_id=2&fvd=i1&v=3) format(\"woff\"),url(https://use.typekit.net/af/b0f02a/00000000000000000000ec05/27/a?subset_id=2&fvd=i1&v=3) format(\"opentype\");font-weight:100;font-style:italic;}@font-face{font-family:museo-slab;src:url(https://use.typekit.net/af/c4d53f/0000000000000000000100fe/27/l?subset_id=2&fvd=n3&v=3) format(\"woff2\"),url(https://use.typekit.net/af/c4d53f/0000000000000000000100fe/27/d?subset_id=2&fvd=n3&v=3) format(\"woff\"),url(https://use.typekit.net/af/c4d53f/0000000000000000000100fe/27/a?subset_id=2&fvd=n3&v=3) format(\"opentype\");font-weight:300;font-style:normal;}@font-face{font-family:museo-slab;src:url(https://use.typekit.net/af/9daf12/000000000000000000010141/27/l?subset_id=2&fvd=i3&v=3) format(\"woff2\"),url(https://use.typekit.net/af/9daf12/000000000000000000010141/27/d?subset_id=2&fvd=i3&v=3) format(\"woff\"),url(https://use.typekit.net/af/9daf12/000000000000000000010141/27/a?subset_id=2&fvd=i3&v=3) format(\"opentype\");font-weight:300;font-style:italic;}@font-face{font-family:museo-slab;src:url(https://use.typekit.net/af/194e8d/000000000000000000011aff/27/l?subset_id=2&fvd=n7&v=3) format(\"woff2\"),url(https://use.typekit.net/af/194e8d/000000000000000000011aff/27/d?subset_id=2&fvd=n7&v=3) format(\"woff\"),url(https://use.typekit.net/af/194e8d/000000000000000000011aff/27/a?subset_id=2&fvd=n7&v=3) format(\"opentype\");font-weight:700;font-style:normal;}@font-face{font-family:museo-slab;src:url(https://use.typekit.net/af/dd6141/00000000000000000000ec0a/27/l?subset_id=2&fvd=i7&v=3) format(\"woff2\"),url(https://use.typekit.net/af/dd6141/00000000000000000000ec0a/27/d?subset_id=2&fvd=i7&v=3) format(\"woff\"),url(https://use.typekit.net/af/dd6141/00000000000000000000ec0a/27/a?subset_id=2&fvd=i7&v=3) format(\"opentype\");font-weight:700;font-style:italic;}</style><script type=\"text/javascript\">try{Typekit.load();}catch(e){}</script>\n\n    <!-- Atom feeds -->\n    <link rel=\"alternate\" type=\"application/atom+xml\" title=\"News Feed\" href=\"/feed/index.xml\">\n    <link rel=\"alternate\" type=\"application/atom+xml\" title=\"Blog Feed\" href=\"/feed/blog.xml\">\n\n\n  <script type=\"text/javascript\" charset=\"utf-8\" async=\"\" src=\"https://platform.twitter.com/js/timeline.9d3a88fb5aef75c60edbbe5208a9b931.js\"></script></head>\n  <body>\n\n\n<div class=\"splash\" style=\"position: relative; z-index: 0; background: none;\">\n  <div class=\"darkblue-overlay\">&nbsp;</div>\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"span12\">\n        <div class=\"scala-logo\">\n          <img src=\"/resources/img/scala-logo-white.png\" alt=\"Scala Logo\">\n        </div>\n        <ul class=\"nav\">\n  <li><a href=\"/documentation/\">Documentation</a></li>\n  <li><a href=\"/download/\">Download</a></li>\n  <li><a href=\"/community/\">Community</a></li>\n  <li><a href=\"/contribute/\">Contribute</a></li>\n  <li id=\"source-code\">\n    <a href=\"http://github.com/scala/scala\"><img src=\"/resources/img/github-logo.png\" alt=\"GitHub Logo\"></a>\n    <div class=\"toptip\">Source Code</div>\n  </li>\n  <li id=\"scala-lang-twitter\">\n    <a href=\"http://twitter.com/scala_lang\"><img src=\"/resources/img/twitter-logo-white.png\" alt=\"Twitter Logo\"></a>\n    <div class=\"toptip\">Scala on Twitter</div>\n  </li>\n</ul>\n\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"span12\">\n        <div class=\"splash-text ontop\">\n          <h2 style=\"font-weight: 700;\">Object-Oriented Meets Functional</h2>\n          <p class=\"splash-pitch\">\n            Have the best of both worlds. Construct elegant class hierarchies\n            for maximum code reuse and extensibility, implement their behavior using\n            higher-order functions. Or anything in-between.\n          </p>\n          <a class=\"learn-more-btn\" href=\"/what-is-scala.html\">Learn More</a>\n          <div class=\"marker\">\n            <div class=\"dot\"></div>\n            <div class=\"pulse\"></div>\n          </div>\n          <p>&nbsp;</p>\n          <div class=\"tip\">\n            Scala began life in 2003, created by Martin Odersky and his research group at EPFL, next to Lake Geneva and the Alps, in Lausanne, Switzerland. Scala has since grown into a mature open source programming language, used by hundreds of thousands of developers, and is developed and maintained by scores of people all over the world.\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n<div class=\"backstretch\" style=\"left: 0px; top: 0px; overflow: hidden; margin: 0px; padding: 0px; height: 540px; width: 1024px; z-index: -999998; position: absolute;\"><img src=\"/resources/img/view-leman-opt2.jpg\" style=\"position: absolute; margin: 0px; padding: 0px; border: none; width: 1024px; height: 670.476px; max-height: none; max-width: none; z-index: -999999; left: 0px; top: -65.2381px;\"></div></div>\n\n<div class=\"container central\">\n  <div class=\"translucent-circle\"></div>\n  <div class=\"opaque-circle\"></div>\n  <a class=\"central-btn download\" id=\"main-download-button\" href=\"/download/\">Download</a>\n  <a class=\"central-btn api\" href=\"http://www.scala-lang.org/api/\">API Docs&nbsp;&nbsp;&nbsp;&nbsp;</a>\n  <div class=\"big-scala-spiral\"><img src=\"/resources/img/smooth-spiral.png\" alt=\"Spiral\"></div>\n  <div class=\"central-btn scala-version\"><span class=\"superbold\">Scala</span><br>2.12.2</div>\n</div>\n\n<div class=\"darkbluebar\">\n  <div class=\"container\" style=\"position: relative;\">\n    <div class=\"left-side\">\n      <p class=\"getting-started\"><a href=\"/documentation/getting-started.html\"><b>Getting Started</b></a></p>\n      <p class=\"dev-releases\"><img src=\"/resources/img/gears.png\" alt=\"gears icon\"><a href=\"/download/\">&nbsp;Milestones, nightlies, etc.</a></p>\n      <p class=\"all-releases\"><img src=\"/resources/img/list.png\" alt=\"list icon\"><a href=\"/download/all.html\">&nbsp;All Previous Releases</a></p>\n    </div>\n    <div class=\"right-side\">\n      <p class=\"getting-started\"><a href=\"http://www.scala-lang.org/api/current/\"><b>Current API Docs</b></a></p>\n      <p class=\"dev-releases\"><img src=\"/resources/img/list.png\" alt=\"list icon\"><a href=\"/documentation/api.html\">&nbsp;API Docs (other versions)</a></p>\n      <p class=\"dev-releases\"><img src=\"/resources/img/books.png\" alt=\"books icon\"><a href=\"/documentation/\">&nbsp;Scala Documentation</a></p>\n      <p class=\"all-releases\"><img src=\"/resources/img/books.png\" alt=\"books icon\"><a href=\"/files/archive/spec/2.12/\">&nbsp;Language Specification</a></p>\n    </div>\n  </div>\n</div>\n\n <div class=\"bullet-point-box\">\n\n  <div class=\"bullet-row-1-wrap\">\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"span12 bullet-point\">\n          <h2><span>Scala in a Nutshell</span></h2>\n          <p class=\"click\">&nbsp;click the boxes below to see Scala in action!&nbsp;</p>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"span4 bullet-point\" id=\"java-interop\" style=\"height: 199px;\">\n          <h3>Seamless Java Interop</h3>\n          <p>Scala runs on the JVM, so Java and Scala stacks can be freely mixed for totally seamless integration.</p>\n        </div>\n        <div class=\"span4 bullet-point\" id=\"type-inference\" style=\"height: 199px;\">\n          <h3>Type Inference</h3>\n          <p>So the type system doesn’t feel so static. Don’t work for the type system. Let the type system work for you!</p>\n        </div>\n        <div class=\"span4 bullet-point\" id=\"concurrency-distribution\" style=\"height: 199px;\">\n          <h3>Concurrency<br>&amp; Distribution</h3>\n          <p>Use data-parallel operations on collections, use actors for concurrency and distribution, or futures for asynchronous programming.</p>\n        </div>\n      </div>\n      <div class=\"code-snippet-arrow\"></div>\n    </div>\n  </div>\n\n  <div id=\"code-snippet-row1\">\n    <div class=\"container\">\n      <div class=\"row\">\n      </div>\n    </div>\n  </div>\n\n  <div class=\"bullet-row-2-wrap\">\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"span4 bullet-point\" id=\"traits\" style=\"height: 199px;\">\n          <h3>Traits</h3>\n          <p>Combine the flexibility of Java-style interfaces with the power of classes. Think principled multiple-inheritance.</p>\n        </div>\n        <div class=\"span4 bullet-point\" id=\"pattern-matching\" style=\"height: 199px;\">\n          <h3>Pattern Matching</h3>\n          <p>Think “switch” on steroids. Match against class hierarchies, sequences, and more.</p>\n        </div>\n        <div class=\"span4 bullet-point\" id=\"higher-order-functions\" style=\"height: 199px;\">\n          <h3>Higher-Order Functions</h3>\n          <p>Functions are first-class objects. Compose them with guaranteed type safety. Use them anywhere, pass them to anything.</p>\n        </div>\n      </div>\n      <div class=\"code-snippet-arrow\"></div>\n    </div>\n  </div>\n\n  <div id=\"code-snippet-row2\">\n    <div class=\"container\">\n      <div class=\"row\">\n      </div>\n    </div>\n  </div>\n\n  <div class=\"where-to-learn-more\">\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"span12\">\n          <a class=\"learn-more-btn\" href=\"/what-is-scala.html\">Learn More</a>\n          <p>or visit the <a class=\"italicize\" href=\"/documentation\">Scala Documentation</a></p>\n        </div>\n      </div>\n    </div>\n  </div>\n\n</div>\n\n<!-- hidden code-snippet content -->\n<div id=\"hidden-java-interop\"><div class=\"java-interop-wrapper\" style=\"width: 500px\">\n<figure class=\"code java-interop1\" style=\"margin-top: 20px;\">\n  <figcaption>Author.scala</figcaption>\n  <pre class=\"prettyprint lang-scala linenums\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Author</span><span class=\"pun\">(</span><span class=\"kwd\">val</span><span class=\"pln\"> firstName</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">String</span><span class=\"pun\">,</span></code></li><li class=\"L1\"><code><span class=\"pln\">    </span><span class=\"kwd\">val</span><span class=\"pln\"> lastName</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">String</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"kwd\">extends</span><span class=\"pln\"> </span><span class=\"typ\">Comparable</span><span class=\"pun\">[</span><span class=\"typ\">Author</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L2\"><code></code></li><li class=\"L3\"><code><span class=\"pln\">  </span><span class=\"kwd\">override</span><span class=\"pln\"> </span><span class=\"kwd\">def</span><span class=\"pln\"> compareTo</span><span class=\"pun\">(</span><span class=\"pln\">that</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">Author</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"pln\">    </span><span class=\"kwd\">val</span><span class=\"pln\"> lastNameComp </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">this</span><span class=\"pun\">.</span><span class=\"pln\">lastName compareTo that</span><span class=\"pun\">.</span><span class=\"pln\">lastName</span></code></li><li class=\"L5\"><code><span class=\"pln\">    </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">lastNameComp </span><span class=\"pun\">!=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">)</span><span class=\"pln\"> lastNameComp</span></code></li><li class=\"L6\"><code><span class=\"pln\">    </span><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"lit\">this</span><span class=\"pun\">.</span><span class=\"pln\">firstName compareTo that</span><span class=\"pun\">.</span><span class=\"pln\">firstName</span></code></li><li class=\"L7\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span></code></li><li class=\"L8\"><code><span class=\"pun\">}</span></code></li><li class=\"L9\"><code></code></li><li class=\"L0\"><code><span class=\"kwd\">object</span><span class=\"pln\"> </span><span class=\"typ\">Author</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">  </span><span class=\"kwd\">def</span><span class=\"pln\"> loadAuthorsFromFile</span><span class=\"pun\">(</span><span class=\"pln\">file</span><span class=\"pun\">:</span><span class=\"pln\"> java</span><span class=\"pun\">.</span><span class=\"pln\">io</span><span class=\"pun\">.</span><span class=\"typ\">File</span><span class=\"pun\">):</span><span class=\"pln\"> </span><span class=\"typ\">List</span><span class=\"pun\">[</span><span class=\"typ\">Author</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">???</span></code></li><li class=\"L2\"><code><span class=\"pun\">}</span></code></li></ol></pre>\n</figure>\n<figure class=\"code java-interop2\" style=\"margin-top: 10px;\">\n  <figcaption>App.java</figcaption>\n  <pre class=\"prettyprint lang-scala linenums\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">import</span><span class=\"pln\"> static scala</span><span class=\"pun\">.</span><span class=\"pln\">collection</span><span class=\"pun\">.</span><span class=\"typ\">JavaConversions</span><span class=\"pun\">.</span><span class=\"pln\">asJavaCollection</span><span class=\"pun\">;</span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code><span class=\"pln\">public </span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">App</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L3\"><code><span class=\"pln\">    public </span><span class=\"typ\">List</span><span class=\"pun\">&lt;</span><span class=\"typ\">Author</span><span class=\"pun\">&gt;</span><span class=\"pln\"> loadAuthorsFromFile</span><span class=\"pun\">(</span><span class=\"typ\">File</span><span class=\"pln\"> file</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"pln\">        </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">ArrayList</span><span class=\"pun\">&lt;</span><span class=\"typ\">Author</span><span class=\"pun\">&gt;(</span><span class=\"pln\">asJavaCollection</span><span class=\"pun\">(</span></code></li><li class=\"L5\"><code><span class=\"pln\">            </span><span class=\"typ\">Author</span><span class=\"pun\">.</span><span class=\"pln\">loadAuthorsFromFile</span><span class=\"pun\">(</span><span class=\"pln\">file</span><span class=\"pun\">)));</span></code></li><li class=\"L6\"><code><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L7\"><code></code></li><li class=\"L8\"><code><span class=\"pln\">    public void sortAuthors</span><span class=\"pun\">(</span><span class=\"typ\">List</span><span class=\"pun\">&lt;</span><span class=\"typ\">Author</span><span class=\"pun\">&gt;</span><span class=\"pln\"> authors</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code><span class=\"pln\">        </span><span class=\"typ\">Collections</span><span class=\"pun\">.</span><span class=\"pln\">sort</span><span class=\"pun\">(</span><span class=\"pln\">authors</span><span class=\"pun\">);</span></code></li><li class=\"L0\"><code><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code><span class=\"pln\">    public void displaySortedAuthors</span><span class=\"pun\">(</span><span class=\"typ\">File</span><span class=\"pln\"> file</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L3\"><code><span class=\"pln\">        </span><span class=\"typ\">List</span><span class=\"pun\">&lt;</span><span class=\"typ\">Author</span><span class=\"pun\">&gt;</span><span class=\"pln\"> authors </span><span class=\"pun\">=</span><span class=\"pln\"> loadAuthorsFromFile</span><span class=\"pun\">(</span><span class=\"pln\">file</span><span class=\"pun\">);</span></code></li><li class=\"L4\"><code><span class=\"pln\">        sortAuthors</span><span class=\"pun\">(</span><span class=\"pln\">authors</span><span class=\"pun\">);</span></code></li><li class=\"L5\"><code><span class=\"pln\">        </span><span class=\"kwd\">for</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"typ\">Author</span><span class=\"pln\"> author </span><span class=\"pun\">:</span><span class=\"pln\"> authors</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L6\"><code><span class=\"pln\">            </span><span class=\"typ\">System</span><span class=\"pun\">.</span><span class=\"pln\">out</span><span class=\"pun\">.</span><span class=\"pln\">println</span><span class=\"pun\">(</span></code></li><li class=\"L7\"><code><span class=\"pln\">                author</span><span class=\"pun\">.</span><span class=\"pln\">lastName</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"str\">\", \"</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> author</span><span class=\"pun\">.</span><span class=\"pln\">firstName</span><span class=\"pun\">());</span></code></li><li class=\"L8\"><code><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li><li class=\"L9\"><code><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L0\"><code><span class=\"pun\">}</span></code></li></ol></pre>\n</figure>\n</div>\n\n<div class=\"snippet-explanation\" style=\"width: 370px;\">\n<h3>Combine Scala and Java seamlessly</h3>\n<p>Scala classes are ultimately JVM classes. You can create Java objects, call\ntheir methods and inherit from Java classes transparently from Scala.\nSimilarly, Java code can reference Scala classes and objects.</p>\n<p>\nIn this example, the Scala class <code>Author</code> implements the Java\ninterface <code>Comparable&lt;T&gt;</code> and works with Java\n<code>File</code>s. The Java code uses a method from the companion object\n<code>Author</code>, and accesses fields of the <code>Author</code> class.\nIt also uses <code>JavaConversions</code> to convert between Scala collections\nand Java collections.\n</p></div>\n</div>\n<div id=\"hidden-type-inference\"><figure class=\"code type-inference\" style=\"width: 450px; margin-top: 20px;\">\n  <figcaption>Type inference</figcaption>\n  <pre class=\"prettyprint lang-scala linenums\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">scala</span><span class=\"pun\">&gt;</span><span class=\"pln\"> </span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Person</span><span class=\"pun\">(</span><span class=\"kwd\">val</span><span class=\"pln\"> name</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">String</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"kwd\">val</span><span class=\"pln\"> age</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">Int</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">     </span><span class=\"pun\">|</span><span class=\"pln\">   </span><span class=\"kwd\">override</span><span class=\"pln\"> </span><span class=\"kwd\">def</span><span class=\"pln\"> toString </span><span class=\"pun\">=</span><span class=\"pln\"> s</span><span class=\"str\">\"$name ($age)\"</span></code></li><li class=\"L2\"><code><span class=\"pln\">     </span><span class=\"pun\">|</span><span class=\"pln\"> </span><span class=\"pun\">}</span></code></li><li class=\"L3\"><code><span class=\"pln\">defined </span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Person</span></code></li><li class=\"L4\"><code></code></li><li class=\"L5\"><code><span class=\"pln\">scala</span><span class=\"pun\">&gt;</span><span class=\"pln\"> </span><span class=\"kwd\">def</span><span class=\"pln\"> underagePeopleNames</span><span class=\"pun\">(</span><span class=\"pln\">persons</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">List</span><span class=\"pun\">[</span><span class=\"typ\">Person</span><span class=\"pun\">])</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L6\"><code><span class=\"pln\">     </span><span class=\"pun\">|</span><span class=\"pln\">   </span><span class=\"kwd\">for</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">person </span><span class=\"pun\">&lt;-</span><span class=\"pln\"> persons</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"kwd\">if</span><span class=\"pln\"> person</span><span class=\"pun\">.</span><span class=\"pln\">age </span><span class=\"pun\">&lt;</span><span class=\"pln\"> </span><span class=\"lit\">18</span><span class=\"pun\">)</span></code></li><li class=\"L7\"><code><span class=\"pln\">     </span><span class=\"pun\">|</span><span class=\"pln\">     </span><span class=\"kwd\">yield</span><span class=\"pln\"> person</span><span class=\"pun\">.</span><span class=\"pln\">name</span></code></li><li class=\"L8\"><code><span class=\"pln\">     </span><span class=\"pun\">|</span><span class=\"pln\"> </span><span class=\"pun\">}</span></code></li><li class=\"L9\"><code><span class=\"pln\">underagePeopleNames</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">persons</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">List</span><span class=\"pun\">[</span><span class=\"typ\">Person</span><span class=\"pun\">])</span><span class=\"typ\">List</span><span class=\"pun\">[</span><span class=\"typ\">String</span><span class=\"pun\">]</span></code></li><li class=\"L0\"><code></code></li><li class=\"L1\"><code><span class=\"pln\">scala</span><span class=\"pun\">&gt;</span><span class=\"pln\"> </span><span class=\"kwd\">def</span><span class=\"pln\"> createRandomPeople</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L2\"><code><span class=\"pln\">     </span><span class=\"pun\">|</span><span class=\"pln\">   </span><span class=\"kwd\">val</span><span class=\"pln\"> names </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">List</span><span class=\"pun\">(</span><span class=\"str\">\"Alice\"</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">\"Bob\"</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">\"Carol\"</span><span class=\"pun\">,</span></code></li><li class=\"L3\"><code><span class=\"pln\">     </span><span class=\"pun\">|</span><span class=\"pln\">       </span><span class=\"str\">\"Dave\"</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">\"Eve\"</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">\"Frank\"</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pln\">     </span><span class=\"pun\">|</span><span class=\"pln\">   </span><span class=\"kwd\">for</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">name </span><span class=\"pun\">&lt;-</span><span class=\"pln\"> names</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"kwd\">yield</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">     </span><span class=\"pun\">|</span><span class=\"pln\">     </span><span class=\"kwd\">val</span><span class=\"pln\"> age </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"typ\">Random</span><span class=\"pun\">.</span><span class=\"pln\">nextGaussian</span><span class=\"pun\">()*</span><span class=\"lit\">8</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"lit\">20</span><span class=\"pun\">).</span><span class=\"pln\">toInt</span></code></li><li class=\"L6\"><code><span class=\"pln\">     </span><span class=\"pun\">|</span><span class=\"pln\">     </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Person</span><span class=\"pun\">(</span><span class=\"pln\">name</span><span class=\"pun\">,</span><span class=\"pln\"> age</span><span class=\"pun\">)</span></code></li><li class=\"L7\"><code><span class=\"pln\">     </span><span class=\"pun\">|</span><span class=\"pln\">   </span><span class=\"pun\">}</span></code></li><li class=\"L8\"><code><span class=\"pln\">     </span><span class=\"pun\">|</span><span class=\"pln\"> </span><span class=\"pun\">}</span></code></li><li class=\"L9\"><code><span class=\"pln\">createRandomPeople</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">()</span><span class=\"typ\">List</span><span class=\"pun\">[</span><span class=\"typ\">Person</span><span class=\"pun\">]</span></code></li><li class=\"L0\"><code></code></li><li class=\"L1\"><code><span class=\"pln\">scala</span><span class=\"pun\">&gt;</span><span class=\"pln\"> </span><span class=\"kwd\">val</span><span class=\"pln\"> people </span><span class=\"pun\">=</span><span class=\"pln\"> createRandomPeople</span><span class=\"pun\">()</span></code></li><li class=\"L2\"><code><span class=\"pln\">people</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">List</span><span class=\"pun\">[</span><span class=\"typ\">Person</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">List</span><span class=\"pun\">(</span><span class=\"typ\">Alice</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"lit\">16</span><span class=\"pun\">),</span><span class=\"pln\"> </span><span class=\"typ\">Bob</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"lit\">16</span><span class=\"pun\">),</span><span class=\"pln\"> </span><span class=\"typ\">Carol</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"lit\">19</span><span class=\"pun\">),</span><span class=\"pln\"> </span><span class=\"typ\">Dave</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"lit\">18</span><span class=\"pun\">),</span><span class=\"pln\"> </span><span class=\"typ\">Eve</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"lit\">26</span><span class=\"pun\">),</span><span class=\"pln\"> </span><span class=\"typ\">Frank</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"lit\">11</span><span class=\"pun\">))</span></code></li><li class=\"L3\"><code></code></li><li class=\"L4\"><code><span class=\"pln\">scala</span><span class=\"pun\">&gt;</span><span class=\"pln\"> underagePeopleNames</span><span class=\"pun\">(</span><span class=\"pln\">people</span><span class=\"pun\">)</span></code></li><li class=\"L5\"><code><span class=\"pln\">res1</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">List</span><span class=\"pun\">[</span><span class=\"typ\">String</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">List</span><span class=\"pun\">(</span><span class=\"typ\">Alice</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"typ\">Bob</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"typ\">Frank</span><span class=\"pun\">)</span></code></li></ol></pre>\n</figure>\n\n<div class=\"snippet-explanation\">\n  <h3>Let the compiler figure out the types for you</h3>\n<p>The Scala compiler is smart about static types. Most of the time, you need\nnot tell it the types of your variables. Instead, its powerful type inference\nwill figure them out for you.</p>\n<p>\nIn this interactive REPL session (Read-Eval-Print-Loop), we define a\nclass and two functions. You can observe that the compiler infers the result\ntypes of the functions automatically, as well as all the intermediate values.\n</p></div>\n</div>\n<div id=\"hidden-concurrency-distribution\"><figure class=\"code concurrency\" style=\"width: 450px; margin-top: 20px;\">\n  <figcaption>Concurrent/Distributed</figcaption>\n  <pre class=\"prettyprint lang-scala linenums\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">val</span><span class=\"pln\"> x </span><span class=\"pun\">=</span><span class=\"pln\"> future </span><span class=\"pun\">{</span><span class=\"pln\"> someExpensiveComputation</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">}</span></code></li><li class=\"L1\"><code><span class=\"kwd\">val</span><span class=\"pln\"> y </span><span class=\"pun\">=</span><span class=\"pln\"> future </span><span class=\"pun\">{</span><span class=\"pln\"> someOtherExpensiveComputation</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">}</span></code></li><li class=\"L2\"><code><span class=\"kwd\">val</span><span class=\"pln\"> z </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">for</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">a </span><span class=\"pun\">&lt;-</span><span class=\"pln\"> x</span><span class=\"pun\">;</span><span class=\"pln\"> b </span><span class=\"pun\">&lt;-</span><span class=\"pln\"> y</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"kwd\">yield</span><span class=\"pln\"> a</span><span class=\"pun\">*</span><span class=\"pln\">b</span></code></li><li class=\"L3\"><code><span class=\"kwd\">for</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">c </span><span class=\"pun\">&lt;-</span><span class=\"pln\"> z</span><span class=\"pun\">)</span><span class=\"pln\"> println</span><span class=\"pun\">(</span><span class=\"str\">\"Result: \"</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> c</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code><span class=\"pln\">println</span><span class=\"pun\">(</span><span class=\"str\">\"Meanwhile, the main thread goes on!\"</span><span class=\"pun\">)</span></code></li></ol></pre>\n</figure>\n\n<div class=\"snippet-explanation\">\n  <h3>Go Concurrent or Distributed with Futures &amp; Promises</h3>\n<p>In Scala, futures and promises can be used to process data <i>asynchronously</i>, making it easier to parallelize or even distribute your application.</p>\n<p>\nIn this example, the <code>future{}</code> construct evaluates its argument asynchronously, and returns\na handle to the asynchronous result as a <code>Future[Int]</code>.\nFor-comprehensions can be used to register new callbacks (to post new things to do) when the future is\ncompleted, i.e., when the computation is finished.\nAnd since all this is executed asynchronously, without blocking, the main\nprogram thread can continue doing other work in the meantime.\n</p></div>\n</div>\n<div id=\"hidden-traits\">\n\n<figure class=\"code traits\" style=\"width: 450px;\">\n  <figcaption>Traits</figcaption>\n  <pre class=\"prettyprint lang-scala linenums\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">abstract</span><span class=\"pln\"> </span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Spacecraft</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">  </span><span class=\"kwd\">def</span><span class=\"pln\"> engage</span><span class=\"pun\">():</span><span class=\"pln\"> </span><span class=\"typ\">Unit</span></code></li><li class=\"L2\"><code><span class=\"pun\">}</span></code></li><li class=\"L3\"><code><span class=\"kwd\">trait</span><span class=\"pln\"> </span><span class=\"typ\">CommandoBridge</span><span class=\"pln\"> </span><span class=\"kwd\">extends</span><span class=\"pln\"> </span><span class=\"typ\">Spacecraft</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"pln\">  </span><span class=\"kwd\">def</span><span class=\"pln\"> engage</span><span class=\"pun\">():</span><span class=\"pln\"> </span><span class=\"typ\">Unit</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">    </span><span class=\"kwd\">for</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">_ </span><span class=\"pun\">&lt;-</span><span class=\"pln\"> </span><span class=\"lit\">1</span><span class=\"pln\"> to </span><span class=\"lit\">3</span><span class=\"pun\">)</span></code></li><li class=\"L6\"><code><span class=\"pln\">      speedUp</span><span class=\"pun\">()</span></code></li><li class=\"L7\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"kwd\">def</span><span class=\"pln\"> speedUp</span><span class=\"pun\">():</span><span class=\"pln\"> </span><span class=\"typ\">Unit</span></code></li><li class=\"L9\"><code><span class=\"pun\">}</span></code></li><li class=\"L0\"><code><span class=\"kwd\">trait</span><span class=\"pln\"> </span><span class=\"typ\">PulseEngine</span><span class=\"pln\"> </span><span class=\"kwd\">extends</span><span class=\"pln\"> </span><span class=\"typ\">Spacecraft</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">  </span><span class=\"kwd\">val</span><span class=\"pln\"> maxPulse</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">Int</span></code></li><li class=\"L2\"><code><span class=\"pln\">  </span><span class=\"kwd\">var</span><span class=\"pln\"> currentPulse</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">Int</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span></code></li><li class=\"L3\"><code><span class=\"pln\">  </span><span class=\"kwd\">def</span><span class=\"pln\"> speedUp</span><span class=\"pun\">():</span><span class=\"pln\"> </span><span class=\"typ\">Unit</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"pln\">    </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">currentPulse </span><span class=\"pun\">&lt;</span><span class=\"pln\"> maxPulse</span><span class=\"pun\">)</span></code></li><li class=\"L5\"><code><span class=\"pln\">      currentPulse </span><span class=\"pun\">+=</span><span class=\"pln\"> </span><span class=\"lit\">1</span></code></li><li class=\"L6\"><code><span class=\"pln\">  </span><span class=\"pun\">}</span></code></li><li class=\"L7\"><code><span class=\"pun\">}</span></code></li><li class=\"L8\"><code><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">StarCruiser</span><span class=\"pln\"> </span><span class=\"kwd\">extends</span><span class=\"pln\"> </span><span class=\"typ\">Spacecraft</span></code></li><li class=\"L9\"><code><span class=\"pln\">                     </span><span class=\"kwd\">with</span><span class=\"pln\"> </span><span class=\"typ\">CommandoBridge</span></code></li><li class=\"L0\"><code><span class=\"pln\">                     </span><span class=\"kwd\">with</span><span class=\"pln\"> </span><span class=\"typ\">PulseEngine</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"pln\">  </span><span class=\"kwd\">val</span><span class=\"pln\"> maxPulse </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">200</span></code></li><li class=\"L2\"><code><span class=\"pun\">}</span></code></li></ol></pre>\n</figure>\n\n<div class=\"snippet-explanation\">\n  <h3>Flexibly Combine Interface &amp; Behavior</h3>\n  <p>\nIn Scala, <i>multiple traits</i> can be mixed into a class to combine their interface and their\nbehavior.</p>\n<p>Here, a <code>StarCruiser</code> is a <code>Spacecraft</code> with a <code>CommandoBridge</code> that knows how to\nengage the ship (provided a means to speed up) and a <code>PulseEngine</code> that\nspecifies how to speed up.\n</p></div>\n</div>\n<div id=\"hidden-pattern-matching\"><figure class=\"code pattern-matching\" style=\"width: 500px; float: right;\">\n  <figcaption>Pattern matching</figcaption>\n  <pre class=\"prettyprint lang-scala linenums\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">// Define a set of case classes for representing binary trees.</span></code></li><li class=\"L1\"><code><span class=\"kwd\">sealed</span><span class=\"pln\"> </span><span class=\"kwd\">abstract</span><span class=\"pln\"> </span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Tree</span></code></li><li class=\"L2\"><code><span class=\"kwd\">case</span><span class=\"pln\"> </span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Node</span><span class=\"pun\">(</span><span class=\"pln\">elem</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">Int</span><span class=\"pun\">,</span><span class=\"pln\"> left</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">Tree</span><span class=\"pun\">,</span><span class=\"pln\"> right</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">Tree</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"kwd\">extends</span><span class=\"pln\"> </span><span class=\"typ\">Tree</span></code></li><li class=\"L3\"><code><span class=\"kwd\">case</span><span class=\"pln\"> </span><span class=\"kwd\">object</span><span class=\"pln\"> </span><span class=\"typ\">Leaf</span><span class=\"pln\"> </span><span class=\"kwd\">extends</span><span class=\"pln\"> </span><span class=\"typ\">Tree</span></code></li><li class=\"L4\"><code></code></li><li class=\"L5\"><code><span class=\"com\">// Return the in-order traversal sequence of a given tree.</span></code></li><li class=\"L6\"><code><span class=\"kwd\">def</span><span class=\"pln\"> inOrder</span><span class=\"pun\">(</span><span class=\"pln\">t</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">Tree</span><span class=\"pun\">):</span><span class=\"pln\"> </span><span class=\"typ\">List</span><span class=\"pun\">[</span><span class=\"typ\">Int</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> t </span><span class=\"kwd\">match</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L7\"><code><span class=\"pln\">  </span><span class=\"kwd\">case</span><span class=\"pln\"> </span><span class=\"typ\">Node</span><span class=\"pun\">(</span><span class=\"pln\">e</span><span class=\"pun\">,</span><span class=\"pln\"> l</span><span class=\"pun\">,</span><span class=\"pln\"> r</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> inOrder</span><span class=\"pun\">(</span><span class=\"pln\">l</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">:::</span><span class=\"pln\"> </span><span class=\"typ\">List</span><span class=\"pun\">(</span><span class=\"pln\">e</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">:::</span><span class=\"pln\"> inOrder</span><span class=\"pun\">(</span><span class=\"pln\">r</span><span class=\"pun\">)</span></code></li><li class=\"L8\"><code><span class=\"pln\">  </span><span class=\"kwd\">case</span><span class=\"pln\"> </span><span class=\"typ\">Leaf</span><span class=\"pln\">          </span><span class=\"pun\">=&gt;</span><span class=\"pln\"> </span><span class=\"typ\">List</span><span class=\"pun\">()</span></code></li><li class=\"L9\"><code><span class=\"pun\">}</span></code></li></ol></pre>\n</figure>\n\n<div class=\"snippet-explanation\" style=\"width: 350px;\">\n  <h3>Switch on the structure of your data</h3>\n<p>In Scala, <em>case classes</em> are used to represent structural data\ntypes. They implicitly equip the class with meaningful <code>toString</code>,\n<code>equals</code> and <code>hashCode</code> methods, as well as the\nability to be deconstructed with <em>pattern matching</em>.</p>\n<p>\nIn this example, we define a small set of case classes that represent binary\ntrees of integers (the generic version is omitted for simplicity here).\nIn <code>inOrder</code>, the <code>match</code> construct chooses the right\nbranch, depending on the type of <code>t</code>, and at the same time\ndeconstructs the arguments of a <code>Node</code>.\n</p></div>\n</div>\n<div id=\"hidden-higher-order-functions\"><div class=\"snippet-explanation\" style=\"width: 100%;\">\n  <h3>Go Functional with Higher-Order Functions</h3>\n  <p>In Scala, functions are values, and can be defined as anonymous functions\n  with a concise syntax.</p>\n</div>\n\n<figure class=\"code\" style=\"width: 445px; float: left;\">\n  <figcaption>Scala</figcaption>\n  <pre class=\"prettyprint lang-scala linenums\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">val</span><span class=\"pln\"> people</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">Array</span><span class=\"pun\">[</span><span class=\"typ\">Person</span><span class=\"pun\">]</span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code><span class=\"com\">// Partition `people` into two arrays `minors` and `adults`.</span></code></li><li class=\"L3\"><code><span class=\"com\">// Use the higher-order function `(_.age &lt; 18)` as a predicate for partitioning.</span></code></li><li class=\"L4\"><code><span class=\"kwd\">val</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">minors</span><span class=\"pun\">,</span><span class=\"pln\"> adults</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> people partition </span><span class=\"pun\">(</span><span class=\"pln\">_</span><span class=\"pun\">.</span><span class=\"pln\">age </span><span class=\"pun\">&lt;</span><span class=\"pln\"> </span><span class=\"lit\">18</span><span class=\"pun\">)</span></code></li></ol></pre>\n</figure>\n<figure class=\"code\" style=\"width: 445px; float: right;\">\n  <figcaption>Java</figcaption>\n  <pre class=\"prettyprint lang-scala linenums\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"typ\">List</span><span class=\"pun\">&lt;</span><span class=\"typ\">Person</span><span class=\"pun\">&gt;</span><span class=\"pln\"> people</span><span class=\"pun\">;</span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code><span class=\"typ\">List</span><span class=\"pun\">&lt;</span><span class=\"typ\">Person</span><span class=\"pun\">&gt;</span><span class=\"pln\"> minors </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">ArrayList</span><span class=\"pun\">&lt;</span><span class=\"typ\">Person</span><span class=\"pun\">&gt;(</span><span class=\"pln\">people</span><span class=\"pun\">.</span><span class=\"pln\">size</span><span class=\"pun\">());</span></code></li><li class=\"L3\"><code><span class=\"typ\">List</span><span class=\"pun\">&lt;</span><span class=\"typ\">Person</span><span class=\"pun\">&gt;</span><span class=\"pln\"> adults </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">ArrayList</span><span class=\"pun\">&lt;</span><span class=\"typ\">Person</span><span class=\"pun\">&gt;(</span><span class=\"pln\">people</span><span class=\"pun\">.</span><span class=\"pln\">size</span><span class=\"pun\">());</span></code></li><li class=\"L4\"><code><span class=\"kwd\">for</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"typ\">Person</span><span class=\"pln\"> person </span><span class=\"pun\">:</span><span class=\"pln\"> people</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code><span class=\"pln\">    </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">person</span><span class=\"pun\">.</span><span class=\"pln\">getAge</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">&lt;</span><span class=\"pln\"> </span><span class=\"lit\">18</span><span class=\"pun\">)</span></code></li><li class=\"L6\"><code><span class=\"pln\">        minors</span><span class=\"pun\">.</span><span class=\"pln\">add</span><span class=\"pun\">(</span><span class=\"pln\">person</span><span class=\"pun\">);</span></code></li><li class=\"L7\"><code><span class=\"pln\">    </span><span class=\"kwd\">else</span></code></li><li class=\"L8\"><code><span class=\"pln\">        adults</span><span class=\"pun\">.</span><span class=\"pln\">add</span><span class=\"pun\">(</span><span class=\"pln\">person</span><span class=\"pun\">);</span></code></li><li class=\"L9\"><code><span class=\"pun\">}</span></code></li></ol></pre>\n</figure>\n\n<div class=\"snippet-explanation\" style=\"width: 100%;\">\n  <p>\n    In the Scala example on the left, the <code>partition</code> method, available on all\n    collection types (including <code>Array</code>), returns two new collections\n    of the same type. Elements from the original collection are partitioned\n    according to a predicate, which is given as a lambda, i.e., an anonymous\n    function. The <code>_</code> stands for the parameter to the lambda, i.e.,\n    the element that is being tested. This particular lambda can also be written\n    as <code>(x =&gt; x.age &lt; 18)</code>.\n  </p>\n  <p>The same program is implemented in Java on the right.</p>\n</div></div>\n\n<div class=\"events\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"span12 upcoming-events\">\n        <h2><span>Upcoming Events</span></h2>\n      </div>\n\n      <div class=\"span12\" id=\"eventspane\">\n      <a class=\"event-item-wrap event-item-front-page\" href=\"http://2017.flatmap.no/\"><div class=\"event-item\"><div class=\"event-title\">flatMap(Oslo)</div><div class=\"event-logo\"><img class=\"event-logo\" src=\"/resources/img/flatmap-oslo-17.png\" alt=\"Logo\"></div><div class=\"event-float-right\"><div class=\"event-location\">Oslo, Norway</div><div class=\"event-date\">May 2-3 2017</div></div></div></a><a class=\"event-item-wrap event-item-front-page\" href=\"http://www.lxscala.com/\"><div class=\"event-item\"><div class=\"event-title\">LX Scala</div><div class=\"event-logo\"><img class=\"event-logo\" src=\"http://www.lxscala.com/img/favicons/favicon-160x160.png\" alt=\"Logo\"></div><div class=\"event-float-right\"><div class=\"event-location\">Lisbon, Portugal</div><div class=\"event-date\">May 12 2017</div></div></div></a><a class=\"event-item-wrap event-item-front-page\" href=\"http://2017.scala-italy.it/\"><div class=\"event-item\"><div class=\"event-title\">Scala Italy</div><div class=\"event-logo\"><img class=\"event-logo\" src=\"/resources/img/scala-italy.jpeg\" alt=\"Logo\"></div><div class=\"event-float-right\"><div class=\"event-location\">Rome, Italy</div><div class=\"event-date\">May 13 2017</div></div></div></a><a class=\"event-item-wrap event-item-front-page\" href=\"http://lambdaconf.us\"><div class=\"event-item\"><div class=\"event-title\">LambdaConf 2017</div><div class=\"event-logo\"><img class=\"event-logo\" src=\"/resources/img/lambdaconf.png\" alt=\"Logo\"></div><div class=\"event-float-right\"><div class=\"event-location\">Boulder, CO, USA</div><div class=\"event-date\">May 25-27 2017</div></div></div></a><a class=\"event-item-wrap event-item-front-page\" href=\"http://scaladays.org/\"><div class=\"event-item\"><div class=\"event-title\">Scala Days Copenhagen</div><div class=\"event-logo\"><img class=\"event-logo\" src=\"/resources/img/scaladays-15.png\" alt=\"Logo\"></div><div class=\"event-float-right\"><div class=\"event-location\">Copenhagen, Denmark</div><div class=\"event-date\">May 30 - Jun 2 2017</div></div></div></a></div>\n    </div>\n  </div>\n\n   <div class=\"add-event\"><a href=\"/events\">See more events</a> or <a href=\"https://github.com/scala/scala-lang/tree/master/events\">add one to our feed</a></div>\n\n</div>\n\n<div class=\"training\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"span12 upcoming-training\">\n        <h2><span>Upcoming Training</span></h2>\n      </div>\n      <div class=\"span12\" id=\"trainingspane\">\n        <div class=\"add-training\"><a href=\"/training\">See more trainings</a> or <a href=\"https://github.com/scala/scala-lang/tree/master/training\">add one to our feed</a>\n        </div>\n\n      <a class=\"training-item-wrap training-item-front-page\" href=\"https://www.eventbrite.it/e/biglietti-fast-track-to-scala-ticket-scala-italy-2017-32468070874\"><div class=\"training-item\"><div class=\"training-title\">Fast Track to Scala</div><div class=\"training-date\"><div class=\"date\"><div class=\"month\">May</div><div class=\"day\">11</div></div><div class=\"year\">2017</div></div><div class=\"training-float-right\"><div class=\"training-location\">Rome - Scala Italy 2017</div><div class=\"training-trainers-name\"> By Carlo Sana</div><div class=\"training-organizer\">databiz.it</div></div></div></a><a class=\"training-item-wrap training-item-front-page\" href=\"http://lp.trivento.nl/fast-track-to-scala-trainingen\"><div class=\"training-item\"><div class=\"training-title\">Fast Track to Scala</div><div class=\"training-date\"><div class=\"date\"><div class=\"month\">May</div><div class=\"day\">11</div></div><div class=\"year\">2017</div></div><div class=\"training-float-right\"><div class=\"training-location\">Amersfoort, The Netherlands</div><div class=\"training-organizer\">Trivento</div></div></div></a><a class=\"training-item-wrap training-item-front-page\" href=\"https://www.eventbrite.it/e/biglietti-fast-track-to-akka-with-scala-ticket-scala-italy-2017-32469341675\"><div class=\"training-item\"><div class=\"training-title\">Fast Track to Akka with Scala</div><div class=\"training-date\"><div class=\"date\"><div class=\"month\">May</div><div class=\"day\">11</div></div><div class=\"year\">2017</div></div><div class=\"training-float-right\"><div class=\"training-location\">Rome - Scala Italy 2017</div><div class=\"training-trainers-name\"> By Emanuele Bezzi</div><div class=\"training-organizer\">databiz.it</div></div></div></a><a class=\"training-item-wrap training-item-front-page\" href=\"https://www.eventbrite.it/e/biglietti-apache-spark-ticket-scala-italy-2017-32469771962\"><div class=\"training-item\"><div class=\"training-title\">Apache Spark: An Introductory Workshop for Developers</div><div class=\"training-date\"><div class=\"date\"><div class=\"month\">May</div><div class=\"day\">11</div></div><div class=\"year\">2017</div></div><div class=\"training-float-right\"><div class=\"training-location\">Rome - Scala Italy 2017</div><div class=\"training-trainers-name\"> By Andrea Bessi</div><div class=\"training-organizer\">databiz.it</div></div></div></a><a class=\"training-item-wrap training-item-front-page\" href=\"http://event.scaladays.org/scaladays-cph-2017\"><div class=\"training-item\"><div class=\"training-title\">Fast Track to Scala</div><div class=\"training-date\"><div class=\"date\"><div class=\"month\">May</div><div class=\"day\">30</div></div><div class=\"year\">2017</div></div><div class=\"training-float-right\"><div class=\"training-location\">Copenhagen</div><div class=\"training-organizer\">ScalaDays</div></div></div></a></div>\n    </div>\n  </div>\n</div>\n\n<div class=\"news\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"span12\">\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"span7\">\n  <h2 class=\"whats-new\">What's New</h2>\n  <!-- This is a horrendous way to filter out elements in an array. Blasphemy. Blame Liquid. -->\n  \n  \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n      \n      \n      <div class=\"news-item newsbox left\" style=\"height: 540px;\">\n        \n          <div class=\"news-category\">announcement</div>\n        \n        \n          <div class=\"news-title\"><a href=\"/news/releases-1Q17.html\">Three new releases and more GitHub goodness!</a></div>\n        \n        \n        <div class=\"news-date\"><img src=\"/resources/img/date-icon.png\" alt=\"date icon\"> Tuesday, April 18, 2017</div>\n        \n          <div class=\"news-body\"><p>We are happy to announce three new Scala releases: 2.11.11 concludes the 2.11 series, 2.12.2 brings bug fixes and small improvements, and 2.13.0-M1 sets the scene for modularization and improvements coming in the next major release next year. Many thanks to everyone who contributed!</p>\n\n<p>As part of our ongoing efforts at Lightbend to simplify contributing to Scala, we are thrilled to announce our move to GitHub for <a href=\"https://github.com/scala/bug\">bug reporting</a>, as well as for <a href=\"https://github.com/scala/scala/releases\">release notes</a>.</p>\n\n<p>For the highlights of these three releases, read on.</p>\n\n<!-- break -->\n\n<p><a href=\"https://github.com/scala/scala/releases/tag/v2.11.11\">Scala 2.11.11</a> contains many smaller fixes and a few backports from 2.12. It also features improved error messages on missing dependencies; this improvement was developed by @jvican at the Scala Center under proposal SCP-009, which aims to speed up builds by <a href=\"https://github.com/scalacenter/classpath-shrinker\">shrinking the build classpath</a>.</p>\n\n<p>(Yes, we skipped 2.11.9 and 2.11.10. Special thanks to @xuwei-k and @sjrd for reporting and helping diagnose the regressions in those withdrawn releases.)</p>\n\n<p><a href=\"https://github.com/scala/scala/releases/tag/v2.12.2\">Scala 2.12.2</a> adds support for trailing commas, the first proposal (<a href=\"http://docs.scala-lang.org/sips/completed/trailing-commas.html\">SIP-27</a>) to make it all the way through the revived Scala Improvement Process. Congratulations, @dwijnand!</p>\n\n<p><a href=\"https://github.com/scala/scala/releases/tag/v2.13.0-M1\">Scala 2.13.0-M1</a> (milestone 1) prepares for the next phase of the standard library <a href=\"https://github.com/scala/scala-dev/issues/323\">modularization</a> and the <a href=\"https://github.com/scala/collection-strawman\">collections rework</a>. The parallel collections are now a separate <a href=\"https://github.com/scala/scala-parallel-collections\">module</a>, and many deprecated members have been removed. As a reminder, our <a href=\"https://github.com/scala/scala-dev/issues/324\">full 2.13 roadmap</a> is available for review on GitHub.</p>\n</div>\n        \n      </div>\n      <div class=\"shadow\" style=\"display: block;\">\n        \n          <div class=\"more\"><a href=\"/news/releases-1Q17.html\">more...</a></div>\n        \n      </div>\n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n    \n  \n</div>\n<div class=\"span5 newsbox right\">\n  <h2 class=\"recently\">Recently...</h2>\n  <div class=\"recent-news-items\">\n    <!-- This is a horrendous way to filter out elements in an array. Blasphemy. Blame Liquid. -->\n    \n    \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n        \n        \n          <div class=\"recent-news-item\">\n            \n              <div class=\"recent-news-title\"><a href=\"/blog/2017/04/01/announcing-skala.html\">Introducing Skala: A New Vision for Dotty</a></div>\n            \n            \n            <div class=\"recent-news-date\"><img style=\"margin-top: -3px;\" src=\"/resources/img/recent-date-icon.png\" alt=\"date-icon\"> Saturday, April 01, 2017\n            \n              <span class=\"recent-news-category\">blog</span>\n            </div>\n            \n              <div class=\"recent-news-body\">Introducing Skala: A New Vision for Dotty We are very proud today to be able to reveal that Dotty, sometimes referred to as “Scala 3”,...</div>\n            \n          </div>\n        \n      \n    \n      \n    \n      \n    \n      \n        \n        \n          <div class=\"recent-news-item\">\n            \n              <div class=\"recent-news-title\"><a href=\"/blog/2017/03/14/scala-native-0.1-is-here.html\">Scala Native v0.1 is here!</a></div>\n            \n            \n            <div class=\"recent-news-date\"><img style=\"margin-top: -3px;\" src=\"/resources/img/recent-date-icon.png\" alt=\"date-icon\"> Tuesday, March 14, 2017\n            \n              <span class=\"recent-news-category\">blog</span>\n            </div>\n            \n              <div class=\"recent-news-body\">We’re excited to announce the first release of Scala Native, an optimising ahead-of-time compiler for Scala built on top of the LLVM compiler infrastructure. Unlike...</div>\n            \n          </div>\n        \n      \n    \n      \n        \n        \n          <div class=\"recent-news-item\">\n            \n              <div class=\"recent-news-title\"><a href=\"/blog/2017/03/13/spark-mooc-capstone-live-on-coursera.html\">Spark/Scala MOOC + Capstone Project Now Live on Coursera!</a></div>\n            \n            \n            <div class=\"recent-news-date\"><img style=\"margin-top: -3px;\" src=\"/resources/img/recent-date-icon.png\" alt=\"date-icon\"> Monday, March 13, 2017\n            \n              <span class=\"recent-news-category\">blog</span>\n            </div>\n            \n              <div class=\"recent-news-body\">We’re very excited to announce that our new MOOC “Big Data Analysis with Scala and Spark” and the Scala Specialization Capstone project are now live...</div>\n            \n          </div>\n        \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n      \n    \n  </div>\n  <!-- <a class=\"more-news\">More News</div> -->\n  <a class=\"rss\" href=\"/feed/index.xml\"><img src=\"/resources/img/rss-icon.png\" alt=\"date-icon\"></a>\n</div>\n<div class=\"span12\">\n  <div class=\"post-news\">\n    For more, visit our<br>\n    <a class=\"archive-btn\" href=\"/news/\" title=\"Archive\">News archive</a>\n    or\n    <a class=\"archive-btn\" href=\"/blog/\" title=\"News archive\">Blog</a>\n  </div>\n</div>\n\n    </div>\n  </div>\n</div>\n\n<div class=\"twitter\">\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"span12\">\n        <h2 class=\"twitterhdr\"><span>Scala on Twitter</span></h2>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"span12\">\n        <div id=\"tweets\" class=\"tweets\">\n          <iframe id=\"twitter-widget-0\" scrolling=\"no\" frameborder=\"0\" allowtransparency=\"true\" allowfullscreen=\"true\" class=\"twitter-timeline twitter-timeline-rendered\" style=\"position: static; visibility: visible; display: inline-block; width: 520px; padding: 0px; border: none; max-width: 100%; min-width: 180px; margin-top: 0px; margin-bottom: 0px; height: 1212.75px;\" data-widget-id=\"profile:scala_lang\" title=\"Twitter Timeline\"></iframe> <script async=\"\" src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n        </div>\n        <br>&nbsp;\n        <div class=\"see-more-tweets\">See more tweets, or</div>\n        <a id=\"twitter-btn\" href=\"https://twitter.com/scala_lang\">Follow Scala on Twitter</a>\n        <br><a style=\"border-bottom: 0px;\" href=\"https://twitter.com/scala_lang\"><img style=\"padding-top: 8px;\" src=\"/resources/img/twitter-logo-white-lg.png\" alt=\"white Twitter logo\"></a>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"epfl-picture-box\">\n  <div class=\"container\">\n  </div>\n</div>\n\n\n  <div class=\"footer\">\n  <div class=\"container\">\n    <ul>\n      <li><h5>Documentation</h5></li>\n      <li><a href=\"/documentation/getting-started.html\">Getting Started</a></li>\n      <li><a href=\"http://www.scala-lang.org/api/current/index.html#package\">API</a></li>\n      <li><a href=\"http://docs.scala-lang.org/overviews/\">Overviews/Guides</a></li>\n      <li><a href=\"http://docs.scala-lang.org/tutorials/\">Tutorials</a></li>\n      <li><a href=\"/files/archive/spec/2.12/\">Language Specification</a></li>\n    </ul>\n    <ul>\n      <li><h5>Download</h5></li>\n        <li><a href=\"/download/\">Current Version</a></li>\n\t<li><a href=\"/download/all.html\">All Versions</a></li>\n    </ul>\n    <ul>\n      <li><h5>Community</h5></li>\n      <li><a href=\"/community/\">Community</a></li>\n      <li><a href=\"/community/index.html#mailing-lists\">Mailing Lists</a></li>\n      <li><a href=\"/community/index.html#chat-rooms\">Chat Rooms &amp; More</a></li>\n      <li><a href=\"/community/index.html#community-libraries-and-tools\">Libraries and Tools</a></li>\n      <li><a href=\"https://scala.epfl.ch/\">The Scala Center</a></li>\n    </ul>\n    <ul>\n      <li><h5>Contribute</h5></li>\n      <li><a href=\"/contribute\">How to Help</a></li>\n      <li><a href=\"/contribute/bug-reporting-guide.html\">Report an Issue</a></li>\n    </ul>\n    <ul>\n      <li><h5>Scala</h5></li>\n      <li><a href=\"/blog\">Blog</a></li>\n      <li><a href=\"/news\">Archive</a></li>\n      <li><a href=\"/conduct.html\">Code of Conduct</a></li>\n      <li><a href=\"/license.html\">License</a></li>\n    </ul>\n    </div>\n    <div class=\"container\">\n      <div class=\"copyright\">\n        <a style=\"float: left; margin-right: 8px;\" href=\"http://www.epfl.ch\"><img src=\"/resources/img/epfl-logo.png\" alt=\"EPFL logo\"></a>\n        <p style=\"float: left;\"><br>Copyright © 2002-<span class=\"current-year\">2017</span> École Polytechnique Fédérale de Lausanne\n        (EPFL)<br> Lausanne, Switzerland</p>\n      </div>\n      <div class=\"scala-logo-footer\">\n        <img src=\"/resources/img/scala-logo-red-footer.png\" alt=\"Scala footer logo\">\n      </div>\n    </div> <!-- container -->\n    </div> <!-- footer -->\n\n    <!-- prettify  js -->\n    <script src=\"/resources/js/vendor/prettify/prettify.js\" type=\"text/javascript\"></script>\n    <script src=\"/resources/js/vendor/prettify/lang-scala.js\" type=\"text/javascript\"></script>\n\n    <!-- jquery js -->\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js\" integrity=\"sha384-lifoBlbdwizTl3Yoe612uhI3AcOam/QtWkozF7SuiACaf5UJl5reOYu4MigVxrCH\" crossorigin=\"anonymous\"></script>\n\n    <!-- modernizr js -->\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js\" integrity=\"sha256-zyXsGPIj9MUc4RKKQuZEzcIkTYj4nRpRRA2dvlH07+g=\" crossorigin=\"anonymous\"></script>\n\n    <!-- retina js -->\n    <script src=\"/resources/js/vendor/retina.js\" type=\"text/javascript\"></script>\n\n    <!-- backstretch js -->\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery-backstretch/2.0.4/jquery.backstretch.min.js\" integrity=\"sha256-V52dl3OFjoY+fYAkifhLJ7f1V7mZAKPGCQoWzoQxrEU=\" crossorigin=\"anonymous\"></script>\n\n    <!-- Bootstrap JS -->\n    <script src=\"https://maxcdn.bootstrapcdn.com/twitter-bootstrap/2.2.1/js/bootstrap.min.js\" integrity=\"sha384-qJ8AGIuPqPo4I2zhyRYO6vQaJrGBbTpIiXGihDsGpfMCHJD0IKH0gkPQToGD5ek3\" crossorigin=\"anonymous\"></script>\n\n    \n    <!-- table of contents JS -->\n    <script src=\"/resources/js/vendor/toc.js\" type=\"text/javascript\"></script>\n    <script type=\"text/javascript\">\n      $(document).ready(function(){\n        $('#toc').toc({exclude: 'h1, h5, h6', context: '', autoId: true, numerate: false});\n        function moveScroller() {\n          if ($(\".sidebar\").length == 0)\n            return;\n          var a = function() {\n            var topOfScroll = $(window).scrollTop();\n            var topOfSidebar = $(\".sidebar\").offset().top;\n            var sidebarInner = $(\".sidebar-inner\");\n            var bottomOfSidebarInner = $(\".sidebar-inner\").offset().top + $(\".sidebar-inner\").outerHeight();\n            var topOfFooter = $(\".footer\").offset().top - 10;\n            var footerHeight = $(\".footer\").outerHeight();\n            if (topOfScroll > topOfSidebar) {\n              if (bottomOfSidebarInner > topOfFooter) {\n                sidebarInner.css({position:\"fixed\",bottom:footerHeight,top:\"\"});\n              } else {\n                sidebarInner.css({position:\"fixed\",top:\"10px\",bottom:\"\"});\n              }\n            } else {\n              sidebarInner.css({position:\"relative\",top:\"\"});\n            }\n          };\n          $(window).scroll(a);a()\n        }\n        moveScroller();\n      })\n    </script>\n    \n\n    <!-- Custom javascript -->\n    <script src=\"/resources/js/main.js\" type=\"text/javascript\"></script>\n  \n\n\n</body>"}
