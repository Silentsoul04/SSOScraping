{"link":"exceptionnotfound.net","html":"<head>\n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<title>Exception Not Found</title>\n<meta name=\"description\" content=\"Stories from the life of a web developer.\">\n<meta name=\"google-site-verification\" content=\"UsEXXHAlsx68y20c-z8bRG5_L0ehExVpIGXDmA8Asjc\">\n<meta name=\"msvalidate.01\" content=\"9473931314B854C6B4F2D6FD9473E3AB\">\n<meta name=\"HandheldFriendly\" content=\"True\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<script type=\"text/javascript\">\n//<![CDATA[\ntry{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:\"cf\",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:\"/cdn-cgi/nexp/dok3v=1613a3a185/\"},atok:\"b61e03b14f93b81fa475389b62f577b9\",petok:\"d33a69ea68a1362321c5309a832e84d3df400d89-1492843986-1800\",zone:\"exceptionnotfound.net\",rocket:\"a\",apps:0}];document.write('<script type=\"text/javascript\" src=\"//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=85b614c0f6/cloudflare.min.js\"><'+'\\/script>');}}catch(e){};\n//]]>\n</script><script type=\"text/javascript\" src=\"//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=85b614c0f6/cloudflare.min.js\"></script><style type=\"text/css\">.cf-hidden { display: none; } .cf-invisible { visibility: hidden; }</style><script data-module=\"cloudflare/rocket\" id=\"cfjs_block_a93f04a568\" onload=\"CloudFlare.__cfjs_block_a93f04a568_load()\" onerror=\"CloudFlare.__cfjs_block_a93f04a568_error()\" onreadystatechange=\"CloudFlare.__cfjs_block_a93f04a568_readystatechange()\" type=\"text/javascript\" src=\"https://www.exceptionnotfound.net/cdn-cgi/nexp/dok3v=1613a3a185/cloudflare/rocket.js\"></script>\n<link rel=\"shortcut icon\" href=\"/content/images/2015/06/profile-pic.jpg\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/css/screen.css?v=b3b355c47a\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/css/jquery-ui.min.css?v=b3b355c47a\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/css/jquery-ui.structure.min.css?v=b3b355c47a\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/css/jquery-ui.theme.min.css?v=b3b355c47a\">\n<link href=\"//fonts.googleapis.com/css?family=Open+Sans:400,700\" rel=\"stylesheet\" type=\"text/css\">\n<link rel=\"canonical\" href=\"https://www.exceptionnotfound.net/\">\n<meta name=\"referrer\" content=\"no-referrer-when-downgrade\">\n<link rel=\"next\" href=\"https://www.exceptionnotfound.net/page/2/\">\n<meta property=\"og:site_name\" content=\"Exception Not Found\">\n<meta property=\"og:type\" content=\"website\">\n<meta property=\"og:title\" content=\"Exception Not Found\">\n<meta property=\"og:description\" content=\"Stories from the life of a web developer.\">\n<meta property=\"og:url\" content=\"https://www.exceptionnotfound.net/\">\n<meta name=\"twitter:card\" content=\"summary\">\n<meta name=\"twitter:title\" content=\"Exception Not Found\">\n<meta name=\"twitter:description\" content=\"Stories from the life of a web developer.\">\n<meta name=\"twitter:url\" content=\"https://www.exceptionnotfound.net/\">\n<meta name=\"twitter:site\" content=\"@ExceptionFound\">\n<script type=\"application/ld+json\">\n{\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Website\",\n    \"publisher\": {\n        \"@type\": \"Organization\",\n        \"name\": \"Exception Not Found\",\n        \"logo\": \"https://www.exceptionnotfound.net/content/images/2015/06/profile-pic.jpg\"\n    },\n    \"url\": \"https://www.exceptionnotfound.net/\",\n    \"mainEntityOfPage\": {\n        \"@type\": \"WebPage\",\n        \"@id\": \"https://www.exceptionnotfound.net\"\n    },\n    \"description\": \"Stories from the life of a web developer.\"\n}\n    </script>\n\n\n<meta name=\"generator\" content=\"Ghost 0.11\">\n<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Exception Not Found\" href=\"https://www.exceptionnotfound.net/rss/\">\n\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/css/prism.min.css?v=b3b355c47a\">\n</head>\n<body class=\"home-template\">\n<div class=\"tablewrapper\">\n<div class=\"rowwrapper\">\n<div id=\"sidebar\">\n<div id=\"sidebar-content\" class=\"inner\">\n<a id=\"blog-logo\" class=\"blog-logo\" href=\"https://www.exceptionnotfound.net\"><img src=\"/content/images/2015/06/profile-pic.jpg\" alt=\"Exception Not Found\"></a>\n<h2 class=\"blog-title\"><a href=\"https://www.exceptionnotfound.net\">Exception Not Found</a></h2>\n<h3 class=\"blog-description\">Stories from the life of a web developer.</h3>\n<div class=\"sidebar-links\">\n<a class=\"fa fa-twitter-square\" href=\"https://twitter.com/ExceptionFound\" title=\"Follow me on Twitter!\">\n<span class=\"hidden\">Twitter</span>\n</a>\n<a class=\"fa fa-github-square\" href=\"https://github.com/exceptionnotfound\" title=\"Check out my projects on GitHub!\">\n<span class=\"hidden\">Github</span>\n</a>\n<a class=\"fa fa-rss-square\" href=\"http://feeds.feedburner.com/ExceptionNotFound\" target=\"_blank\" title=\"Subscribe via RSS\">\n<span class=\"hidden\">RSS</span>\n</a>\n<a class=\"fa fa-envelope-square\" href=\"https://feedburner.google.com/fb/a/mailverify?uri=ExceptionNotFound&amp;loc=en_US\" title=\"Subscribe via email\">\n<span class=\"hidden\">Subscribe!</span>\n</a>\n<a class=\"fa fa-plus-square\" href=\"/all-posts/\" title=\"All my posts\">\n<span class=\"hidden\">Post Archive</span>\n</a>\n</div> <div class=\"desktop-sidebar\">\n<a href=\"#\" onclick=\"return false;\" class=\"ebookLink\"><h6 class=\"ebook-title\">Get \"The Daily Design Pattern\" FREE!</h6></a>\n<a href=\"https://www.exceptionnotfound.net/all-posts/\"><h6 class=\"ebook-title\">Check out my post archive!</h6></a>\n<div class=\"main-ad\">\n<div data-type=\"ad\" data-publisher=\"exceptionnotfound.net\" data-format=\"300x250\" data-zone=\"ros\"></div>\n</div> </div>\n<div class=\"sidebar-links desktop-sidebar\">\n<h6 class=\"random-posts-title\">Five Random Posts</h6>\n<ul id=\"featured-posts-list\"></ul>\n</div>\n</div>\n</div>\n<div>\n<main>\n<div class=\"main-inner\">\n<article class=\"post tag-musings tag-work-life-balance tag-personal-time\">\n<section class=\"post-container\">\n<header class=\"post-header\">\n<h1 class=\"post-title\"><a href=\"/how-much-magic-are-we-comfortable-with-2/\">How Much \"Magic\" Are We Comfortable With?</a></h1>\n<section class=\"post-meta\">\n<span class=\"post-time\">\n<i class=\"fa fa-calendar\"></i>\n<time datetime=\"2017-04-09\" class=\"fulldate\">April 9th, 2017</time>\n</span>\n<br><i class=\"fa fa-tag\"></i> <a href=\"/tag/musings/\">musings</a> · <a href=\"/tag/work-life-balance/\">work-life-balance</a> · <a href=\"/tag/personal-time/\">personal-time</a>\n<br><i class=\"fa fa-comment-o\"></i> <a href=\"/how-much-magic-are-we-comfortable-with-2/#disqus_thread\">Comments</a>\n</section>\n<section class=\"post-share-links\">\n<span class=\"share\">\n<div class=\"share-icons\">\n<a class=\"fa fa-twitter-square\" href=\"https://twitter.com/intent/tweet?text=How%20Much%20%22Magic%22%20Are%20We%20Comfortable%20With%3F&amp;url=https://www.exceptionnotfound.net/how-much-magic-are-we-comfortable-with-2/\">\n<span class=\"hidden\">Twitter</span>\n</a>\n<a class=\"fa fa-facebook-square\" href=\"https://www.facebook.com/sharer/sharer.php?u=https://www.exceptionnotfound.net/how-much-magic-are-we-comfortable-with-2/\">\n<span class=\"hidden\">Facebook</span>\n</a>\n<a class=\"fa fa-google-plus-square\" href=\"https://plus.google.com/share?url=https://www.exceptionnotfound.net/how-much-magic-are-we-comfortable-with-2/\">\n<span class=\"hidden\">Google+</span>\n</a>\n<a class=\"fa fa-linkedin-square\" href=\"https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.exceptionnotfound.net/how-much-magic-are-we-comfortable-with-2/\">\n<span class=\"hidden\">LinkedIn</span>\n</a>\n<a class=\"fa fa-reddit-square\" href=\"https://www.reddit.com/submit?url=https://www.exceptionnotfound.net/how-much-magic-are-we-comfortable-with-2/&amp;title=How%20Much%20%22Magic%22%20Are%20We%20Comfortable%20With%3F\">\n<span class=\"hidden\">Reddit</span>\n</a>\n<a class=\"fa fa-hacker-news\" href=\"http://news.ycombinator.com/submitlink?u=https://www.exceptionnotfound.net/how-much-magic-are-we-comfortable-with-2/&amp;t=How%20Much%20%22Magic%22%20Are%20We%20Comfortable%20With%3F\">\n<span class=\"hidden\">Hacker News</span>\n</a>\n<a class=\"fa fa-envelope-square\" href=\"/cdn-cgi/l/email-protection#83bcf0f6e1e9e6e0f7bec6fbe0e6f3f7eaeceda6b1b3cdecf7a6b1b3c5ecf6ede7a6b0c2a6b1b3cbecf4a6b1b3cef6e0eba6b1b3a6b1b1cee2e4eae0a6b1b1a6b1b3c2f1e6a6b1b3d4e6a6b1b3c0eceee5ecf1f7e2e1efe6a6b1b3d4eaf7eba6b0c5a5e2eef3b8e1ece7fabeebf7f7f3f0b9acacf4f4f4ade6fbe0e6f3f7eaecededecf7e5ecf6ede7adede6f7acebecf4aeeef6e0ebaeeee2e4eae0aee2f1e6aef4e6aee0eceee5ecf1f7e2e1efe6aef4eaf7ebaeb1ac\">\n<span class=\"hidden\">Hacker News</span>\n</a>\n</div>\n</span>\n</section> </header>\n<section class=\"post-content\">\n<p>Our Continuous Integration and Continuous Deployment (CI/CD) build system (that we <a href=\"https://www.exceptionnotfound.net/the-sublime-joy-of-continuous-integration-and-continuous-deployment/\">recently implemented</a>) is truly a joy to behold, but it's also basically magic from my perspective. Check some code in, wait a few minutes, <em>something happens</em>, and then BOOM it's on the dev server. I know that it works, but I don't know exactly <em>how</em>. Should I take the time and effort to find out?</p>\n<p>I'm a <a href=\"https://www.exceptionnotfound.net/time-slides-the-problem-with-being-a-completionist/\">completionist</a>, which means I'm also a naturally inquisitive person. I want to understand how things work, how they interact. I recognize that I cannot possibly understand everything, but I <em>want</em> to. It's a little internal conflict that rears up whenever I am presented with what seems, to me, to be magic.</p>\n<p><img src=\"https://www.exceptionnotfound.net/content/images/2017/04/magician-hat-rabbit.jpg\" alt=\"A poster for a magic show by Zan Zig, showing him holding a rabbit\"></p>\n<p>My family and I love going to Disneyland, (seeing as how we're really <a href=\"https://www.exceptionnotfound.net/phoenix-is-not-just-saguaros-and-camelback-mountain/\">not that far from it</a>) and at that resort there is a particular ride that's now known as <a href=\"https://disneyland.disney.go.com/attractions/disney-california-adventure/soarin/\"><em>Soarin Around the World</em></a>. This ride lifts passengers up into a hang-gliding type adventure, using <a href=\"https://www.youtube.com/watch?v=7aQv1LUDUQo\">a giant video screen and huge mechanical rows of seats to simulate flight</a>. And the first time I went on it, I was so distracted by trying to figure out how it operated that I didn't even watch the screen. I couldn't even tell you what we saw. I missed the whole ride because I was trying to figure out how it worked. Was it worth it? </p>\n<p>Another piece of magic slightly closer to home is my desk phone. </p>\n<p><img src=\"/content/images/2017/02/cisco_7945_phone.jpg\" alt=\"\"></p>\n<p>This phone has no power cable, just an ethernet jack. When I plug in the jack, the phone turns on. To me, this makes no sense, as I was under the impression that ethernet jacks couldn't provide power. But I must be wrong, since the evidence is clear: it works. I can make calls on it, and people can call me (even though I may not want them to). How and why are ethernet jacks capable of providing power? Or is something else going on and I'm just not seeing it? Is it worth the effort to figure out why it works rather than just accepting that it does?</p>\n<p>I've slowly but surely come up with a litmus test that helps me determine if something that is \"magic\" is worth the time to figure out, to take apart and put back together. I do so if and only if:</p>\n<ul>\n<li>The \"magic\" is directly related to a problem I'm trying to solve AND</li>\n<li>The knowledge gained from investigating the \"magic\" is directly useful to solving other problems.</li>\n</ul>\n<p>This test helps me determine whether or not further investigation would be useful for me. Let's see how our three examples of magic fare against this test.</p>\n<p>First off, the Disneyland ride utterly fails our litmus test. Spending time to try to figure out how the ride worked at the expense of just enjoying it was absolutely not worth it. What was I going to do with the knowledge gained, impress my friends at some hypothetical party? I don't even go to regular parties, much less hypothetical ones. It didn't help me solve a problem; in fact it detracted from my enjoyment of my vacation and left me with less happiness than I might have had otherwise.</p>\n<p>Taking apart the desk phone is also out. I mean, it's a phone and it works. I don't really need to know <em>how</em> it works, unless I suddenly need to be able to write code for it, which is unlikely. The test suggests that we should leave it alone.</p>\n<p>But the CI/CD process is something I should know, even if only to be able to diagnose problems when they inevitably occur. The knowledge gained from learning about this procedure will absolutely be useful for later projects, since presumably they will be using the same or similar system. Plus, then I can <a href=\"https://www.exceptionnotfound.net/we-dont-have-enough-teachers-of-technology/\">be a teacher</a> and help other people in my company set up their own CI/CD processes. The knowledge gained from investigating the magic would be useful in other areas.</p>\n<p>We completionists will never have enough time to learn everything we want to learn, and so we have to learn to let go of that hope. This is not a sad thing, nor should it be, rather it's just part of learning to live a full, well-rounded life. </p>\n<p>The point is, you don't have to spend the time to learn something that isn't going to be useful to you. Sometimes it's just not worth the effort. You have to actively manage your time, and since you'll never have enough of it, it's best to spend it as wisely as possible. Only you can determine exactly what that means, but for me, it means spending my time <a href=\"https://www.exceptionnotfound.net/do-something-else/\">enjoying things I want to do</a>, and learning about things that help me solve problems. Everything else is a waste of my precious time.</p>\n<p>You might have heard of <a href=\"https://en.wikipedia.org/wiki/Clarke%27s_three_laws\">Clarke's Third Law</a>, which states: </p>\n<blockquote>\n<p>\"Any sufficiently advanced technology is indistinguishable from magic.\"</p>\n</blockquote>\n<p>Sometimes it might be best to just leave it that way, and enjoy the ride.</p>\n<p>Happy Coding! </p>\n</section>\n</section>\n</article>\n<div class=\"horizontal-ad-scroll\">\n<div class=\"leaderboard-ad\">\n<div data-type=\"ad\" data-publisher=\"exceptionnotfound.net\" data-format=\"728x90\" data-zone=\"ros\"></div>\n</div>\n<div class=\"block-ad\">\n<div data-type=\"ad\" data-publisher=\"exceptionnotfound.net\" data-format=\"300x250\" data-zone=\"ros\"></div>\n</div></div>\n<article class=\"post tag-modeling-practice tag-tutorials tag-sample-project tag-c-sharp\">\n<section class=\"post-container\">\n<header class=\"post-header\">\n<h1 class=\"post-title\"><a href=\"/modeling-battleship-in-csharp-playing-the-game/\">Modeling Battleship in C# - Playing the Game</a></h1>\n<section class=\"post-meta\">\n<span class=\"post-time\">\n<i class=\"fa fa-calendar\"></i>\n<time datetime=\"2017-04-02\" class=\"fulldate\">April 2nd, 2017</time>\n</span>\n<br><i class=\"fa fa-tag\"></i> <a href=\"/tag/modeling-practice/\">modeling-practice</a> · <a href=\"/tag/tutorials/\">tutorials</a> · <a href=\"/tag/sample-project/\">sample-project</a> · <a href=\"/tag/c-sharp/\">c-sharp</a>\n<br><i class=\"fa fa-comment-o\"></i> <a href=\"/modeling-battleship-in-csharp-playing-the-game/#disqus_thread\">Comments</a>\n</section>\n<section class=\"post-share-links\">\n<span class=\"share\">\n<div class=\"share-icons\">\n<a class=\"fa fa-twitter-square\" href=\"https://twitter.com/intent/tweet?text=Modeling%20Battleship%20in%20C%23%20-%20Playing%20the%20Game&amp;url=https://www.exceptionnotfound.net/modeling-battleship-in-csharp-playing-the-game/\">\n<span class=\"hidden\">Twitter</span>\n</a>\n<a class=\"fa fa-facebook-square\" href=\"https://www.facebook.com/sharer/sharer.php?u=https://www.exceptionnotfound.net/modeling-battleship-in-csharp-playing-the-game/\">\n<span class=\"hidden\">Facebook</span>\n</a>\n<a class=\"fa fa-google-plus-square\" href=\"https://plus.google.com/share?url=https://www.exceptionnotfound.net/modeling-battleship-in-csharp-playing-the-game/\">\n<span class=\"hidden\">Google+</span>\n</a>\n<a class=\"fa fa-linkedin-square\" href=\"https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.exceptionnotfound.net/modeling-battleship-in-csharp-playing-the-game/\">\n<span class=\"hidden\">LinkedIn</span>\n</a>\n<a class=\"fa fa-reddit-square\" href=\"https://www.reddit.com/submit?url=https://www.exceptionnotfound.net/modeling-battleship-in-csharp-playing-the-game/&amp;title=Modeling%20Battleship%20in%20C%23%20-%20Playing%20the%20Game\">\n<span class=\"hidden\">Reddit</span>\n</a>\n<a class=\"fa fa-hacker-news\" href=\"http://news.ycombinator.com/submitlink?u=https://www.exceptionnotfound.net/modeling-battleship-in-csharp-playing-the-game/&amp;t=Modeling%20Battleship%20in%20C%23%20-%20Playing%20the%20Game\">\n<span class=\"hidden\">Hacker News</span>\n</a>\n<a class=\"fa fa-envelope-square\" href=\"/cdn-cgi/l/email-protection#a49bd7d1c6cec1c7d099e1dcc7c1d4d0cdcbca819694eacbd0819694e2cbd1cac08197e5819694e9cbc0c1c8cdcac3819694e6c5d0d0c8c1d7cccdd4819694cdca819694e781969781969489819694f4c8c5ddcdcac3819694d0ccc1819694e3c5c9c182c5c9d49fc6cbc0dd99ccd0d0d4d79e8b8bd3d3d38ac1dcc7c1d4d0cdcbcacacbd0c2cbd1cac08acac1d08bc9cbc0c1c8cdcac389c6c5d0d0c8c1d7cccdd489cdca89c7d7ccc5d6d489d4c8c5ddcdcac389d0ccc189c3c5c9c18b\">\n<span class=\"hidden\">Hacker News</span>\n</a>\n</div>\n</span>\n</section> </header>\n<section class=\"post-content\">\n<p><em>NOTE: This is the final part of a three-part series demonstrating how we might model the classic game <a href=\"http://amzn.to/2mYF4JW\">Battleship</a> as a C# program. <a href=\"https://www.exceptionnotfound.net/modeling-battleship-in-csharp-introduction-and-strategies/\">Part 1 is over here</a>. You might want to use the <a href=\"https://github.com/exceptionnotfound/BattleshipModellingPractice\">sample project over on GitHub</a> to follow along with this post. Also, check out my <a href=\"https://exceptionnotfound.net/tag/modeling-practice/\">other posts in the Modeling Practice series!</a></em></p>\n<p>With all the components and setup taken care of in <a href=\"https://www.exceptionnotfound.net/modeling-battleship-in-csharp-components-and-setup\">the previous part of this series</a>, it's now time to finish our system and get to the real interesting part of modeling Battleship as a C# program: how do we actually play a game?</p>\n<h2 id=\"takingaturn\">Taking a Turn</h2>\n<p>Battleship is a turn-based game. When it becomes a player's turn to take a shot, the ensuing process generally goes something like this:</p>\n<ol>\n<li>The attacking player selects a panel and calls out the coordinates. </li>\n<li>The defending player calls out whether or not that shot was a hit, and marks the shot on his/her game board. </li>\n<li>The attacking player marks the result of the shot on his/her firing board.</li>\n</ol>\n<p><img src=\"/content/images/2017/03/navy-plays-battleship.jpg\" alt=\"\"></p>\n<p>We'll need to modify our <code>Player</code> class to handle each of these three steps. Let's start with determining what panel to fire at, our <code>Player</code> objects' shot selection.</p>\n<h2 id=\"step1shotselection\">Step 1: Shot Selection</h2>\n<p>All of Battleship's strategy comes down to <em>where do we fire the next shot?</em> Remember from <a href=\"https://www.exceptionnotfound.net/modeling-practice-battleship-part-1-introduction-and-strategies\">Part 1</a> that there are two shot strategies we are going to employ:</p>\n<ol>\n<li>\"Random\" shots: fire at every other panel until a hit is scored. </li>\n<li>\"Searching\" shots: After making a hit, fire at neighboring panels until the ship is sunk.</li>\n</ol>\n<p>Since in a real game it would be the Player that makes these decisions, we're going to improve our <code>Player</code> class by implementing the following methods:</p>\n<pre><code class=\"language-csharp\">public Coordinates FireShot() { }\n\nprivate Coordinates RandomShot() { }\n\nprivate Coordinates SearchingShot() { }  \n</code></pre>\n<p>Let's break down what each of these methods will do.</p>\n<ol>\n<li><code>FireShot()</code> is the method which will return coordinates for the shot the <code>Player</code> wants to fire. It will call either <code>RandomShot()</code> or <code>SearchingShot()</code>, depending on the current status of the <code>FiringBoard</code> for the attacking player. </li>\n<li><code>RandomShot()</code>, as you might have guessed, fire our semi-random shots. </li>\n<li><code>SearchingShot()</code> fires at nearby panels from the last hit.</li>\n</ol>\n<h4 id=\"fireshot\">FireShot()</h4>\n<p>We'll start with <code>FireShot()</code>. In order to determine which kind of shot (random or searching) to fire, we need a way to know if any panels exist that are next to a known hit AND have not been fired at yet. In my solution, we do this by modifying the <code>FiringBoard</code> class from Part 2 and implementing the following method:</p>\n<pre><code class=\"language-csharp\">public class FiringBoard : GameBoard  \n{\n    public List&lt;Coordinates&gt; GetHitNeighbors()\n    {\n        List&lt;Panel&gt; panels = new List&lt;Panel&gt;();\n        var hits = Panels.Where(x =&gt; x.OccupationType == OccupationType.Hit);\n        foreach(var hit in hits)\n        {\n            panels.AddRange(GetNeighbors(hit.Coordinates).ToList());\n        }\n        return panels.Distinct().Where(x =&gt; x.OccupationType == OccupationType.Empty).Select(x =&gt; x.Coordinates).ToList();\n    }\n}\n</code></pre>\n<p>...which we then call in <code>FireShot()</code>:</p>\n<pre><code class=\"language-csharp\">public Coordinates FireShot()  \n{\n    //If there are hits on the board with neighbors which don't have shots, we should fire at those first.\n    var hitNeighbors = FiringBoard.GetHitNeighbors();\n    Coordinates coords;\n    if (hitNeighbors.Any())\n    {\n        coords = SearchingShot();\n    }\n    else\n    {\n        coords = RandomShot();\n    }\n    Console.WriteLine(Name + \" says: \\\"Firing shot at \" + coords.Row.ToString() + \", \" + coords.Column.ToString() + \"\\\"\");\n    return coords;\n}\n</code></pre>\n<h4 id=\"randomshot\">RandomShot()</h4>\n<p>Now we can implement the <code>RandomShot()</code> method.</p>\n<pre><code class=\"language-csharp\">private Coordinates RandomShot()  \n{\n    var availablePanels = FiringBoard.GetOpenRandomPanels();\n    Random rand = new Random(Guid.NewGuid().GetHashCode());\n    var panelID = rand.Next(availablePanels.Count);\n    return availablePanels[panelID];\n}\n</code></pre>\n<p>Notice that this method also relies on a method in the <code>FiringBoard</code> class, called <code>GetOpenRandomPanels()</code>. Here's how that method works:</p>\n<pre><code class=\"language-csharp\">public List&lt;Coordinates&gt; GetOpenRandomPanels()  \n{\n    return Panels.Where(x =&gt; x.OccupationType == OccupationType.Empty &amp;&amp; x.IsRandomAvailable).Select(x=&gt;x.Coordinates).ToList();\n}\n</code></pre>\n<p>All <code>GetOpenRandomPanels()</code> really does is select panels where:</p>\n<ul>\n<li>No shot has been fired AND</li>\n<li>The panels coordinates are both odd or both even (the <code>IsRandomAvailable</code> property).</li>\n</ul>\n<h4 id=\"searchingshot\">SearchingShot()</h4>\n<p>Finally, we can implement the <code>SearchingShot()</code> method. Here's what that looks like:</p>\n<pre><code class=\"language-csharp\">private Coordinates SearchingShot()  \n{\n    Random rand = new Random(Guid.NewGuid().GetHashCode());\n    var hitNeighbors = FiringBoard.GetHitNeighbors();\n    var neighborID = rand.Next(hitNeighbors.Count);\n    return hitNeighbors[neighborID];\n}\n</code></pre>\n<p><code>SearchingShot()</code> reuses the <code>GetHitNeighbors()</code> method from earlier, and randomly targets one of those neighbor panels. </p>\n<p>With those methods in place, our <code>Player</code> objects can now calculate where their shot will go. But, <code>Player</code> objects must also be able to react to shots being fired at them, so let's implement those methods now.</p>\n<h2 id=\"step2reactingtoshotsfired\">Step 2: Reacting to Shots Fired</h2>\n<p><code>Player</code> needs an additional method to react to shots fired at them, and I called this method <code>ProcessShot()</code>. Let's see what this method does.</p>\n<pre><code class=\"language-csharp\">public ShotResult ProcessShot(Coordinates coords)  \n{\n    //Locate the targeted panel on the GameBoard\n    var panel = GameBoard.Panels.At(coords.Row, coords.Column);\n\n    //If the panel is NOT occupied by a ship\n    if(!panel.IsOccupied)\n    {\n        //Call out a miss\n        Console.WriteLine(Name + \" says: \\\"Miss!\\\"\");\n        return ShotResult.Miss;\n    }\n\n    //If the panel IS occupied by a ship, determine which one.\n    var ship = Ships.First(x =&gt; x.OccupationType == panel.OccupationType);\n\n    //Increment the hit counter\n    ship.Hits++;\n\n    //Call out a hit\n    Console.WriteLine(Name + \" says: \\\"Hit!\\\"\");\n\n    //If the ship is now sunk, call out which ship was sunk\n    if (ship.IsSunk)\n    {\n        Console.WriteLine(Name + \" says: \\\"You sunk my \" + ship.Name + \"!\\\"\");\n    }\n\n    //For either a hit or a sunk, return a Hit status\n    return ShotResult.Hit;\n}\n</code></pre>\n<p>Notice the use of the <code>ShotResult</code> enumeration. All this enum does is pass the result of the shot from the defending player (who calls \"Hit\" or \"Miss\") to the attacking player. But what will the attacking player do with that info?</p>\n<h2 id=\"step3theshotresult\">Step 3: The Shot Result</h2>\n<p>The last method our <code>Player</code> class needs is <code>ProcessShotResult()</code>, which is implemented like so:</p>\n<pre><code class=\"language-csharp\">public void ProcessShotResult(Coordinates coords, ShotResult result)  \n{\n    var panel = FiringBoard.Panels.At(coords.Row, coords.Column);\n    switch(result)\n    {\n        case ShotResult.Hit:\n            panel.OccupationType = OccupationType.Hit;\n            break;\n\n        default:\n            panel.OccupationType = OccupationType.Miss;\n            break;\n    }\n}\n</code></pre>\n<p>With all these methods in place, it's finally time to set up our <code>Game</code> object and actually play a game!</p>\n<h2 id=\"playingagame\">Playing a Game</h2>\n<p>The <code>Game</code> object from <a href=\"https://www.exceptionnotfound.net/modeling-battleship-in-csharp-components-and-setup\">Part 2</a> represents a game in progress; here's what it looked like when we last left it.</p>\n<pre><code class=\"language-csharp\">public class Game  \n{\n    public Player Player1 { get; set; }\n    public Player Player2 { get; set; }\n\n    public Game() { }\n\n    public void PlayRound() { }\n\n    public void PlayToEnd() { }\n}\n</code></pre>\n<p>We now need to define the constructor, <code>PlayRound()</code> and <code>PlayToEnd()</code> methods. </p>\n<h4 id=\"constructor\">Constructor</h4>\n<p>The <code>Game</code> constructor needs to:</p>\n<ol>\n<li>Create the players (and by extension create things like the <code>GameBoard</code> and <code>FiringBoard</code> instances for those players). </li>\n<li>Have the players place their ships. </li>\n<li>Output the status of the boards.</li>\n</ol>\n<p>Here's our (relatively simple) constructor:</p>\n<pre><code class=\"language-csharp\">public Game()  \n{\n    Player1 = new Player(\"Amy\");\n    Player2 = new Player(\"Vince\");\n\n    Player1.PlaceShips();\n    Player2.PlaceShips();\n\n    Player1.OutputBoards();\n    Player2.OutputBoards();\n}\n</code></pre>\n<p>We finally have names for our players! From here on out we'll be calling Player 1 \"Amy\" and Player 2 \"Vince\".</p>\n<h3 id=\"playround\">PlayRound()</h3>\n<p>A \"round\" in this context is one shot by Amy and one shot by Vince. The only real trick here is that it is possible for Vince (since he is Player 2) to lose the game before he has a chance to take a shot. Here's the <code>PlayRound()</code> method:</p>\n<pre><code class=\"language-csharp\">public void PlayRound()  \n{\n    var coordinates = Player1.FireShot();\n    var result = Player2.ProcessShot(coordinates);\n    Player1.ProcessShotResult(coordinates, result);\n\n    if (!Player2.HasLost) //If player 2 already lost, we can't let them take another turn.\n    {\n        coordinates = Player2.FireShot();\n        result = Player1.ProcessShot(coordinates);\n        Player2.ProcessShotResult(coordinates, result);\n    }\n}\n</code></pre>\n<h3 id=\"playtoend\">PlayToEnd()</h3>\n<p>The final piece to this whole puzzle is the <code>PlayToEnd()</code> method, which will repeatedly call <code>PlayRound()</code> until one of the players loses. Here's that final method:</p>\n<pre><code class=\"language-csharp\">public void PlayToEnd()  \n{\n    while (!Player1.HasLost &amp;&amp; !Player2.HasLost)\n    {\n        PlayRound();\n    }\n\n    Player1.OutputBoards();\n    Player2.OutputBoards();\n\n    if (Player1.HasLost)\n    {\n        Console.WriteLine(Player2.Name + \" has won the game!\");\n    }\n    else if (Player2.HasLost)\n    {\n        Console.WriteLine(Player1.Name + \" has won the game!\");\n    }\n}\n</code></pre>\n<p>Now that we've got almost our entire system designed, all that's left to do is write a bit more code to automate playing some games and do some simple statistics.</p>\n<h2 id=\"letsplay\">Let's Play</h2>\n<p>Here's the last bit of code we need to run these games:</p>\n<p>```language-csharp\nclass Program <br>\n{\nstatic void Main(string[] args)\n{\nint player1Wins = 0, player2Wins = 0;</p>\n<pre><code>    Console.WriteLine(\"How many games do you want to play?\");\n    var numGames = int.Parse(Console.ReadLine());\n\n    for (int i = 0; i &lt; numGames; i++)\n    {\n        Game game1 = new Game();\n        game1.PlayToEnd();\n        if(game1.Player1.HasLost)\n        {\n            player2Wins++;\n        }\n        else\n        {\n            player1Wins++;\n        }\n    }\n\n    Console.WriteLine(\"Player 1 Wins: \" + player1Wins.ToString());\n    Console.WriteLine(\"Player 2 Wins: \" + player2Wins.ToString());\n    Console.ReadLine();\n\n}\n</code></pre>\n<p>}\n``</p>\n<p>All this simple <code>Program</code> class does it take a number from the user, play that many games, and then output Player 1's wins and Player 2's wins. </p>\n<p>To start with, let's just play one game.</p>\n<p><img src=\"/content/images/2017/03/battleship-number-games.png\" alt=\"\"></p>\n<p>Now we can see how our players (Amy and Vince) have placed their ships.</p>\n<p><img src=\"/content/images/2017/03/battleship-amys-board.png\" alt=\"\"></p>\n<p><img src=\"/content/images/2017/03/battleship-vince-board.png\" alt=\"\"></p>\n<p>So far, so good. Amy and Vince have not placed their ships in the same pattern as the other, and the ships are (for the most part) spread out evenly on the board.</p>\n<p>Once we start playing a game, the entire game goes past very quickly. Here's a screenshot of what the output looks like:</p>\n<p><img src=\"/content/images/2017/03/battleship-turn-output.png\" alt=\"\"></p>\n<p>We can see from this output that our searching strategy seems to be working. Vince gets a hit on Amy at (9, 3), so he then tries neighboring square (8, 3), which is a miss, before getting the killing blow on Amy's Aircraft Carrier at (9, 2). </p>\n<p>Let's see the final result of the game.</p>\n<p><img src=\"/content/images/2017/03/battleship-amy-final-board.png\" alt=\"\"></p>\n<p><img src=\"/content/images/2017/03/battleship-vince-final-board-1.png\" alt=\"\"></p>\n<p>Looks like Amy won this round, but just by a hair. Vince only had Amy's Destroyer left to find.</p>\n<p>OK great, so playing one game seems to work. Let's try playing a thousand.</p>\n<h2 id=\"stats\">Stats</h2>\n<p>If we run 1000 games using this setup, will one of the two players be favored to win more of the games? I'll run three sets of 1000 games, and you, dear readers, can decide for yourselves if my system is biased or not (or, even better, download and run <a href=\"https://github.com/exceptionnotfound/BattleshipModellingPractice\">the sample project</a> to try it for yourself!):</p>\n<h4 id=\"round1\">Round 1</h4>\n<p><img src=\"/content/images/2017/03/battleship-total-wins-first-round.png\" alt=\"\"></p>\n<h4 id=\"round2\">Round 2</h4>\n<p><img src=\"/content/images/2017/03/battleship-total-wins-second-round.png\" alt=\"\"></p>\n<h4 id=\"round3\">Round 3</h4>\n<p><img src=\"/content/images/2017/03/battleship-total-wins-third-round.png\" alt=\"\"></p>\n<h2 id=\"drawbacks\">Drawbacks</h2>\n<p>There are a couple significant improvements I could make to this system:</p>\n<div class=\"previous-series\">\nMore <strong>Modeling Practice</strong>:\n<ul class=\"previous-links\">\n<li><a href=\"https://www.exceptionnotfound.net/simulating-candy-land-in-net-part-1-introduction-and-basics/\">Candy Land</a></li>\n<li><a href=\"https://exceptionnotfound.net/solving-minesweeper-with-c-sharp-and-linq/\">Minesweeper</a></li>\n<li><a href=\"https://www.exceptionnotfound.net/modeling-practice-uno-in-c-sharp-part-one-rules-assumptions-cards/\">UNO</a></li>\n</ul>\n</div>\n<ul>\n<li><p><strong>Determining orientation</strong>: When a hit is made, we don't yet know the orientation (e.g. up-down or left-right) of the attacked ship. However, once a <em>second</em> hit is made, we <em>do</em> know the orientation. A more complete system would take this into account to sink hit ships even faster.</p></li>\n<li><p><strong>Probability shots</strong>: There's some research to suggest that ship placement can actually be predicted with a certain amount of accuracy. A more complete system would understand these probabilities and take them into account when selecting a shot.</p></li>\n</ul>\n<p>However, as is always true with my <a href=\"https://exceptionnotfound.net/tag/modeling-practice/\">Modeling Practice series</a>, the point of modeling Battleship is not to solve the game perfectly, it's to practice taking a large, complex problem and breaking it down into solvable pieces, and I feel pretty good about how this particular one went.</p>\n<h2 id=\"summary\">Summary</h2>\n<p>Battleship is a beloved game; it's been around in one form or another for 100+ years and continues to entertain generations of children and adults, including me and my family. By pulling it apart, seeing how it works, and eventually creating a fully-functional model program for it, we (you and me, dear readers) have hopefully gained a little more insight into how to break seemingly large, difficult problems down into their constituent pieces to make modeling them just a bit easier.</p>\n<p>In this final part of our modeling practice, we implemented quite a bit of functionality. We can now:</p>\n<ul>\n<li>Have the attacking player select a shot.</li>\n<li>Have the defending player call out the status of that shot.</li>\n<li>Have the attacking player mark the status of the shot on the firing board.</li>\n<li>Play a game round-by-round.</li>\n<li>Play a game all the way to completion.</li>\n</ul>\n<p>As always, the <a href=\"https://github.com/exceptionnotfound/BattleshipModellingPractice\">sample project</a> is available for anyone to download, change, improve, whatever. If this series helped you, or if you see something we could improve on, let me know in the comments!</p>\n<p>Happy Modeling!</p>\n</section>\n</section>\n</article>\n<div class=\"horizontal-ad-scroll\">\n<div class=\"leaderboard-ad\">\n<div data-type=\"ad\" data-publisher=\"exceptionnotfound.net\" data-format=\"728x90\" data-zone=\"ros\"></div>\n</div>\n<div class=\"block-ad\">\n<div data-type=\"ad\" data-publisher=\"exceptionnotfound.net\" data-format=\"300x250\" data-zone=\"ros\"></div>\n</div></div>\n<article class=\"post tag-modeling-practice tag-tutorials tag-sample-project tag-c-sharp\">\n<section class=\"post-container\">\n<header class=\"post-header\">\n<h1 class=\"post-title\"><a href=\"/modeling-battleship-in-csharp-components-and-setup/\">Modeling Battleship in C# - Components and Setup</a></h1>\n<section class=\"post-meta\">\n<span class=\"post-time\">\n<i class=\"fa fa-calendar\"></i>\n<time datetime=\"2017-03-29\" class=\"fulldate\">March 29th, 2017</time>\n</span>\n<br><i class=\"fa fa-tag\"></i> <a href=\"/tag/modeling-practice/\">modeling-practice</a> · <a href=\"/tag/tutorials/\">tutorials</a> · <a href=\"/tag/sample-project/\">sample-project</a> · <a href=\"/tag/c-sharp/\">c-sharp</a>\n<br><i class=\"fa fa-comment-o\"></i> <a href=\"/modeling-battleship-in-csharp-components-and-setup/#disqus_thread\">Comments</a>\n</section>\n<section class=\"post-share-links\">\n<span class=\"share\">\n<div class=\"share-icons\">\n<a class=\"fa fa-twitter-square\" href=\"https://twitter.com/intent/tweet?text=Modeling%20Battleship%20in%20C%23%20-%20Components%20and%20Setup&amp;url=https://www.exceptionnotfound.net/modeling-battleship-in-csharp-components-and-setup/\">\n<span class=\"hidden\">Twitter</span>\n</a>\n<a class=\"fa fa-facebook-square\" href=\"https://www.facebook.com/sharer/sharer.php?u=https://www.exceptionnotfound.net/modeling-battleship-in-csharp-components-and-setup/\">\n<span class=\"hidden\">Facebook</span>\n</a>\n<a class=\"fa fa-google-plus-square\" href=\"https://plus.google.com/share?url=https://www.exceptionnotfound.net/modeling-battleship-in-csharp-components-and-setup/\">\n<span class=\"hidden\">Google+</span>\n</a>\n<a class=\"fa fa-linkedin-square\" href=\"https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.exceptionnotfound.net/modeling-battleship-in-csharp-components-and-setup/\">\n<span class=\"hidden\">LinkedIn</span>\n</a>\n<a class=\"fa fa-reddit-square\" href=\"https://www.reddit.com/submit?url=https://www.exceptionnotfound.net/modeling-battleship-in-csharp-components-and-setup/&amp;title=Modeling%20Battleship%20in%20C%23%20-%20Components%20and%20Setup\">\n<span class=\"hidden\">Reddit</span>\n</a>\n<a class=\"fa fa-hacker-news\" href=\"http://news.ycombinator.com/submitlink?u=https://www.exceptionnotfound.net/modeling-battleship-in-csharp-components-and-setup/&amp;t=Modeling%20Battleship%20in%20C%23%20-%20Components%20and%20Setup\">\n<span class=\"hidden\">Hacker News</span>\n</a>\n<a class=\"fa fa-envelope-square\" href=\"/cdn-cgi/l/email-protection#556a2620373f30362168102d363025213c3a3b7067651b3a21706765133a203b31706614706765183a3130393c3b32706765173421213930263d3c257067653c3b7067651670676670676578706765163a38253a3b303b2126706765343b317067650630212025733438256e373a312c683d212125266f7a7a2222227b302d363025213c3a3b3b3a21333a203b317b3b30217a383a3130393c3b3278373421213930263d3c25783c3b7836263d34272578363a38253a3b303b212678343b317826302120257a\">\n<span class=\"hidden\">Hacker News</span>\n</a>\n</div>\n</span>\n</section> </header>\n<section class=\"post-content\">\n<p><em>NOTE: This is Part 2 of a three-part series demonstrating how we might model the classic game <a href=\"http://amzn.to/2mYF4JW\">Battleship</a> as a C# program. <a href=\"https://www.exceptionnotfound.net/modeling-battleship-in-csharp-introduction-and-strategies/\">Part 1 is over here</a>. You might want to use the <a href=\"https://github.com/exceptionnotfound/BattleshipModellingPractice\">sample project over on GitHub</a> to follow along with this post. Also, check out my <a href=\"https://exceptionnotfound.net/tag/modeling-practice/\">other posts in the Modeling Practice series!</a></em></p>\n<p>In the <a href=\"https://www.exceptionnotfound.net/modeling-practice-battleship-part-1-introduction-and-strategies\">first part of this series</a> we discussed how to play a game of Battleship and what kinds of components and strategies we would need to use. With those in place, we can begin modeling the game. Let's build some objects!</p>\n<h2 id=\"coordinates\">Coordinates</h2>\n<p>The first and most basic object we are going to model is the <code>Coordinates</code> object, which represents a location on a board that can be fired at.</p>\n<pre><code class=\"language-csharp\">public class Coordinates  \n{\n    public int Row { get; set; }\n    public int Column { get; set; }\n\n    public Coordinates(int row, int column)\n    {\n        Row = row;\n        Column = column;\n    }\n}\n</code></pre>\n<p>You might be wondering why those properties <code>Row</code> and <code>Column</code> are not a part of a different model, e.g. the <code>Panel</code> model that we're about to define. This is because whenever a shot is fired, the person firing the shot does so by calling out coordinates, and so this class will not only represent coordinates on the game and firing boards, but also coordinates that are under attack.</p>\n<div class=\"previous-series\">\nMore <strong>Modeling Practice</strong>:\n<ul class=\"previous-links\">\n<li><a href=\"https://www.exceptionnotfound.net/simulating-candy-land-in-net-part-1-introduction-and-basics/\">Candy Land</a></li>\n<li><a href=\"https://exceptionnotfound.net/solving-minesweeper-with-c-sharp-and-linq/\">Minesweeper</a></li>\n<li><a href=\"https://www.exceptionnotfound.net/modeling-practice-uno-in-c-sharp-part-one-rules-assumptions-cards/\">UNO</a></li>\n</ul>\n</div>\n<p>(NOTE: In the game, rows are given letter designations, e.g. \"A\", \"B\", etc. Here, we'll be using integers, as it makes several calculations easier).</p>\n<h2 id=\"occupationtype\">OccupationType</h2>\n<p>For any given panel, there a few possibilities as to what can be on that panel:</p>\n<ul>\n<li>If a ship is on the panel, then the panel is occupied. Two ships cannot occupy the same panel.</li>\n<li>If a shot was fired at that panel, then either a hit or a miss was recorded on that panel.</li>\n<li>If there's nothing on that panel, the panel is said to be empty.</li>\n</ul>\n<p>To represent all of these statuses, I created an enumeration called <code>OccupationType</code>:</p>\n<pre><code class=\"language-csharp\">public enum OccupationType  \n{\n    [Description(\"o\")]\n    Empty,\n\n    [Description(\"B\")]\n    Battleship,\n\n    [Description(\"C\")]\n    Cruiser,\n\n    [Description(\"D\")]\n    Destroyer,\n\n    [Description(\"S\")]\n    Submarine,\n\n    [Description(\"A\")]\n    Carrier,\n\n    [Description(\"X\")]\n    Hit,\n\n    [Description(\"M\")]\n    Miss\n}\n</code></pre>\n<p>The <code>Description</code> attribute records the display character used for each of these statuses. We'll see a lot of those characters when we show how to play a game in the next part of this series.</p>\n<h2 id=\"panel\">Panel</h2>\n<p>The next object we need represents a single space on the game boards. I've taken to calling this space a <code>Panel</code>.</p>\n<pre><code class=\"language-csharp\">public class Panel  \n{\n    public OccupationType OccupationType { get; set; }\n    public Coordinates Coordinates { get; set; }\n\n    public Panel(int row, int column)\n    {\n        Coordinates = new Coordinates(row, column);\n        OccupationType = OccupationType.Empty;\n    }\n\n    public string Status\n    {\n        get\n        {\n            return OccupationType.GetAttributeOfType&lt;DescriptionAttribute&gt;().Description;\n        }\n    }\n\n    public bool IsOccupied\n    {\n        get\n        {\n            return OccupationType == OccupationType.Battleship\n                || OccupationType == OccupationType.Destroyer\n                || OccupationType == OccupationType.Cruiser\n                || OccupationType == OccupationType.Submarine\n                || OccupationType == OccupationType.Carrier;\n        }\n    }\n\n    public bool IsRandomAvailable\n    {\n        get\n        {\n            return (Coordinates.Row % 2 == 0 &amp;&amp; Coordinates.Column % 2 == 0)\n                || (Coordinates.Row % 2 == 1 &amp;&amp; Coordinates.Column % 2 == 1);\n        }\n    }\n}\n</code></pre>\n<p>We should make special note of the <code>IsRandomAvailable</code> property. Remember from the previous part of this series that when we are firing random shots, we don't need to target every panel, but rather every <em>other</em> panel, like so: </p>\n<p><img src=\"/content/images/2017/03/printable-battleship-shot-strategy.jpg\" alt=\"\"></p>\n<p><code>IsRandomAvailable</code> helps us implement that strategy. It designates every panel where both row and column coordinates are odd, or both coordinates are even, as being available for a \"random\" shot selection.</p>\n<p>Finally, note the <code>IsOccupied</code> property. We'll be using that property in a later part to determine where to place the ships. </p>\n<h2 id=\"ships\">Ships</h2>\n<p>Speaking of the ships, let's define their base class now.</p>\n<pre><code class=\"language-csharp\">public abstract class Ship  \n{\n    public string Name { get; set; }\n    public int Width { get; set; }\n    public int Hits { get; set; }\n    public OccupationType OccupationType { get; set; }\n    public bool IsSunk\n    {\n        get\n        {\n            return Hits &gt;= Width;\n        }\n    }\n}\n</code></pre>\n<p>The only real trick to this class is the <code>IsSunk</code> property, which merely returns true if the number of hits the ship has sustained is greater than or equal to its width.</p>\n<p>Let's also define five additional classes, one for each kind of ship.</p>\n<pre><code class=\"language-csharp\">public class Destroyer : Ship  \n{\n    public Destroyer()\n    {\n        Name = \"Destroyer\";\n        Width = 2;\n        OccupationType = OccupationType.Destroyer;\n    }\n}\n\npublic class Submarine : Ship  \n{\n    public Submarine()\n    {\n        Name = \"Submarine\";\n        Width = 3;\n        OccupationType = OccupationType.Submarine;\n    }\n}\n\npublic class Cruiser : Ship  \n{\n    public Cruiser()\n    {\n        Name = \"Cruiser\";\n        Width = 3;\n        OccupationType = OccupationType.Cruiser;\n    }\n}\n\npublic class Battleship : Ship  \n{\n    public Battleship()\n    {\n        Name = \"Battleship\";\n        Width = 4;\n        OccupationType = OccupationType.Battleship;\n    }\n}\n\npublic class Carrier : Ship  \n{\n    public Carrier()\n    {\n        Name = \"Aircraft Carrier\";\n        Width = 5;\n        OccupationType = OccupationType.Carrier;\n    }\n}\n</code></pre>\n<p>Each player will instantiate one of each kind of ship in order to play a game.</p>\n<h2 id=\"gameboard\">Game Board</h2>\n<p>Each player will also need an instance of class <code>GameBoard</code>, which tracks where that player's ships are placed and where their opponent's shots have been fired.</p>\n<p>When you get right down to it, a <code>GameBoard</code> is really just a collection of <code>Panel</code> objects that we defined earlier.</p>\n<pre><code class=\"language-csharp\">public class GameBoard  \n{\n    public List&lt;Panel&gt; Panels { get; set; }\n\n    public GameBoard()\n    {\n        Panels = new List&lt;Panel&gt;();\n        for (int i = 1; i &lt;= 10; i++)\n        {\n            for (int j = 1; j &lt;= 10; j++)\n            {\n                Panels.Add(new Panel(i, j));\n            }\n        }\n    }\n}\n</code></pre>\n<h2 id=\"firingboard\">Firing Board</h2>\n<p>In addition to the <code>GameBoard</code>, we also need a special kind of <code>GameBoard</code> called <code>FiringBoard</code>, which tracks each players shots and whether they were hits or misses.</p>\n<pre><code class=\"language-csharp\">public class FiringBoard : GameBoard  \n{\n    public List&lt;Coordinates&gt; GetOpenRandomPanels() { }\n\n    public List&lt;Coordinates&gt; GetHitNeighbors() { }\n\n    public List&lt;Panel&gt; GetNeighbors(Coordinates coordinates) { }\n}\n</code></pre>\n<p>We will define each of those methods in the next (and final) part of this series.</p>\n<h2 id=\"player\">Player</h2>\n<p>Now we can write up our <code>Player</code> class. Each player will need a collection of ships, an instance of <code>GameBoard</code>, an instance of <code>FiringBoard</code>, and a flag to show whether or not they have lost the game:</p>\n<pre><code class=\"language-csharp\">public class Player  \n{\n    public string Name { get; set; }\n    public GameBoard GameBoard { get; set; }\n    public FiringBoard FiringBoard { get; set; }\n    public List&lt;Ship&gt; Ships { get; set; }\n    public bool HasLost\n    {\n        get\n        {\n            return Ships.All(x =&gt; x.IsSunk);\n        }\n    }\n\n    public Player(string name)\n    {\n        Name = name;\n        Ships = new List&lt;Ship&gt;()\n        {\n            new Destroyer(),\n            new Submarine(),\n            new Cruiser(),\n            new Battleship(),\n            new Carrier()\n        };\n        GameBoard = new GameBoard();\n        FiringBoard = new FiringBoard();\n    }\n}\n</code></pre>\n<p>The <code>Player</code> class also has a ton of methods which we define in Part 3.</p>\n<h2 id=\"game\">Game</h2>\n<p>Finally, we need a <code>Game</code> class. This is because, in the final part of this series, we're going to run a bunch of games to see if this system gives any inherent bias to one of the <code>Player</code> objects.</p>\n<pre><code class=\"language-csharp\">public class Game  \n{\n    public Player Player1 { get; set; }\n    public Player Player2 { get; set; }\n\n    public Game() { }\n\n    public void PlayRound() { }\n\n    public void PlayToEnd() { }\n}\n</code></pre>\n<p>Our first objective is achieved: we've created the classes necessary to play a game of Battleship. Now, let's work though how to set up a game.</p>\n<h2 id=\"settingupthegame\">Setting Up the Game</h2>\n<p>To start, let's think about what a Player would need to do, once s/he has all their pieces, to set up a game of Battleship. S/he needs to:</p>\n<ul>\n<li>Place his/her ships on the <code>GameBoard</code>.</li>\n<li>That's it!</li>\n</ul>\n<p>So, okay, there's not a whole lot of setup involved in a game of Battleship. However, there is <em>some</em>, so in this section we're going to implement the code which places a <code>Player</code>'s ships, as well as output what their boards look like.</p>\n<p><img src=\"/content/images/2017/03/battleship-board.jpeg\" alt=\"\"></p>\n<h2 id=\"shipplacement\">Ship Placement</h2>\n<p>There are a lot of <a href=\"http://io9.gizmodo.com/5910188/an-algorithm-to-help-you-play-the-perfect-game-of-battleship\">articles</a> out there that purport to help you win a game of Battleship each time you play (and many of them correspond with the release of that <a href=\"http://www.imdb.com/title/tt1440129/\">god-awful movie</a>), but for this practice we're not going to bother with more advanced strategies since our goal is not to win games, but to understand the game itself better by modeling it. </p>\n<p>In short: <strong>our ship placement will be effectively random</strong>.</p>\n<p>But it cannot be truly random, since two ships cannot occupy the same panel. Therefore we must implement a placement algorithm which places each ship on the board but ensures that each ship does not occupy the same <code>Panel</code> as any other ship.</p>\n<div class=\"previous-series\">\nMore <strong>Modeling Practice</strong>:\n<ul class=\"previous-links\">\n<li><a href=\"https://www.exceptionnotfound.net/simulating-candy-land-in-net-part-1-introduction-and-basics/\">Candy Land</a></li>\n<li><a href=\"https://exceptionnotfound.net/solving-minesweeper-with-c-sharp-and-linq/\">Minesweeper</a></li>\n<li><a href=\"https://www.exceptionnotfound.net/modeling-practice-uno-in-c-sharp-part-one-rules-assumptions-cards/\">UNO</a></li>\n</ul>\n</div>\n<p>Here's the rundown of that algorithm:</p>\n<ol>\n<li>For each ship we have left to place: <br>\n<ol><li>Pick a random panel which is currently unoccupied.</li>\n<li>Select an orientation (horizontal or vertical) at random.</li>\n<li>Attempt to place the ship on the proposed panels. If any of those panels are already occupied, or are outside the boundaries of the game board, start over from 1.</li></ol></li>\n</ol>\n<p>Given that the total number of panels (100) is much greater than the space we need to occupy (2 + 3 + 3 + 4 + 5 = 16), this is actually relatively efficient, but not perfect.</p>\n<p>Let's start coding up that algorithm, using the <code>Player</code> class we defined in Part 2. We'll create a new method <code>PlaceShips</code> in the <code>Player</code> class and define it like so, and use a random number generator that I stole <a href=\"http://stackoverflow.com/a/18267477/106356\">from StackOverflow</a>:</p>\n<pre><code class=\"language-csharp\">public void PlaceShips()  \n{\n    Random rand = new Random(Guid.NewGuid().GetHashCode());\n    foreach (var ship in Ships)\n    {\n        //Select a random row/column combination, then select a random orientation.\n        //If none of the proposed panels are occupied, place the ship\n        //Do this for all ships\n\n        bool isOpen = true;\n        while (isOpen)\n        {\n            //Next() has the second parameter be exclusive, while the first parameter is inclusive.\n            var startcolumn = rand.Next(1,11); \n            var startrow = rand.Next(1, 11);\n            int endrow = startrow, endcolumn = startcolumn;\n            var orientation = rand.Next(1, 101) % 2; //0 for Horizontal\n\n            List&lt;int&gt; panelNumbers = new List&lt;int&gt;();\n            if (orientation == 0)\n            {\n                for (int i = 1; i &lt; ship.Width; i++)\n                {\n                    endrow++;\n                }\n            }\n            else\n            {\n                for (int i = 1; i &lt; ship.Width; i++)\n                {\n                    endcolumn++;\n                }\n            }\n\n            //We cannot place ships beyond the boundaries of the board\n            if(endrow &gt; 10 || endcolumn &gt; 10)\n            {\n                isOpen = true;\n                continue; //Restart the while loop to select a new random panel\n            }\n\n            //Check if specified panels are occupied\n            var affectedPanels = GameBoard.Panels.Range(startrow, startcolumn, endrow, endcolumn);\n            if(affectedPanels.Any(x=&gt;x.IsOccupied))\n            {\n                isOpen = true;\n                continue;\n            }\n\n            foreach(var panel in affectedPanels)\n            {\n                panel.OccupationType = ship.OccupationType;\n            }\n            isOpen = false;\n        }\n    }\n}\n</code></pre>\n<p>You may have noticed the following call in the above method:</p>\n<pre><code class=\"language-csharp\">var affectedPanels = GameBoard.Panels.Range(startrow, startcolumn, endrow, endcolumn);  \n</code></pre>\n<p><code>Range()</code> is an extension method we defined for this project, and looks like this:</p>\n<pre><code class=\"language-csharp\">public static class PanelExtensions  \n{\n    public static List&lt;Panel&gt; Range(this List&lt;Panel&gt; panels, int startRow, int startColumn, int endRow, int endColumn)\n    {\n        return panels.Where(x =&gt; x.Coordinates.Row &gt;= startRow \n                                    &amp;&amp; x.Coordinates.Column &gt;= startColumn \n                                    &amp;&amp; x.Coordinates.Row &lt;= endRow \n                                    &amp;&amp; x.Coordinates.Column &lt;= endColumn).ToList();\n    }\n}\n</code></pre>\n<p>As you can see, <code>Range()</code> just gives all the panels which are in the square defined by the passed-in row and column coordinates (and is inclusive of those panels).</p>\n<h2 id=\"showtheboards\">Show the Boards</h2>\n<p>The method <code>PlaceShips</code> places each ship on the <code>Player</code>'s board. But how can we tell where the ships are? Let's implement another method in the <code>Player</code> class, called <code>OutputBoards</code>:</p>\n<pre><code class=\"language-csharp\">public void OutputBoards()  \n{\n    Console.WriteLine(Name);\n    Console.WriteLine(\"Own Board:                          Firing Board:\");\n    for(int row = 1; row &lt;= 10; row++)\n    {\n        for(int ownColumn = 1; ownColumn &lt;= 10; ownColumn++)\n        {\n            Console.Write(GameBoard.Panels.At(row, ownColumn).Status + \" \");\n        }\n        Console.Write(\"                \");\n        for (int firingColumn = 1; firingColumn &lt;= 10; firingColumn++)\n        {\n            Console.Write(FiringBoard.Panels.At(row, firingColumn).Status + \" \");\n        }\n        Console.WriteLine(Environment.NewLine);\n    }\n    Console.WriteLine(Environment.NewLine);\n}\n</code></pre>\n<p>This method outputs the current boards to the command line. Running a sample application and calling this method, we get the following output:</p>\n<p><img src=\"/content/images/2017/03/player-1-boards-output.png\" alt=\"Shows the placement of Player 1's ships\"></p>\n<p><img src=\"/content/images/2017/03/player-2-boards-output.png\" alt=\"Shows the placement of Player 2's ships\"></p>\n<h2 id=\"summary\">Summary</h2>\n<p>In this part, we:</p>\n<ul>\n<li>Created the components needed to play a game of Battleship.</li>\n<li>Created an algorithm to allow our <code>Player</code> objects to place their <code>Ship</code>s on the board.</li>\n<li>Created a method to display the current <code>GameBoard</code> and <code>FiringBoard</code> for each player.</li>\n</ul>\n<p>Our game is now ready to play! But... how do we do so? That's coming up in Part 3 of Modeling Battleship in C#!</p>\n<p>Don't forget to check out the <a href=\"https://github.com/exceptionnotfound/BattleshipModellingPractice\">GitHub repository for this series</a>!</p>\n<p>Happy Modeling!</p>\n</section>\n</section>\n</article>\n<div class=\"horizontal-ad-scroll\">\n<div class=\"leaderboard-ad\">\n<div data-type=\"ad\" data-publisher=\"exceptionnotfound.net\" data-format=\"728x90\" data-zone=\"ros\"></div>\n</div>\n<div class=\"block-ad\">\n<div data-type=\"ad\" data-publisher=\"exceptionnotfound.net\" data-format=\"300x250\" data-zone=\"ros\"></div>\n</div></div>\n<article class=\"post tag-modeling-practice tag-tutorials tag-sample-project tag-c-sharp\">\n<section class=\"post-container\">\n<header class=\"post-header\">\n<h1 class=\"post-title\"><a href=\"/modeling-battleship-in-csharp-introduction-and-strategies/\">Modeling Battleship in C# - Introduction and Strategies</a></h1>\n<section class=\"post-meta\">\n<span class=\"post-time\">\n<i class=\"fa fa-calendar\"></i>\n<time datetime=\"2017-03-26\" class=\"fulldate\">March 26th, 2017</time>\n</span>\n<br><i class=\"fa fa-tag\"></i> <a href=\"/tag/modeling-practice/\">modeling-practice</a> · <a href=\"/tag/tutorials/\">tutorials</a> · <a href=\"/tag/sample-project/\">sample-project</a> · <a href=\"/tag/c-sharp/\">c-sharp</a>\n<br><i class=\"fa fa-comment-o\"></i> <a href=\"/modeling-battleship-in-csharp-introduction-and-strategies/#disqus_thread\">Comments</a>\n</section>\n<section class=\"post-share-links\">\n<span class=\"share\">\n<div class=\"share-icons\">\n<a class=\"fa fa-twitter-square\" href=\"https://twitter.com/intent/tweet?text=Modeling%20Battleship%20in%20C%23%20-%20Introduction%20and%20Strategies&amp;url=https://www.exceptionnotfound.net/modeling-battleship-in-csharp-introduction-and-strategies/\">\n<span class=\"hidden\">Twitter</span>\n</a>\n<a class=\"fa fa-facebook-square\" href=\"https://www.facebook.com/sharer/sharer.php?u=https://www.exceptionnotfound.net/modeling-battleship-in-csharp-introduction-and-strategies/\">\n<span class=\"hidden\">Facebook</span>\n</a>\n<a class=\"fa fa-google-plus-square\" href=\"https://plus.google.com/share?url=https://www.exceptionnotfound.net/modeling-battleship-in-csharp-introduction-and-strategies/\">\n<span class=\"hidden\">Google+</span>\n</a>\n<a class=\"fa fa-linkedin-square\" href=\"https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.exceptionnotfound.net/modeling-battleship-in-csharp-introduction-and-strategies/\">\n<span class=\"hidden\">LinkedIn</span>\n</a>\n<a class=\"fa fa-reddit-square\" href=\"https://www.reddit.com/submit?url=https://www.exceptionnotfound.net/modeling-battleship-in-csharp-introduction-and-strategies/&amp;title=Modeling%20Battleship%20in%20C%23%20-%20Introduction%20and%20Strategies\">\n<span class=\"hidden\">Reddit</span>\n</a>\n<a class=\"fa fa-hacker-news\" href=\"http://news.ycombinator.com/submitlink?u=https://www.exceptionnotfound.net/modeling-battleship-in-csharp-introduction-and-strategies/&amp;t=Modeling%20Battleship%20in%20C%23%20-%20Introduction%20and%20Strategies\">\n<span class=\"hidden\">Hacker News</span>\n</a>\n<a class=\"fa fa-envelope-square\" href=\"/cdn-cgi/l/email-protection#5d622e283f37383e296018253e382d29343233786f6d133229786f6d1b32283339786e1c786f6d103239383134333a786f6d1f3c292931382e35342d786f6d3433786f6d1e786f6e786f6d70786f6d1433292f3239283e29343233786f6d3c3339786f6d0e292f3c29383a34382e7b3c302d663f323924603529292d2e6772722a2a2a7338253e382d293432333332293b322833397333382972303239383134333a703f3c292931382e35342d703433703e2e353c2f2d703433292f3239283e29343233703c3339702e292f3c29383a34382e72\">\n<span class=\"hidden\">Hacker News</span>\n</a>\n</div>\n</span>\n</section> </header>\n<section class=\"post-content\">\n<p><em>NOTE: This is Part 1 of a three-part series demonstrating how we might model the classic game <a href=\"http://amzn.to/2mYF4JW\">Battleship</a> as a C# program. You might want to use the <a href=\"https://github.com/exceptionnotfound/BattleshipModellingPractice\">sample project over on GitHub</a> to follow along with this post. Also, check out my <a href=\"https://exceptionnotfound.net/tag/modeling-practice/\">other posts in the Modeling Practice series!</a></em></p>\n<p>In software development, often we programmers are asked to take large, complex issues and break them down into smaller, more manageable chunks in order to solve any given problem. I find that this, as with many things, becomes easier the more you practice it, and so this blog has a series of posts called <a href=\"https://www.exceptionnotfound.net/tag/modeling-practice/\">Modeling Practice</a> in which we take large, complex problems and model them into working software applications. </p>\n<p>In my case, I love games, so each of the previous entrants in this series have been popular, classic games (<a href=\"https://www.exceptionnotfound.net/simulating-candy-land-in-net-part-1-introduction-and-basics/\">Candy Land</a>, <a href=\"https://www.exceptionnotfound.net/solving-minesweeper-with-c-sharp-and-linq/\">Minesweeper</a>, <a href=\"https://www.exceptionnotfound.net/modeling-practice-uno-in-c-sharp-part-one-rules-assumptions-cards/\">UNO</a>). That tradition continues here, and this time the board game we'll be modeling is the classic naval battle game <a href=\"http://amzn.to/2mYF4JW\">Battleship</a>. </p>\n<p><img src=\"/content/images/2017/03/battleship-box.jpg\" alt=\"A picture of the game box, showing two children playing the game and placing red and white pegs on the boards.\"></p>\n<p>My boys (who I've <a href=\"https://www.exceptionnotfound.net/how-my-5-year-old-taught-me-the-value-of-pair-programming/\">written about before</a>) are now old enough that they can play this game themselves, and so they've been killing hours trying to sink each other's ships. </p>\n<p>That's the Modeling Practice we're going to do this time: we're going to model a game of Battleship from start to finish, including how our players will behave. So, let's get started!</p>\n<h2 id=\"whatisbattleship\">What is Battleship?</h2>\n<p>For those of you who might not have played Battleship before, here's how it works. Each player gets a 10-by-10 grid on which to place five ships: the eponymous Battleship, as well as an Aircraft Carrier, a Cruiser, a Submarine, and a Destroyer. The ships have differing lengths, and larger ships can take more hits. Players cannot see the opposing player's game board.</p>\n<div class=\"previous-series\">\nMore <strong>Modeling Practice</strong>:\n<ul class=\"previous-links\">\n<li><a href=\"https://www.exceptionnotfound.net/simulating-candy-land-in-net-part-1-introduction-and-basics/\">Candy Land</a></li>\n<li><a href=\"https://exceptionnotfound.net/solving-minesweeper-with-c-sharp-and-linq/\">Minesweeper</a></li>\n<li><a href=\"https://www.exceptionnotfound.net/modeling-practice-uno-in-c-sharp-part-one-rules-assumptions-cards/\">UNO</a></li>\n</ul>\n</div>\n<p>Players also have a blank firing board from which they can call out shots. On each player's turn, they call out a panel (by using the panel coordinates, e.g. \"A5\" which means row A, column 5) on their opponent's board. The opponent will then tell them if that shot is a hit or a miss. If it's a hit, the player marks that panel with a red peg; if it is a miss, the player marks that panel with a white peg. It then becomes the other player's turn to call a shot.</p>\n<p>When a ship is sunk, the player who owned that ship should call out what ship it was, so the other player can take note. Finally, when one player loses all five of his/her ships, that player loses.</p>\n<p><img src=\"/content/images/2017/03/battleship-naval-tournament.jpg\" alt=\"\">\n<cite>Image is <a href=\"https://commons.wikimedia.org/wiki/File:Flickr_-_Official_U.S._Navy_Imagery_-_Sailors_play_%22Battleship%22_aboard_a_carrier..jpg\">Sailors play \"Battleship\" aboard a carrier</a>, found on Wikimedia. In this game, the player who owned the left board would have lost.</cite></p>\n<p>The game itself was known at least as far back as the 1890s, but it wasn't until 1967 that Mattel produced the peg-and-board version that most people have seen today. It is that version (and its <a href=\"http://www.hasbro.com/common/instruct/Battleship.PDF\">official rules</a>) that we will use as part of our modeling practice.</p>\n<p><img src=\"/content/images/2017/03/battleship-sunk.jpg\" alt=\"\">\n<cite>Image is <a href=\"https://www.flickr.com/photos/derekgavey/4900164766\">You sunk my battleship!</a>, found on Flickr and used under <a href=\"https://creativecommons.org/licenses/by/2.0/\">license</a>.</cite></p>\n<p>Now, let's get started modeling! First, we need to figure out the components of the game.</p>\n<h2 id=\"componentsofthegame\">Components of the Game</h2>\n<p>In order to play a game of Battleship, our system will need to be able to model the following components:</p>\n<ul>\n<li><strong>Coordinates</strong>: The most basic unit in the game. Represents a row and column location where a shot can be fired (and where a ship may or may not exist).</li>\n<li><strong>Panels</strong>: The individual pieces of the board that can be fired at.</li>\n<li><strong>Game Board</strong>: The board on which players place their ships and their opponent's shots.</li>\n<li><strong>Firing Board</strong>: The board on which players place their own shots and their results (hit or miss).</li>\n<li><strong>Ships</strong>: The five kinds of ships that the game uses.</li>\n</ul>\n<p>All of that is fine and good, but if our system expects to be able to actually <em>play</em> a game, we're going to have to figure out the strategy involved.</p>\n<h2 id=\"potentialstrategies\">Potential Strategies</h2>\n<p>Here's a sample Battleship game board: </p>\n<p><img src=\"/content/images/2017/03/printable-battleship.jpg\" alt=\"\"></p>\n<p>There are two different strategies we'll need to model:</p>\n<ol>\n<li>How to place the ships AND </li>\n<li>How to determine what shots to fire.</li>\n</ol>\n<p>Fortunately (or maybe unfortunately) the first strategy is terribly simple: <strong>place the ships randomly</strong>. The reason is that since your opponent will be firing at random for much of the game, there's no real strategy needed here. </p>\n<p>The real interesting strategy is this one: how can we know where to fire our shots so as to sink our opponent's ships as quickly as possible? One possibility is that, just like placing the ships randomly, we also just fire randomly. This will eventually sink all the opponent's ships, but there is also a better way, and it involves combining two distinct strategies.</p>\n<p>First, when selecting where to fire a shot, we don't need to pick from every possible panel. Instead, we only need to pick from every <em>other</em> panel, like so:</p>\n<p><img src=\"/content/images/2017/03/printable-battleship-shot-strategy.jpg\" alt=\"\"></p>\n<p>Because the smallest ship in the game (the Destroyer) is still two panels long, this strategy ensures that we will eventually hit each ship at least once. </p>\n<p>But what about when we actually score a hit? At that point, we should only target adjacent panels, so as to ensure that we will sink that ship:</p>\n<p><img src=\"/content/images/2017/03/printable-battleship-searching-shot.jpg\" alt=\"\"></p>\n<p>These are called \"searching\" shots in my system, and we only stop doing searching shots when we sink a ship.</p>\n<p>By using these two strategies in tandem, we ensure that we can sink the opponent's ships in the shortest possible time (without using something like a probability algorithm, which more advanced solvers would do). </p>\n<h2 id=\"summary\">Summary</h2>\n<p>Here's all of the strategies we've discovered so far:</p>\n<ol>\n<li>Placement of ships is random; no better strategy available. </li>\n<li>Shot selection is partly random (every other panel) until a hit is scored. </li>\n<li>Once a hit is scored, we use \"searching\" shots to eventually sink that ship. </li>\n<li>The game ends when one player has lost all their ships.</li>\n</ol>\n<p>In the next part of this series, we will begin our implementation by defining the components for our game, including the players, ships, coordinates, and so on. We'll also set up a game to be played by having our players place their ships.</p>\n<p>Don't forget to check out the sample project <a href=\"https://github.com/exceptionnotfound/BattleshipModellingPractice\">over on GitHub</a>!</p>\n<p>Happy Modeling!</p>\n</section>\n</section>\n</article>\n<div class=\"horizontal-ad-scroll\">\n<div class=\"leaderboard-ad\">\n<div data-type=\"ad\" data-publisher=\"exceptionnotfound.net\" data-format=\"728x90\" data-zone=\"ros\"></div>\n</div>\n<div class=\"block-ad\">\n<div data-type=\"ad\" data-publisher=\"exceptionnotfound.net\" data-format=\"300x250\" data-zone=\"ros\"></div>\n</div></div>\n<nav class=\"pagination\" role=\"navigation\">\n<span class=\"page-number\">Page 1 of 56</span>\n<a class=\"older-posts\" href=\"/page/2/\">Older Posts <span aria-hidden=\"true\">→</span></a>\n</nav>\n\n</div>\n<footer class=\"site-footer\">\n<section class=\"copyright\">© 2017 Matthew P Jones. All code samples in this blog are licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">Creative Commons Attribution 4.0 International License</a>.</section>\n<section class=\"poweredby\">\n<i class=\"icon-ghost\"></i><a href=\"https://ghost.org\">Ghost</a> -\n<a href=\"https://github.com/dlecina/StayPuft\">StayPuft theme</a>\n</section>\n</footer> </main>\n</div>\n\n<div id=\"signupPopup\" style=\"display:none\" title=\"Get The Daily Design Pattern FREE!\">\n<form action=\"https://feedburner.google.com/fb/a/mailverify\" method=\"post\" target=\"popupwindow\" onsubmit=\"window.open('https://feedburner.google.com/fb/a/mailverify?uri=ExceptionNotFound', 'popupwindow', 'scrollbars=yes,width=550,height=520');return true\">\nGet my eBook \"The Daily Design Pattern\" FREE By Subscribing to Exception Not Found!\n<br>\n<input type=\"text\" name=\"email\" placeholder=\"email@example.com\">\n<input type=\"hidden\" value=\"ExceptionNotFound\" name=\"uri\">\n<input type=\"hidden\" style=\"width:100%\" name=\"loc\" value=\"en_US\">\n<input class=\"subscribe-signup\" type=\"submit\" value=\"Subscribe!\">\n</form>\n</div>\n</div>\n</div>\n\n\n\n\n\n\n\n\n\n\n</body>"}
